{"version":3,"sources":["../../../../src/text-layer/text-background-layer/text-background-layer.js"],"names":["Layer","project32","picking","Model","Geometry","vs","fs","defaultProps","billboard","sizeScale","sizeUnits","sizeMinPixels","sizeMaxPixels","Number","MAX_SAFE_INTEGER","padding","type","value","getPosition","x","position","getSize","getAngle","getPixelOffset","getBoundingRect","getFillColor","getLineColor","getLineWidth","TextBackgroundLayer","getShaders","modules","initializeState","getAttributeManager","addInstanced","instancePositions","size","fp64","use64bitPositions","transition","accessor","instanceSizes","defaultValue","instanceAngles","instanceRects","instancePixelOffsets","instanceFillColors","normalized","instanceLineColors","instanceLineWidths","updateState","props","oldProps","changeFlags","extensionsChanged","gl","context","state","model","delete","_getModel","invalidateAll","draw","uniforms","viewport","sizeScaleMultiplier","metersPerPixel","setUniforms","stroked","Boolean","positions","id","geometry","drawMode","vertexCount","attributes","Float32Array","isInstanced","layerName"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,SAAf,EAA0BC,OAA1B,QAAwC,eAAxC;AAEA,SAAQC,KAAR,EAAeC,QAAf,QAA8B,eAA9B;AAEA,OAAOC,EAAP,MAAe,qCAAf;AACA,OAAOC,EAAP,MAAe,uCAAf;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,IADQ;AAEnBC,EAAAA,SAAS,EAAE,CAFQ;AAGnBC,EAAAA,SAAS,EAAE,QAHQ;AAInBC,EAAAA,aAAa,EAAE,CAJI;AAKnBC,EAAAA,aAAa,EAAEC,MAAM,CAACC,gBALH;AAOnBC,EAAAA,OAAO,EAAE;AAACC,IAAAA,IAAI,EAAE,OAAP;AAAgBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAvB,GAPU;AASnBC,EAAAA,WAAW,EAAE;AAACF,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAEE,CAAC,IAAIA,CAAC,CAACC;AAAjC,GATM;AAUnBC,EAAAA,OAAO,EAAE;AAACL,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAVU;AAWnBK,EAAAA,QAAQ,EAAE;AAACN,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B,GAXS;AAYnBM,EAAAA,cAAc,EAAE;AAACP,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAA1B,GAZG;AAanBO,EAAAA,eAAe,EAAE;AAACR,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV;AAA1B,GAbE;AAcnBQ,EAAAA,YAAY,EAAE;AAACT,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV;AAA1B,GAdK;AAenBS,EAAAA,YAAY,EAAE;AAACV,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV;AAA1B,GAfK;AAgBnBU,EAAAA,YAAY,EAAE;AAACX,IAAAA,IAAI,EAAE,UAAP;AAAmBC,IAAAA,KAAK,EAAE;AAA1B;AAhBK,CAArB;AAmBA,eAAe,MAAMW,mBAAN,SAAkC5B,KAAlC,CAAwC;AACrD6B,EAAAA,UAAU,GAAG;AACX,WAAO,MAAMA,UAAN,CAAiB;AAACxB,MAAAA,EAAD;AAAKC,MAAAA,EAAL;AAASwB,MAAAA,OAAO,EAAE,CAAC7B,SAAD,EAAYC,OAAZ;AAAlB,KAAjB,CAAP;AACD;;AAED6B,EAAAA,eAAe,GAAG;AAChB,SAAKC,mBAAL,GAA2BC,YAA3B,CAAwC;AACtCC,MAAAA,iBAAiB,EAAE;AACjBC,QAAAA,IAAI,EAAE,CADW;AAEjBnB,QAAAA,IAAI,MAFa;AAGjBoB,QAAAA,IAAI,EAAE,KAAKC,iBAAL,EAHW;AAIjBC,QAAAA,UAAU,EAAE,IAJK;AAKjBC,QAAAA,QAAQ,EAAE;AALO,OADmB;AAQtCC,MAAAA,aAAa,EAAE;AACbL,QAAAA,IAAI,EAAE,CADO;AAEbG,QAAAA,UAAU,EAAE,IAFC;AAGbC,QAAAA,QAAQ,EAAE,SAHG;AAIbE,QAAAA,YAAY,EAAE;AAJD,OARuB;AActCC,MAAAA,cAAc,EAAE;AACdP,QAAAA,IAAI,EAAE,CADQ;AAEdG,QAAAA,UAAU,EAAE,IAFE;AAGdC,QAAAA,QAAQ,EAAE;AAHI,OAdsB;AAmBtCI,MAAAA,aAAa,EAAE;AACbR,QAAAA,IAAI,EAAE,CADO;AAEbI,QAAAA,QAAQ,EAAE;AAFG,OAnBuB;AAuBtCK,MAAAA,oBAAoB,EAAE;AACpBT,QAAAA,IAAI,EAAE,CADc;AAEpBG,QAAAA,UAAU,EAAE,IAFQ;AAGpBC,QAAAA,QAAQ,EAAE;AAHU,OAvBgB;AA4BtCM,MAAAA,kBAAkB,EAAE;AAClBV,QAAAA,IAAI,EAAE,CADY;AAElBG,QAAAA,UAAU,EAAE,IAFM;AAGlBQ,QAAAA,UAAU,EAAE,IAHM;AAIlB9B,QAAAA,IAAI,MAJc;AAKlBuB,QAAAA,QAAQ,EAAE,cALQ;AAMlBE,QAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV;AANI,OA5BkB;AAoCtCM,MAAAA,kBAAkB,EAAE;AAClBZ,QAAAA,IAAI,EAAE,CADY;AAElBG,QAAAA,UAAU,EAAE,IAFM;AAGlBQ,QAAAA,UAAU,EAAE,IAHM;AAIlB9B,QAAAA,IAAI,MAJc;AAKlBuB,QAAAA,QAAQ,EAAE,cALQ;AAMlBE,QAAAA,YAAY,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV;AANI,OApCkB;AA4CtCO,MAAAA,kBAAkB,EAAE;AAClBb,QAAAA,IAAI,EAAE,CADY;AAElBG,QAAAA,UAAU,EAAE,IAFM;AAGlBC,QAAAA,QAAQ,EAAE,cAHQ;AAIlBE,QAAAA,YAAY,EAAE;AAJI;AA5CkB,KAAxC;AAmDD;;AAEDQ,EAAAA,WAAW,CAAC;AAACC,IAAAA,KAAD;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA;AAAlB,GAAD,EAAiC;AAC1C,UAAMH,WAAN,CAAkB;AAACC,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,KAAlB;;AACA,QAAIA,WAAW,CAACC,iBAAhB,EAAmC;AAAA;;AACjC,YAAM;AAACC,QAAAA;AAAD,UAAO,KAAKC,OAAlB;AACA,gCAAKC,KAAL,CAAWC,KAAX,wEAAkBC,MAAlB;AACA,WAAKF,KAAL,CAAWC,KAAX,GAAmB,KAAKE,SAAL,CAAeL,EAAf,CAAnB;AACA,WAAKtB,mBAAL,GAA2B4B,aAA3B;AACD;AACF;;AAEDC,EAAAA,IAAI,CAAC;AAACC,IAAAA;AAAD,GAAD,EAAa;AACf,UAAM;AAACC,MAAAA;AAAD,QAAa,KAAKR,OAAxB;AACA,UAAM;AACJ/C,MAAAA,SADI;AAEJC,MAAAA,SAFI;AAGJC,MAAAA,SAHI;AAIJC,MAAAA,aAJI;AAKJC,MAAAA,aALI;AAMJG,MAAAA,OANI;AAOJY,MAAAA;AAPI,QAQF,KAAKuB,KART;AAUA,UAAMc,mBAAmB,GAAGtD,SAAS,KAAK,QAAd,GAAyBqD,QAAQ,CAACE,cAAlC,GAAmD,CAA/E;AAEA,SAAKT,KAAL,CAAWC,KAAX,CACGS,WADH,CACeJ,QADf,EAEGI,WAFH,CAEe;AACX1D,MAAAA,SADW;AAEX2D,MAAAA,OAAO,EAAEC,OAAO,CAACzC,YAAD,CAFL;AAGXZ,MAAAA,OAHW;AAIXN,MAAAA,SAAS,EAAEA,SAAS,GAAGuD,mBAJZ;AAKXrD,MAAAA,aALW;AAMXC,MAAAA;AANW,KAFf,EAUGiD,IAVH;AAWD;;AAEDF,EAAAA,SAAS,CAACL,EAAD,EAAK;AAEZ,UAAMe,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,CAAlB;AAEA,WAAO,IAAIlE,KAAJ,CAAUmD,EAAV,EAAc,EACnB,GAAG,KAAKzB,UAAL,EADgB;AAEnByC,MAAAA,EAAE,EAAE,KAAKpB,KAAL,CAAWoB,EAFI;AAGnBC,MAAAA,QAAQ,EAAE,IAAInE,QAAJ,CAAa;AACrBoE,QAAAA,QAAQ,GADa;AAErBC,QAAAA,WAAW,EAAE,CAFQ;AAGrBC,QAAAA,UAAU,EAAE;AACVL,UAAAA,SAAS,EAAE;AAAClC,YAAAA,IAAI,EAAE,CAAP;AAAUlB,YAAAA,KAAK,EAAE,IAAI0D,YAAJ,CAAiBN,SAAjB;AAAjB;AADD;AAHS,OAAb,CAHS;AAUnBO,MAAAA,WAAW,EAAE;AAVM,KAAd,CAAP;AAYD;;AAhHoD;AAmHvDhD,mBAAmB,CAACiD,SAApB,GAAgC,qBAAhC;AACAjD,mBAAmB,CAACrB,YAApB,GAAmCA,YAAnC","sourcesContent":["import {Layer, project32, picking} from '@deck.gl/core';\nimport GL from '@luma.gl/constants';\nimport {Model, Geometry} from '@luma.gl/core';\n\nimport vs from './text-background-layer-vertex.glsl';\nimport fs from './text-background-layer-fragment.glsl';\n\nconst defaultProps = {\n  billboard: true,\n  sizeScale: 1,\n  sizeUnits: 'pixels',\n  sizeMinPixels: 0,\n  sizeMaxPixels: Number.MAX_SAFE_INTEGER,\n\n  padding: {type: 'array', value: [0, 0]},\n\n  getPosition: {type: 'accessor', value: x => x.position},\n  getSize: {type: 'accessor', value: 1},\n  getAngle: {type: 'accessor', value: 0},\n  getPixelOffset: {type: 'accessor', value: [0, 0]},\n  getBoundingRect: {type: 'accessor', value: [0, 0, 0, 0]},\n  getFillColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineColor: {type: 'accessor', value: [0, 0, 0, 255]},\n  getLineWidth: {type: 'accessor', value: 1}\n};\n\nexport default class TextBackgroundLayer extends Layer {\n  getShaders() {\n    return super.getShaders({vs, fs, modules: [project32, picking]});\n  }\n\n  initializeState() {\n    this.getAttributeManager().addInstanced({\n      instancePositions: {\n        size: 3,\n        type: GL.DOUBLE,\n        fp64: this.use64bitPositions(),\n        transition: true,\n        accessor: 'getPosition'\n      },\n      instanceSizes: {\n        size: 1,\n        transition: true,\n        accessor: 'getSize',\n        defaultValue: 1\n      },\n      instanceAngles: {\n        size: 1,\n        transition: true,\n        accessor: 'getAngle'\n      },\n      instanceRects: {\n        size: 4,\n        accessor: 'getBoundingRect'\n      },\n      instancePixelOffsets: {\n        size: 2,\n        transition: true,\n        accessor: 'getPixelOffset'\n      },\n      instanceFillColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getFillColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineColors: {\n        size: 4,\n        transition: true,\n        normalized: true,\n        type: GL.UNSIGNED_BYTE,\n        accessor: 'getLineColor',\n        defaultValue: [0, 0, 0, 255]\n      },\n      instanceLineWidths: {\n        size: 1,\n        transition: true,\n        accessor: 'getLineWidth',\n        defaultValue: 1\n      }\n    });\n  }\n\n  updateState({props, oldProps, changeFlags}) {\n    super.updateState({props, oldProps, changeFlags});\n    if (changeFlags.extensionsChanged) {\n      const {gl} = this.context;\n      this.state.model?.delete();\n      this.state.model = this._getModel(gl);\n      this.getAttributeManager().invalidateAll();\n    }\n  }\n\n  draw({uniforms}) {\n    const {viewport} = this.context;\n    const {\n      billboard,\n      sizeScale,\n      sizeUnits,\n      sizeMinPixels,\n      sizeMaxPixels,\n      padding,\n      getLineWidth\n    } = this.props;\n\n    const sizeScaleMultiplier = sizeUnits === 'pixels' ? viewport.metersPerPixel : 1;\n\n    this.state.model\n      .setUniforms(uniforms)\n      .setUniforms({\n        billboard,\n        stroked: Boolean(getLineWidth),\n        padding,\n        sizeScale: sizeScale * sizeScaleMultiplier,\n        sizeMinPixels,\n        sizeMaxPixels\n      })\n      .draw();\n  }\n\n  _getModel(gl) {\n    // a square that minimally cover the unit circle\n    const positions = [0, 0, 1, 0, 1, 1, 0, 1];\n\n    return new Model(gl, {\n      ...this.getShaders(),\n      id: this.props.id,\n      geometry: new Geometry({\n        drawMode: GL.TRIANGLE_FAN,\n        vertexCount: 4,\n        attributes: {\n          positions: {size: 2, value: new Float32Array(positions)}\n        }\n      }),\n      isInstanced: true\n    });\n  }\n}\n\nTextBackgroundLayer.layerName = 'TextBackgroundLayer';\nTextBackgroundLayer.defaultProps = defaultProps;\n"],"file":"text-background-layer.js"}