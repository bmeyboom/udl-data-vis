{"version":3,"sources":["../../../../src/lib/process-utils/child-process-proxy.ts"],"names":["DEFAULT_PROPS","command","arguments","port","autoPort","wait","onSuccess","processProxy","console","log","props","ChildProcessProxy","id","args","Number","portArg","push","String","Promise","resolve","reject","_setTimeout","join","childProcess","spawn","stdout","on","data","toString","stderr","_clearTimeout","Error","error","code","kill","statusCode","stop","process","exit","message","callback","successTimer","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport {spawn, ChildProcess, SpawnOptionsWithoutStdio} from 'child_process';\nimport {getAvailablePort} from './process-utils';\n\nexport type ChildProcessProxyProps = {\n  command: string;\n  arguments: string[];\n  /** Whether to add a port specified arg */\n  portArg?: string;\n  /** Base port number */\n  port?: number;\n  /** Whether to search for an available port if the base port is occupied */\n  autoPort?: boolean;\n  /** Number of milliseconds to wait until concluding success */\n  /** wait: 0 - infinity */\n  wait?: number;\n  /** Options passed on to Node'.js `spawn` */\n  spawn?: SpawnOptionsWithoutStdio;\n  /** Callback when the  */\n  onStart?: (proxy: ChildProcessProxy) => void;\n  onSuccess?: (proxy: ChildProcessProxy) => void;\n};\n\nconst DEFAULT_PROPS: ChildProcessProxyProps = {\n  command: '',\n  arguments: [],\n  port: 5000,\n  autoPort: true,\n  wait: 2000,\n  onSuccess: (processProxy) => {\n    console.log(`Started ${processProxy.props.command}`);\n  }\n};\n\n/**\n * Manager for a Node.js child process\n * Prepares arguments, starts, stops and tracks output\n */\nexport default class ChildProcessProxy {\n  id: string;\n  props: ChildProcessProxyProps = {...DEFAULT_PROPS};\n  private childProcess: ChildProcess | null = null;\n  private port: number = 0;\n  private successTimer?;\n\n  // constructor(props?: {id?: string});\n  constructor({id = 'browser-driver'} = {}) {\n    this.id = id;\n  }\n\n  /** Starts a child process with the provided props */\n  async start(props: ChildProcessProxyProps): Promise<object> {\n    props = {...DEFAULT_PROPS, ...props};\n    this.props = props;\n\n    const args = [...props.arguments];\n\n    // If portArg is set, we can look up an available port\n    this.port = Number(props.port);\n    if (props.portArg) {\n      if (props.autoPort) {\n        this.port = await getAvailablePort(props.port);\n      }\n      args.push(props.portArg, String(this.port));\n    }\n\n    return await new Promise((resolve, reject) => {\n      try {\n        this._setTimeout(() => {\n          if (props.onSuccess) {\n            props.onSuccess(this);\n          }\n          resolve({});\n        });\n\n        console.log(`Spawning ${props.command} ${props.arguments.join(' ')}`);\n        const childProcess = spawn(props.command, args, props.spawn);\n        this.childProcess = childProcess;\n\n        childProcess.stdout.on('data', (data) => {\n          console.log(data.toString());\n        });\n        // TODO - add option regarding whether stderr should be treated as data\n        childProcess.stderr.on('data', (data) => {\n          console.log(`Child process wrote to stderr: \"${data}\".`);\n          this._clearTimeout();\n          reject(new Error(data));\n        });\n        childProcess.on('error', (error) => {\n          console.log(`Child process errored with ${error}`);\n          this._clearTimeout();\n          reject(error);\n        });\n        childProcess.on('close', (code) => {\n          console.log(`Child process exited with ${code}`);\n          this.childProcess = null;\n          this._clearTimeout();\n          resolve({});\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /** Stops a running child process */\n  async stop(): Promise<void> {\n    if (this.childProcess) {\n      this.childProcess.kill();\n      this.childProcess = null;\n    }\n  }\n\n  /** Exits this process */\n  async exit(statusCode: number = 0): Promise<void> {\n    try {\n      await this.stop();\n      // eslint-disable-next-line no-process-exit\n      process.exit(statusCode);\n    } catch (error) {\n      console.error(error.message || error);\n      // eslint-disable-next-line no-process-exit\n      process.exit(1);\n    }\n  }\n\n  _setTimeout(callback: (...args: any[]) => void) {\n    if (Number(this.props.wait) > 0) {\n      this.successTimer = setTimeout(callback, this.props.wait);\n    }\n  }\n\n  _clearTimeout() {\n    if (this.successTimer) {\n      clearTimeout(this.successTimer);\n    }\n  }\n}\n"],"file":"child-process-proxy.js"}