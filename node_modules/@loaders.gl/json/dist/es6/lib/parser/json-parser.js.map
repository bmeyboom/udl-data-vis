{"version":3,"sources":["../../../../src/lib/parser/json-parser.js"],"names":["ClarinetParser","JSONPath","JSONParser","constructor","reset","_initializeParser","result","undefined","previousStates","currentState","Object","freeze","container","key","jsonpath","write","chunk","parser","close","_pushOrSet","value","push","_openArray","newContainer","isArray","_closeArray","pop","_openObject","_closeObject","onready","length","onopenobject","name","onkey","set","oncloseobject","onopenarray","onclosearray","onvalue","onerror","error","onend"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\nimport ClarinetParser from '../clarinet/clarinet';\nimport JSONPath from '../jsonpath/jsonpath';\n\n// JSONParser builds a JSON object using the events emitted by the Clarinet parser\n\nexport default class JSONParser {\n  constructor() {\n    this.reset();\n    this._initializeParser();\n  }\n\n  reset() {\n    this.result = undefined;\n    this.previousStates = [];\n    this.currentState = Object.freeze({container: [], key: null});\n    this.jsonpath = new JSONPath();\n  }\n\n  write(chunk) {\n    this.parser.write(chunk);\n  }\n\n  close() {\n    this.parser.close();\n  }\n\n  // PRIVATE METHODS\n\n  _pushOrSet(value) {\n    const {container, key} = this.currentState;\n    if (key !== null) {\n      container[key] = value;\n      this.currentState.key = null;\n    } else {\n      container.push(value);\n    }\n  }\n\n  _openArray(newContainer = []) {\n    this.jsonpath.push(null);\n    this._pushOrSet(newContainer);\n    this.previousStates.push(this.currentState);\n    this.currentState = {container: newContainer, isArray: true, key: null};\n  }\n\n  _closeArray() {\n    this.jsonpath.pop();\n    this.currentState = this.previousStates.pop();\n  }\n\n  _openObject(newContainer = {}) {\n    this.jsonpath.push(null);\n    this._pushOrSet(newContainer);\n    this.previousStates.push(this.currentState);\n    this.currentState = {container: newContainer, isArray: false, key: null};\n  }\n\n  _closeObject() {\n    this.jsonpath.pop();\n    this.currentState = this.previousStates.pop();\n  }\n\n  _initializeParser() {\n    this.parser = new ClarinetParser({\n      onready: () => {\n        this.jsonpath = new JSONPath();\n        this.previousStates.length = 0;\n        this.currentState.container.length = 0;\n      },\n\n      onopenobject: name => {\n        this._openObject({});\n        if (typeof name !== 'undefined') {\n          this.parser.onkey(name);\n        }\n      },\n\n      onkey: name => {\n        this.jsonpath.set(name);\n        this.currentState.key = name;\n      },\n\n      oncloseobject: () => {\n        this._closeObject();\n      },\n\n      onopenarray: () => {\n        this._openArray();\n      },\n\n      onclosearray: () => {\n        this._closeArray();\n      },\n\n      onvalue: value => {\n        this._pushOrSet(value);\n      },\n\n      onerror: error => {\n        throw error;\n      },\n\n      onend: () => {\n        this.result = this.currentState.container.pop();\n      }\n    });\n  }\n}\n"],"file":"json-parser.js"}