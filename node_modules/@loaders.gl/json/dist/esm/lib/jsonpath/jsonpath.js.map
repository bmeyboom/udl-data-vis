{"version":3,"sources":["../../../../src/lib/jsonpath/jsonpath.js"],"names":["JSONPath","path","Array","isArray","push","split","Error","join","name","pop","length","other","i","object","value","shift","field","component"],"mappings":";;;;;;;;;;IAQqBA,Q;AACnB,sBAAyB;AAAA,QAAbC,IAAa,uEAAN,IAAM;;AAAA;;AACvB,SAAKA,IAAL,GAAY,CAAC,GAAD,CAAZ;;AAEA,QAAIA,IAAI,YAAYD,QAApB,EAA8B;AAC5B,WAAKC,IAAL,sBAAgBA,IAAI,CAACA,IAArB;AACA;AACD;;AAED,QAAIC,KAAK,CAACC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AAAA;;AACvB,yBAAKA,IAAL,EAAUG,IAAV,sCAAkBH,IAAlB;;AACA;AACD;;AAGD,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAKA,IAAL,GAAYA,IAAI,CAACI,KAAL,CAAW,GAAX,CAAZ;;AACA,UAAI,KAAKJ,IAAL,CAAU,CAAV,MAAiB,GAArB,EAA0B;AACxB,cAAM,IAAIK,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF;AACF;;;;4BAEO;AACN,aAAO,IAAIN,QAAJ,CAAa,IAAb,CAAP;AACD;;;+BAEU;AACT,aAAO,KAAKC,IAAL,CAAUM,IAAV,CAAe,GAAf,CAAP;AACD;;;yBAEIC,I,EAAM;AACT,WAAKP,IAAL,CAAUG,IAAV,CAAeI,IAAf;AACD;;;0BAEK;AACJ,aAAO,KAAKP,IAAL,CAAUQ,GAAV,EAAP;AACD;;;wBAEGD,I,EAAM;AACR,WAAKP,IAAL,CAAU,KAAKA,IAAL,CAAUS,MAAV,GAAmB,CAA7B,IAAkCF,IAAlC;AACD;;;2BAEMG,K,EAAO;AACZ,UAAI,CAAC,IAAD,IAAS,CAACA,KAAV,IAAmB,KAAKV,IAAL,CAAUS,MAAV,KAAqBC,KAAK,CAACV,IAAN,CAAWS,MAAvD,EAA+D;AAC7D,eAAO,KAAP;AACD;;AAED,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,IAAL,CAAUS,MAA9B,EAAsC,EAAEE,CAAxC,EAA2C;AACzC,YAAI,KAAKX,IAAL,CAAUW,CAAV,MAAiBD,KAAK,CAACV,IAAN,CAAWW,CAAX,CAArB,EAAoC;AAClC,iBAAO,KAAP;AACD;AACF;;AAED,aAAO,IAAP;AACD;;;mCAQcC,M,EAAQC,K,EAAO;AAC5B,UAAMb,IAAI,sBAAO,KAAKA,IAAZ,CAAV;;AACAA,MAAAA,IAAI,CAACc,KAAL;AACA,UAAMC,KAAK,GAAGf,IAAI,CAACQ,GAAL,EAAd;;AAH4B,iDAIJR,IAJI;AAAA;;AAAA;AAI5B,4DAA8B;AAAA,cAAnBgB,SAAmB;AAC5BJ,UAAAA,MAAM,GAAGA,MAAM,CAACI,SAAD,CAAf;AACD;AAN2B;AAAA;AAAA;AAAA;AAAA;;AAO5BJ,MAAAA,MAAM,CAACG,KAAD,CAAN,GAAgBF,KAAhB;AACD;;;mCAOcD,M,EAAQ;AACrB,UAAMZ,IAAI,sBAAO,KAAKA,IAAZ,CAAV;;AACAA,MAAAA,IAAI,CAACc,KAAL;AACA,UAAMC,KAAK,GAAGf,IAAI,CAACQ,GAAL,EAAd;;AAHqB,kDAIGR,IAJH;AAAA;;AAAA;AAIrB,+DAA8B;AAAA,cAAnBgB,SAAmB;AAC5BJ,UAAAA,MAAM,GAAGA,MAAM,CAACI,SAAD,CAAf;AACD;AANoB;AAAA;AAAA;AAAA;AAAA;;AAOrB,aAAOJ,MAAM,CAACG,KAAD,CAAb;AACD;;;;;;SAtFkBhB,Q","sourcesContent":["/**\n * A parser for a minimal subset of the jsonpath standard\n * Full JSON path parsers for JS exist but are quite large (bundle size)\n *\n * Supports\n *\n *   `$.component.component.component`\n */\nexport default class JSONPath {\n  constructor(path = null) {\n    this.path = ['$'];\n\n    if (path instanceof JSONPath) {\n      this.path = [...path.path];\n      return;\n    }\n\n    if (Array.isArray(path)) {\n      this.path.push(...path);\n      return;\n    }\n\n    // Parse a string as a JSONPath\n    if (typeof path === 'string') {\n      this.path = path.split('.');\n      if (this.path[0] !== '$') {\n        throw new Error('JSONPaths must start with $');\n      }\n    }\n  }\n\n  clone() {\n    return new JSONPath(this);\n  }\n\n  toString() {\n    return this.path.join('.');\n  }\n\n  push(name) {\n    this.path.push(name);\n  }\n\n  pop() {\n    return this.path.pop();\n  }\n\n  set(name) {\n    this.path[this.path.length - 1] = name;\n  }\n\n  equals(other) {\n    if (!this || !other || this.path.length !== other.path.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this.path.length; ++i) {\n      if (this.path[i] !== other.path[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  /**\n   * Sets the value pointed at by path\n   * TODO - handle root path\n   * @param {*} object\n   * @param {*} value\n   */\n  setFieldAtPath(object, value) {\n    const path = [...this.path];\n    path.shift();\n    const field = path.pop();\n    for (const component of path) {\n      object = object[component];\n    }\n    object[field] = value;\n  }\n\n  /**\n   * Gets the value pointed at by path\n   * TODO - handle root path\n   * @param {*} object\n   */\n  getFieldAtPath(object) {\n    const path = [...this.path];\n    path.shift();\n    const field = path.pop();\n    for (const component of path) {\n      object = object[component];\n    }\n    return object[field];\n  }\n}\n"],"file":"jsonpath.js"}