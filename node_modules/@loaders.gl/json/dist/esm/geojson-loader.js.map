{"version":3,"sources":["../../src/geojson-loader.js"],"names":["RowTableBatch","geojsonToBinary","parseJSONSync","parseJSONInBatches","VERSION","GeoJSONLoaderOptions","geojson","TableBatch","batchSize","workerUrl","json","jsonpaths","gis","format","GeoJSONWorkerLoader","id","name","version","extensions","mimeTypes","category","text","options","GeoJSONLoader","parse","parseTextSync","parseInBatches","arrayBuffer","TextDecoder","decode","asyncIterator","geojsonIterator","makeBinaryGeometryIterator","batch","data"],"mappings":"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","sourcesContent":["/* global TextDecoder */\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n/** @typedef {import('@loaders.gl/loader-utils').WorkerLoaderObject} WorkerLoaderObject */\nimport {RowTableBatch} from '@loaders.gl/tables';\nimport {geojsonToBinary} from '@loaders.gl/gis';\nimport parseJSONSync from './lib/parse-json';\nimport parseJSONInBatches from './lib/parse-json-in-batches';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst GeoJSONLoaderOptions = {\n  geojson: {\n    TableBatch: RowTableBatch,\n    batchSize: 'auto',\n    workerUrl: `https://unpkg.com/@loaders.gl/json@${VERSION}/dist/geojson-loader.worker.js`\n  },\n  json: {\n    jsonpaths: ['$', '$.features']\n  },\n  gis: {\n    format: 'geojson'\n  }\n};\n\n/** @type {WorkerLoaderObject} */\nexport const GeoJSONWorkerLoader = {\n  id: 'geojson',\n  name: 'GeoJSON',\n  version: VERSION,\n  extensions: ['geojson'],\n  mimeTypes: ['application/geo+json'],\n  // TODO - support various line based JSON formats\n  /*\n  extensions: {\n    json: null,\n    jsonl: {stream: true},\n    ndjson: {stream: true}\n  },\n  mimeTypes: {\n    'application/json': null,\n    'application/json-seq': {stream: true},\n    'application/x-ndjson': {stream: true}\n  },\n  */\n  category: 'geometry',\n  text: true,\n  options: GeoJSONLoaderOptions\n};\n\n/** @type {LoaderObject} */\nexport const GeoJSONLoader = {\n  ...GeoJSONWorkerLoader,\n  parse,\n  parseTextSync,\n  parseInBatches\n};\n\nasync function parse(arrayBuffer, options) {\n  return parseTextSync(new TextDecoder().decode(arrayBuffer), options);\n}\n\nfunction parseTextSync(text, options) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...GeoJSONLoaderOptions, ...options};\n  options.json = {...GeoJSONLoaderOptions.geojson, ...options.geojson};\n  options.gis = options.gis || {};\n  const json = parseJSONSync(text, options);\n  switch (options.gis.format) {\n    case 'binary':\n      return geojsonToBinary(json);\n    default:\n      return json;\n  }\n}\n\nasync function parseInBatches(asyncIterator, options) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...GeoJSONLoaderOptions, ...options};\n  options.json = {...GeoJSONLoaderOptions.geojson, ...options.geojson};\n\n  const geojsonIterator = parseJSONInBatches(asyncIterator, options);\n\n  switch (options.gis.format) {\n    case 'binary':\n      return makeBinaryGeometryIterator(geojsonIterator);\n    default:\n      return geojsonIterator;\n  }\n}\n\nasync function* makeBinaryGeometryIterator(geojsonIterator) {\n  for await (const batch of geojsonIterator) {\n    batch.data = geojsonToBinary(batch.data);\n    yield batch;\n  }\n}\n"],"file":"geojson-loader.js"}