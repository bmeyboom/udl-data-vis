{"version":3,"sources":["../../src/json-loader.js"],"names":["VERSION","JSONLoaderOptions","json","TableBatch","RowTableBatch","batchSize","_rootObjectBatches","table","jsonpaths","JSONLoader","id","name","version","extensions","mimeTypes","category","text","parse","parseTextSync","parseInBatches","options","deprecatedOptions","arrayBuffer","TextDecoder","decode","asyncIterator"],"mappings":";;;;;;;;;;;;;;;AACA;;AACA;;AACA;;;;;;AAKA,IAAMA,OAAO,GAAG,oBAAuB,WAAvB,cAAmD,QAAnE;AAEA,IAAMC,iBAAiB,GAAG;AACxBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEC,qBADR;AAEJC,IAAAA,SAAS,EAAE,MAFP;AAGJC,IAAAA,kBAAkB,EAAE,KAHhB;AAIJC,IAAAA,KAAK,EAAE,KAJH;AAKJC,IAAAA,SAAS,EAAE;AALP;AADkB,CAA1B;AAWO,IAAMC,UAAU,GAAG;AACxBC,EAAAA,EAAE,EAAE,MADoB;AAExBC,EAAAA,IAAI,EAAE,MAFkB;AAGxBC,EAAAA,OAAO,EAAEZ,OAHe;AAIxBa,EAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,SAAT,CAJY;AAKxBC,EAAAA,SAAS,EAAE,CAAC,kBAAD,CALa;AAmBxBC,EAAAA,QAAQ,EAAE,OAnBc;AAoBxBC,EAAAA,IAAI,EAAE,IApBkB;AAqBxBC,EAAAA,KAAK,EAALA,KArBwB;AAsBxBC,EAAAA,aAAa,EAAbA,aAtBwB;AAuBxBC,EAAAA,cAAc,EAAdA,cAvBwB;AAwBxBC,EAAAA,OAAO,EAAEnB,iBAxBe;AAyBxBoB,EAAAA,iBAAiB,EAAE;AACjBnB,IAAAA,IAAI,EAAE;AACJI,MAAAA,kBAAkB,EAAE;AADhB;AADW;AAzBK,CAAnB;;;SAgCQW,K;;;;;2EAAf,iBAAqBK,WAArB,EAAkCF,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,6CACSF,aAAa,CAAC,IAAIK,WAAJ,GAAkBC,MAAlB,CAAyBF,WAAzB,CAAD,EAAwCF,OAAxC,CADtB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAIA,SAASF,aAAT,CAAuBF,IAAvB,EAA6BI,OAA7B,EAAsC;AAEpCA,EAAAA,OAAO,mCAAOnB,iBAAP,GAA6BmB,OAA7B,CAAP;AACAA,EAAAA,OAAO,CAAClB,IAAR,mCAAmBD,iBAAiB,CAACC,IAArC,GAA8CkB,OAAO,CAAClB,IAAtD;AACA,SAAO,2BAAcc,IAAd,EAAoBI,OAApB,CAAP;AACD;;SAEcD,c;;;;;oFAAf,kBAA8BM,aAA9B,EAA6CL,OAA7C;AAAA;AAAA;AAAA;AAAA;AAEEA,YAAAA,OAAO,mCAAOnB,iBAAP,GAA6BmB,OAA7B,CAAP;AACAA,YAAAA,OAAO,CAAClB,IAAR,mCAAmBD,iBAAiB,CAACC,IAArC,GAA8CkB,OAAO,CAAClB,IAAtD;AAHF,8CAIS,oCAAmBuB,aAAnB,EAAkCL,OAAlC,CAJT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* global TextDecoder */\nimport {RowTableBatch} from '@loaders.gl/tables';\nimport parseJSONSync from './lib/parse-json';\nimport parseJSONInBatches from './lib/parse-json-in-batches';\n/** @typedef {import('@loaders.gl/loader-utils').LoaderObject} LoaderObject */\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nconst JSONLoaderOptions = {\n  json: {\n    TableBatch: RowTableBatch,\n    batchSize: 'auto',\n    _rootObjectBatches: false,\n    table: false,\n    jsonpaths: []\n  }\n};\n\n/** @type {LoaderObject} */\nexport const JSONLoader = {\n  id: 'json',\n  name: 'JSON',\n  version: VERSION,\n  extensions: ['json', 'geojson'],\n  mimeTypes: ['application/json'],\n  // TODO - support various line based JSON formats\n  /*\n  extensions: {\n    json: null,\n    jsonl: {stream: true},\n    ndjson: {stream: true}\n  },\n  mimeTypes: {\n    'application/json': null,\n    'application/json-seq': {stream: true},\n    'application/x-ndjson': {stream: true}\n  },\n  */\n  category: 'table',\n  text: true,\n  parse,\n  parseTextSync,\n  parseInBatches,\n  options: JSONLoaderOptions,\n  deprecatedOptions: {\n    json: {\n      _rootObjectBatches: 'metadata'\n    }\n  }\n};\n\nasync function parse(arrayBuffer, options) {\n  return parseTextSync(new TextDecoder().decode(arrayBuffer), options);\n}\n\nfunction parseTextSync(text, options) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...JSONLoaderOptions, ...options};\n  options.json = {...JSONLoaderOptions.json, ...options.json};\n  return parseJSONSync(text, options);\n}\n\nasync function parseInBatches(asyncIterator, options) {\n  // Apps can call the parse method directly, we so apply default options here\n  options = {...JSONLoaderOptions, ...options};\n  options.json = {...JSONLoaderOptions.json, ...options.json};\n  return parseJSONInBatches(asyncIterator, options);\n}\n"],"file":"json-loader.js"}