{"version":3,"sources":["../../../../src/lib/parser/json-parser.js"],"names":["JSONParser","reset","_initializeParser","result","undefined","previousStates","currentState","Object","freeze","container","key","jsonpath","JSONPath","chunk","parser","write","close","value","push","newContainer","_pushOrSet","isArray","pop","ClarinetParser","onready","length","onopenobject","name","_openObject","onkey","set","oncloseobject","_closeObject","onopenarray","_openArray","onclosearray","_closeArray","onvalue","onerror","error","onend"],"mappings":"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","sourcesContent":["// @ts-nocheck\n\nimport ClarinetParser from '../clarinet/clarinet';\nimport JSONPath from '../jsonpath/jsonpath';\n\n// JSONParser builds a JSON object using the events emitted by the Clarinet parser\n\nexport default class JSONParser {\n  constructor() {\n    this.reset();\n    this._initializeParser();\n  }\n\n  reset() {\n    this.result = undefined;\n    this.previousStates = [];\n    this.currentState = Object.freeze({container: [], key: null});\n    this.jsonpath = new JSONPath();\n  }\n\n  write(chunk) {\n    this.parser.write(chunk);\n  }\n\n  close() {\n    this.parser.close();\n  }\n\n  // PRIVATE METHODS\n\n  _pushOrSet(value) {\n    const {container, key} = this.currentState;\n    if (key !== null) {\n      container[key] = value;\n      this.currentState.key = null;\n    } else {\n      container.push(value);\n    }\n  }\n\n  _openArray(newContainer = []) {\n    this.jsonpath.push(null);\n    this._pushOrSet(newContainer);\n    this.previousStates.push(this.currentState);\n    this.currentState = {container: newContainer, isArray: true, key: null};\n  }\n\n  _closeArray() {\n    this.jsonpath.pop();\n    this.currentState = this.previousStates.pop();\n  }\n\n  _openObject(newContainer = {}) {\n    this.jsonpath.push(null);\n    this._pushOrSet(newContainer);\n    this.previousStates.push(this.currentState);\n    this.currentState = {container: newContainer, isArray: false, key: null};\n  }\n\n  _closeObject() {\n    this.jsonpath.pop();\n    this.currentState = this.previousStates.pop();\n  }\n\n  _initializeParser() {\n    this.parser = new ClarinetParser({\n      onready: () => {\n        this.jsonpath = new JSONPath();\n        this.previousStates.length = 0;\n        this.currentState.container.length = 0;\n      },\n\n      onopenobject: name => {\n        this._openObject({});\n        if (typeof name !== 'undefined') {\n          this.parser.onkey(name);\n        }\n      },\n\n      onkey: name => {\n        this.jsonpath.set(name);\n        this.currentState.key = name;\n      },\n\n      oncloseobject: () => {\n        this._closeObject();\n      },\n\n      onopenarray: () => {\n        this._openArray();\n      },\n\n      onclosearray: () => {\n        this._closeArray();\n      },\n\n      onvalue: value => {\n        this._pushOrSet(value);\n      },\n\n      onerror: error => {\n        throw error;\n      },\n\n      onend: () => {\n        this.result = this.currentState.container.pop();\n      }\n    });\n  }\n}\n"],"file":"json-parser.js"}