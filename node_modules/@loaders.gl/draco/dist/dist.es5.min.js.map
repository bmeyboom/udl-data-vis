{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../worker-utils/src/lib/env-utils/assert.ts","webpack:///../worker-utils/src/lib/env-utils/version.ts","webpack:///../schema/src/lib/schema/index.ts","webpack:///../worker-utils/src/lib/env-utils/globals.ts","webpack:///../worker-utils/src/lib/worker-farm/worker-thread.ts","webpack:///../worker-utils/src/lib/worker-utils/get-transfer-list.ts","webpack:///(webpack)/buildin/global.js","webpack:///./src/lib/utils/version.ts","webpack:///../schema/src/index.ts","webpack:///../schema/src/lib/table/row-table-batch-aggregator.ts","webpack:///../schema/src/lib/utils/row-utils.ts","webpack:///../schema/src/lib/table/columnar-table-batch-aggregator.ts","webpack:///./src/lib/draco-module-loader.ts","webpack:////home/user/apps/loaders.gl_duplicate/node_modules/process/browser.js","webpack:///../worker-utils/src/lib/worker-farm/worker-job.ts","webpack:///../worker-utils/src/lib/worker-farm/worker-farm.ts","webpack:///../worker-utils/src/lib/worker-farm/worker-pool.ts","webpack:///../worker-utils/src/lib/worker-farm/worker-body.ts","webpack:///../worker-utils/src/lib/worker-api/get-worker-url.ts","webpack:///../worker-utils/src/lib/async-queue/async-queue.ts","webpack:///./src/bundle.ts","webpack:///./src/index.ts","webpack:///./src/draco-loader.ts","webpack:///./src/lib/draco-parser.ts","webpack:///../schema/src/lib/table/table-batch-builder.ts","webpack:///../schema/src/lib/table/base-table-batch-aggregator.ts","webpack:///../schema/src/category/mesh/mesh-utils.ts","webpack:///../schema/src/lib/schema/impl/schema.ts","webpack:///../schema/src/lib/utils/assert.ts","webpack:///../schema/src/lib/schema/impl/field.ts","webpack:///../schema/src/lib/schema/impl/type.ts","webpack:///../schema/src/lib/schema/impl/enum.ts","webpack:///../schema/src/lib/schema-utils/deduce-table-schema.ts","webpack:///../schema/src/lib/schema-utils/get-type-info.ts","webpack:///../schema/src/lib/schema-utils/type-utils.ts","webpack:///../schema/src/lib/utils/async-queue.ts","webpack:///./src/lib/utils/schema-attribute-utils.ts","webpack:///../worker-utils/src/index.ts","webpack:///../worker-utils/src/lib/worker-utils/get-loadable-worker-url.ts","webpack:///../worker-utils/src/lib/worker-api/process-on-worker.ts","webpack:///../worker-utils/src/lib/worker-utils/remove-nontransferable-options.ts","webpack:///../worker-utils/src/lib/worker-api/create-worker.ts","webpack:///../worker-utils/src/lib/worker-api/validate-worker-version.ts","webpack:///../worker-utils/src/lib/library-utils/library-utils.ts","webpack:///../worker-utils/src/lib/process-utils/child-process-proxy.ts","webpack:///../worker-utils/src/lib/process-utils/process-utils.ts","webpack:///./src/draco-writer.ts","webpack:///./src/lib/draco-builder.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","condition","message","Error","globals","self","window","global","document","self_","window_","global_","document_","isBrowser","process","String","browser","isWorker","importScripts","isMobile","orientation","matches","version","exec","nodeVersion","parseFloat","NOOP","WorkerThread","props","source","url","assert","this","onMessage","onError","error","console","log","worker","_createBrowserWorker","Worker","terminate","terminated","Boolean","data","transferList","getTransferList","postMessage","event","lineno","colno","_loadableURL","getLoadableWorkerURL","onmessage","onerror","_getErrorFromErrorEvent","onmessageerror","isTransferable","ArrayBuffer","MessagePort","ImageBitmap","OffscreenCanvas","recursive","transfers","transfersSet","Set","add","buffer","isView","undefined","Array","from","g","Function","e","RowTableBatchAggregator","schema","options","isArray","_headers","index","length","row","cursor","Number","isFinite","shape","rowObject","convertToObjectRow","addObjectRow","arrayRows","rowArray","convertToArrayRow","addArrayRow","objectRows","rows","slice","batchType","arrayRow","headers","objectRow","ColumnarTableBatchAggregator","_reallocateColumns","fieldName","columns","_pruneColumns","field","allocated","ArrayType","type","Float32Array","oldColumn","typedArray","set","entries","columnName","column","loadDecoderPromise","loadEncoderPromise","DRACO_JS_DECODER_URL","DRACO_WASM_WRAPPER_URL","DRACO_WASM_DECODER_URL","DRACO_ENCODER_URL","draco3d","createDecoderModule","then","draco","loadDracoDecoder","createEncoderModule","loadDracoEncoder","decoderType","loadLibrary","DracoDecoderModule","Promise","all","wasmBinary","globalThis","initializeDracoDecoder","resolve","onModuleLoaded","DracoEncoderModule","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","concat","drainQueue","timeout","len","run","marker","runClearTimeout","Item","array","noop","nextTick","args","arguments","push","apply","title","env","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","WorkerJob","jobName","workerThread","isRunning","_resolve","_reject","result","reject","payload","DEFAULT_PROPS","maxConcurrency","maxMobileConcurrency","onDebug","reuseWorkers","WorkerFarm","Map","setProps","workerPools","isSupported","_workerFarm","values","destroy","_getWorkerPoolProps","workerPool","WorkerPool","idleQueue","forEach","isDestroyed","job","done","startPromise","onStart","jobQueue","_startQueuedJob","_getAvailableWorker","queuedJob","shift","backlog","returnWorkerToQueue","count","_getMaxConcurrency","toLowerCase","onMessageWrapperMap","WorkerBody","isKnownMessage","onMessageWrapper","addEventListener","removeEventListener","startsWith","warning","workerOptions","id","workerFile","workerUrl","_workerType","versionTag","asyncIterator","AsyncQueue","_values","_settlers","_closed","enqueue","settler","moduleExports","require","_global","loaders","assign","DracoLoader","DracoWorkerLoader","parse","arrayBuffer","loadDracoDecoderModule","dracoParser","DracoParser","parseSync","_TypecheckDracoLoader","DEFAULT_DRACO_OPTIONS","WebAssembly","libraryPath","extraAttributes","attributeNameEntry","VERSION","extensions","mimeTypes","binary","tests","DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP","POSITION","NORMAL","COLOR","TEX_COORD","DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP","1","Int8Array","2","Uint8Array","3","Int16Array","4","Uint16Array","5","Int32Array","6","Uint32Array","9","decoder","Decoder","metadataQuerier","MetadataQuerier","DecoderBuffer","Init","byteLength","_disableAttributeTransforms","geometry_type","GetEncodedGeometryType","dracoGeometry","TRIANGULAR_MESH","Mesh","PointCloud","dracoStatus","DecodeBufferToMesh","POINT_CLOUD","DecodeBufferToPointCloud","ok","ptr","error_msg","loaderData","_getDracoLoaderData","geometry","_getMeshData","boundingBox","getMeshBoundingBox","attributes","makeSchemaFromAttributes","indices","loader","header","vertexCount","num_points","metadata","_getTopLevelMetadata","_getDracoAttributes","num_attributes","num_faces","dracoAttributes","attributeId","dracoAttribute","GetAttribute","_getAttributeMetadata","unique_id","attribute_type","data_type","num_components","byte_offset","byte_stride","normalized","attribute_index","quantization","_getQuantizationTransform","quantization_transform","octahedron","_getOctahedronTransform","octahedron_transform","_getMeshAttributes","topology","_getTriangleStripIndices","size","_getTriangleListIndices","loaderAttribute","attributeName","_deduceAttributeName","_getAttributeValues","byteOffset","byteStride","numIndices","_malloc","GetTrianglesUInt32Array","HEAPF32","_free","dracoArray","DracoInt32Array","GetTriangleStripsFromMesh","numValues","intArray","GetValue","getUint32Array","attribute","TypedArrayCtor","numComponents","BYTES_PER_ELEMENT","dataType","attributeType","DT_FLOAT32","DT_INT8","DT_INT16","DT_INT32","DT_UINT8","DT_UINT16","DT_UINT32","DT_INVALID","getDracoDataType","GetAttributeDataArrayForAllPoints","uniqueId","thisAttributeType","dracoAttributeConstant","entryName","string","dracoMetadata","GetMetadata","_getDracoMetadata","GetAttributeMetadata","numEntries","NumEntries","entryIndex","GetEntryName","_getDracoMetadataField","GetIntEntryArray","getInt32Array","int","GetIntEntry","GetStringEntry","double","GetDoubleEntry","quantizedAttributes","octahedronAttributes","dracoAttributeName","SkipAttributeTransform","map","includes","transform","AttributeQuantizationTransform","InitFromAttribute","quantization_bits","range","min_values","min_value","DEFAULT_OPTIONS","batchSize","batchDebounceMs","limit","_limitMB","TableBatchBuilder","Date","now","totalLength","totalBytes","limitReached","rowBytes","_estimateRowMB","aggregator","TableBatchType","_getTableBatchType","chunk","bytesUsed","isChunkComplete","_isFull","_getBatch","keys","rowCount","lastBatchEmittedMs","normalizedBatch","getBatch","batchCount","BaseTableBatchAggregator","ArrowBatch","minX","Infinity","minY","minZ","maxX","maxY","maxZ","positions","x","y","z","Schema","fields","usedNames","warn","checkNames","other","compareTo","nameMap","columnNames","selectedFields","filter","columnIndices","schemaOrFields","otherSchema","mergeMaps","fieldMap","m1","m2","Field","nullable","typeId","DataType","Type","NONE","Null","Int","Float","Binary","Utf8","Bool","Decimal","Time","Timestamp","Interval","List","Struct","Union","FixedSizeBinary","FixedSizeList","Dictionary","isSigned","bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Precision","precision","Float16","Float32","Float64","DateUnit","DAY","MILLISECOND","unit","DateDay","DateMillisecond","TimeUnit","SECOND","MICROSECOND","NANOSECOND","TimeSecond","TimeMillisecond","timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","IntervalUnit","DAY_TIME","YEAR_MONTH","IntervalDayTime","IntervalYearMonth","listSize","child","children","valueType","deduceTypeFromValue","table","deducedSchema","rowTable","deduceSchemaForRowTable","columnarTable","constructor","deduceSchemaForColumnarTable","arrowTypeLike","typeName","toString","typeEnumName","getTypeKey","ReverseType","typeKey","Float64Array","ArrayQueue","dequeue","asyncIterable","iterator","next","metadataMap","makeMetadata","namedLoaderDataAttributes","transformAttributesLoaderData","getArrowFieldFromAttribute","indicesField","getArrowTypeFromTypedArray","JSON","stringify","NullWorker","null","workerURL","workerURLCache","getLoadableWorkerURLFromSource","getLoadableWorkerURLFromURL","workerSource","blob","Blob","URL","createObjectURL","context","getWorkerName","getWorkerURL","workerFarm","getWorkerFarm","getWorkerPool","startJob","transferableOptions","removeNontransferableOptions","input","v","cache","has","err","processInBatches","processOnMainThread","inputBatches","resultIterator","batch","close","requestId","coreVersion","workerVersion","loadLibraryPromises","libraryUrl","moduleName","getLibraryUrl","loadLibraryFromFile","library","CDN","endsWith","fetch","response","node","requireFromFile","text","scriptSource","loadLibraryFromString","requireFromString","eval","script","createElement","appendChild","createTextNode","body","command","port","autoPort","wait","onSuccess","processProxy","ChildProcessProxy","portArg","getAvailablePort","_setTimeout","join","childProcess","spawn","stdout","stderr","_clearTimeout","code","kill","statusCode","stop","exit","callback","successTimer","defaultPort","ChildProcess","portsInUse","regex","split","line","match","DracoWriter","encode","pointcloud","loadDracoEncoderModule","dracoBuilder","DRACOBuilder","encodeSync","GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP","COLOR_0","TEXCOORD_0","DracoBuilder","dracoEncoder","Encoder","dracoMeshBuilder","MeshBuilder","dracoMetadataBuilder","MetadataBuilder","destroyEncodedObject","mesh","_setOptions","_encodePointCloud","_encodeMesh","dracoPointCloud","_addGeometryMetadata","_getAttributesFromMesh","_createDracoPointCloud","dracoData","DracoInt8Array","encodedLen","EncodePointCloudToDracoBuffer","dracoInt8ArrayToArrayBuffer","dracoMesh","_createDracoMesh","EncodeMeshToDracoBuffer","SetSpeedOptions","speed","dracoMethod","method","SetEncodingMethod","bits","dracoPosition","SetAttributeQuantization","optionalMetadata","attributesMetadata","_getPositionAttribute","_addAttributeToMesh","_addAttributeMetadata","_getDracoAttributeType","numFaces","AddFacesToMesh","builder","AddInt8Attribute","AddInt16Attribute","AddInt32Attribute","Uint8ClampedArray","AddUInt8Attribute","AddUInt16Attribute","AddUInt32Attribute","AddFloatAttribute","GENERIC","Metadata","_populateDracoMetadata","AddMetadata","uniqueAttributeId","dracoAttributeMetadata","SetMetadataForAttribute","container","Math","trunc","AddIntEntry","AddDoubleEntry","AddIntEntryArray","AddStringEntry","outputBuffer","outputData"],"mappings":"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","file":"dist.es5.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\n\n/** Throws an `Error` with the optional `message` if `condition` is falsy */\nexport function assert(condition: any, message?: string): void {\n  if (!condition) {\n    throw new Error(message || 'loaders.gl assertion failed.');\n  }\n}\n","// Version constant cannot be imported, it needs to correspond to the build version of **this** module.\n// __VERSION__ is injected by babel-plugin-version-inline\n\n// Change to `latest` on production branches\nconst DEFAULT_VERSION = 'beta';\ndeclare let __VERSION__;\nexport const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : DEFAULT_VERSION;\nif (typeof __VERSION__ === 'undefined') {\n  // eslint-disable-next-line\n  console.error(\n    'loaders.gl: The __VERSION__ variable is not injected using babel plugin. Latest unstable workers would be fetched from the CDN.'\n  );\n}\n","/*\nexport {\n  Schema,\n  Field,\n  DataType,\n  Null,\n  Bool,\n  Int,\n  Int8,\n  Int16,\n  Int32,\n  Int64,\n  Uint8,\n  Uint16,\n  Uint32,\n  Uint64,\n  Float,\n  Float16,\n  Float32,\n  Float64,\n  Binary,\n  Utf8,\n  Date,\n  DateDay,\n  DateMillisecond,\n  Time,\n  TimeSecond,\n  TimeMillisecond,\n  TimeMicrosecond,\n  TimeNanosecond,\n  Timestamp,\n  TimestampSecond,\n  TimestampMillisecond,\n  TimestampMicrosecond,\n  TimestampNanosecond,\n  Interval,\n  IntervalDayTime,\n  IntervalYearMonth,\n  FixedSizeList\n} from 'apache-arrow';\n*/\nexport {default as Schema} from './impl/schema';\nexport {default as Field} from './impl/field';\nexport {Type} from './impl/type';\nexport {\n  DataType,\n  Null,\n  Bool,\n  Int,\n  Int8,\n  Int16,\n  Int32,\n  Int64,\n  Uint8,\n  Uint16,\n  Uint32,\n  Uint64,\n  Float,\n  Float16,\n  Float32,\n  Float64,\n  Binary,\n  Utf8,\n  Date,\n  DateDay,\n  DateMillisecond,\n  Time,\n  TimeSecond,\n  TimeMillisecond,\n  // TimeMicrosecond,\n  // TimeNanosecond,\n  Timestamp,\n  TimestampSecond,\n  TimestampMillisecond,\n  TimestampMicrosecond,\n  TimestampNanosecond,\n  Interval,\n  IntervalDayTime,\n  IntervalYearMonth,\n  FixedSizeList\n} from './impl/type';\n","// Purpose: include this in your module to avoids adding dependencies on\n// micro modules like 'global' and 'is-browser';\n\n/* eslint-disable no-restricted-globals */\nconst globals = {\n  self: typeof self !== 'undefined' && self,\n  window: typeof window !== 'undefined' && window,\n  global: typeof global !== 'undefined' && global,\n  document: typeof document !== 'undefined' && document\n};\n\nconst self_: {[key: string]: any} = globals.self || globals.window || globals.global || {};\nconst window_: {[key: string]: any} = globals.window || globals.self || globals.global || {};\nconst global_: {[key: string]: any} = globals.global || globals.self || globals.window || {};\nconst document_: {[key: string]: any} = globals.document || {};\n\nexport {self_ as self, window_ as window, global_ as global, document_ as document};\n\n/** true if running in the browser, false if running in Node.js */\nexport const isBrowser: boolean =\n  // @ts-ignore process.browser\n  typeof process !== 'object' || String(process) !== '[object process]' || process.browser;\n\n/** true if running on a worker thread */\nexport const isWorker: boolean = typeof importScripts === 'function';\n\n/** true if running on a mobile device */\nexport const isMobile: boolean =\n  typeof window !== 'undefined' && typeof window.orientation !== 'undefined';\n\n// Extract node major version\nconst matches =\n  typeof process !== 'undefined' && process.version && /v([0-9]*)/.exec(process.version);\n\n/** Version of Node.js if running under Node, otherwise 0 */\nexport const nodeVersion: number = (matches && parseFloat(matches[1])) || 0;\n","import {assert} from '../env-utils/assert';\nimport {getLoadableWorkerURL} from '../worker-utils/get-loadable-worker-url';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst NOOP = () => {};\n\nexport type WorkerThreadProps = {\n  name: string;\n  source?: string;\n  url?: string;\n};\n\n/**\n * Represents one worker thread\n */\nexport default class WorkerThread {\n  readonly name: string;\n  readonly source: string | undefined;\n  readonly url: string | undefined;\n  terminated: boolean = false;\n  worker: Worker;\n  onMessage: (message: any) => void;\n  onError: (error: Error) => void;\n\n  private _loadableURL: string = '';\n\n  static isSupported(): boolean {\n    return typeof Worker !== 'undefined';\n  }\n\n  constructor(props: WorkerThreadProps) {\n    const {name, source, url} = props;\n    assert(source || url); // Either source or url must be defined\n    this.name = name;\n    this.source = source;\n    this.url = url;\n    this.onMessage = NOOP;\n    this.onError = (error) => console.log(error); // eslint-disable-line\n\n    this.worker = this._createBrowserWorker();\n  }\n\n  /**\n   * Terminate this worker thread\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    this.onMessage = NOOP;\n    this.onError = NOOP;\n    // @ts-ignore\n    this.worker.terminate();\n    this.terminated = true;\n  }\n\n  get isRunning() {\n    return Boolean(this.onMessage);\n  }\n\n  /**\n   * Send a message to this worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   * @param transferList If not supplied, calculated automatically by traversing data\n   */\n  postMessage(data: any, transferList?: any[]): void {\n    transferList = transferList || getTransferList(data);\n    // @ts-ignore\n    this.worker.postMessage(data, transferList);\n  }\n\n  // PRIVATE\n\n  /**\n   * Generate a standard Error from an ErrorEvent\n   * @param {ErrorEvent} event\n   */\n  _getErrorFromErrorEvent(event) {\n    // Note Error object does not have the expected fields if loading failed completely\n    // https://developer.mozilla.org/en-US/docs/Web/API/Worker#Event_handlers\n    // https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent\n    let message = 'Failed to load ';\n    message += `worker ${this.name}. `;\n    if (event.message) {\n      message += `${event.message} in `;\n    }\n    // const hasFilename = event.filename && !event.filename.startsWith('blob:');\n    // message += hasFilename ? event.filename : this.source.slice(0, 100);\n    if (event.lineno) {\n      message += `:${event.lineno}:${event.colno}`;\n    }\n    return new Error(message);\n  }\n\n  /**\n   * Creates a worker thread on the browser\n   */\n  _createBrowserWorker() {\n    this._loadableURL = getLoadableWorkerURL({source: this.source, url: this.url});\n    const worker = new Worker(this._loadableURL, {name: this.name});\n\n    worker.onmessage = (event) => {\n      if (!event.data) {\n        this.onError(new Error('No data received'));\n      } else {\n        this.onMessage(event.data);\n      }\n    };\n    // This callback represents an uncaught exception in the worker thread\n    worker.onerror = (error) => {\n      this.onError(this._getErrorFromErrorEvent(error));\n      this.terminated = true;\n    };\n    // TODO - not clear when this would be called, for now just log in case it happens\n    worker.onmessageerror = (event) => console.error(event); // eslint-disable-line\n\n    return worker;\n  }\n}\n","// NOTE - there is a copy of this function is both in core and loader-utils\n// core does not need all the utils in loader-utils, just this one.\n\n/**\n * Returns an array of Transferrable objects that can be used with postMessage\n * https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage\n * @param object data to be sent via postMessage\n * @param recursive - not for application use\n * @param transfers - not for application use\n * @returns a transfer list that can be passed to postMessage\n */\nexport function getTransferList(\n  object: any,\n  recursive: boolean = true,\n  transfers?: Set<any>\n): Transferable[] {\n  // Make sure that items in the transfer list is unique\n  const transfersSet = transfers || new Set();\n\n  if (!object) {\n    // ignore\n  } else if (isTransferable(object)) {\n    transfersSet.add(object);\n  } else if (isTransferable(object.buffer)) {\n    // Typed array\n    transfersSet.add(object.buffer);\n  } else if (ArrayBuffer.isView(object)) {\n    // object is a TypeArray viewing into a SharedArrayBuffer (not transferable)\n    // Do not iterate through the content in this case\n  } else if (recursive && typeof object === 'object') {\n    for (const key in object) {\n      // Avoid perf hit - only go one level deep\n      getTransferList(object[key], recursive, transfersSet);\n    }\n  }\n\n  // If transfers is defined, is internal recursive call\n  // Otherwise it's called by the user\n  return transfers === undefined ? Array.from(transfersSet) : [];\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/API/Transferable\nfunction isTransferable(object) {\n  if (!object) {\n    return false;\n  }\n  if (object instanceof ArrayBuffer) {\n    return true;\n  }\n  if (typeof MessagePort !== 'undefined' && object instanceof MessagePort) {\n    return true;\n  }\n  if (typeof ImageBitmap !== 'undefined' && object instanceof ImageBitmap) {\n    return true;\n  }\n  if (typeof OffscreenCanvas !== 'undefined' && object instanceof OffscreenCanvas) {\n    return true;\n  }\n  return false;\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","// Version constant cannot be imported, it needs to correspond to the build version of **this** module.\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nexport const VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n","// COMMON CATEGORY\nexport type {TypedArray, NumberArray, AnyArray} from './types';\n\nexport type {Batch} from './category/common';\n\n// TABLE CATEGORY TYPES\n\nexport type {\n  Table,\n  ArrayRowTable,\n  ObjectRowTable,\n  ColumnarTable,\n  ArrowTable\n} from './category/table';\nexport type {\n  TableBatch,\n  RowArrayTableBatch,\n  RowObjectTableBatch,\n  ColumnarTableBatch,\n  ArrowTableBatch\n} from './category/table';\n\n// TABLE CATEGORY UTILS\nexport {default as TableBatchBuilder} from './lib/table/table-batch-builder';\nexport type {TableBatchAggregator} from './lib/table/table-batch-aggregator';\nexport {default as RowTableBatchAggregator} from './lib/table/row-table-batch-aggregator';\nexport {default as ColumnarTableBatchAggregator} from './lib/table/columnar-table-batch-aggregator';\n\nexport {convertToObjectRow, convertToArrayRow} from './lib/utils/row-utils';\n\n// MESH CATEGORY\nexport type {MeshTable, MeshArrowTable, Mesh, MeshAttribute} from './category/mesh';\n\n// MESH CATEGORY UTILS\nexport type {Attributes as _Attributes} from './category/mesh/mesh-utils';\nexport {getMeshSize, getMeshBoundingBox} from './category/mesh/mesh-utils';\n\n// TYPES\n// GIS CATEGORY - GEOJSON\nexport type {GeoJSON, Feature, Geometry, Position, GeoJsonProperties} from './category/gis';\nexport type {\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon\n} from './category/gis';\n\n// GIS CATEGORY - BINARY\nexport type {\n  BinaryGeometryType,\n  BinaryGeometry,\n  BinaryPointGeometry,\n  BinaryLineGeometry,\n  BinaryPolygonGeometry,\n  BinaryAttribute\n} from './category/gis';\nexport type {\n  BinaryFeatures,\n  BinaryPointFeatures,\n  BinaryLineFeatures,\n  BinaryPolygonFeatures\n} from './category/gis';\n\n// SCHEMA\nexport {\n  Schema,\n  Field,\n  DataType,\n  Null,\n  Binary,\n  Bool,\n  Int,\n  Int8,\n  Int16,\n  Int32,\n  Int64,\n  Uint8,\n  Uint16,\n  Uint32,\n  Uint64,\n  Float,\n  Float16,\n  Float32,\n  Float64,\n  Utf8,\n  Date,\n  DateDay,\n  DateMillisecond,\n  Time,\n  TimeMillisecond,\n  TimeSecond,\n  Timestamp,\n  TimestampSecond,\n  TimestampMillisecond,\n  TimestampMicrosecond,\n  TimestampNanosecond,\n  Interval,\n  IntervalDayTime,\n  IntervalYearMonth,\n  FixedSizeList\n} from './lib/schema';\n\n// SCHEMA UTILS\nexport {deduceTableSchema} from './lib/schema-utils/deduce-table-schema';\nexport {getTypeInfo} from './lib/schema-utils/get-type-info';\nexport {getArrowTypeFromTypedArray} from './lib/schema-utils/type-utils';\n\n// EXPERIMENTAL APIs\nexport {default as AsyncQueue} from './lib/utils/async-queue';\n","import type {Schema} from '../schema';\nimport type {TableBatch} from '../../category/table';\n// import type {ArrayRowTableBatch, ObjectRowTableBatch} from '../../category/table';\nimport {convertToArrayRow, convertToObjectRow} from '../utils/row-utils';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  objectRows: {[columnName: string]: any} | null = null;\n  arrayRows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'object-row-table':\n        const rowObject = convertToObjectRow(row, this._headers);\n        this.addObjectRow(rowObject, cursor);\n        break;\n      case 'array-row-table':\n        this.arrayRows = this.arrayRows || new Array(DEFAULT_ROW_COUNT);\n        this.arrayRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (this.options.shape) {\n      case 'array-row-table':\n        const rowArray = convertToArrayRow(row, this._headers);\n        this.addArrayRow(rowArray, cursor);\n        break;\n      case 'object-row-table':\n        this.objectRows = this.objectRows || new Array(DEFAULT_ROW_COUNT);\n        this.objectRows[this.length] = row;\n        this.length++;\n        break;\n    }\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.arrayRows || this.objectRows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.arrayRows = null;\n    this.objectRows = null;\n\n    return {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n  }\n}\n","/** Convert an object row to an array row */\nexport function convertToObjectRow(\n  arrayRow: any[],\n  headers: string[]\n): {[columnName: string]: any} {\n  if (!arrayRow) {\n    throw new Error('null row');\n  }\n  if (!headers) {\n    throw new Error('no headers');\n  }\n  const objectRow = {};\n  for (let i = 0; i < headers.length; i++) {\n    objectRow[headers[i]] = arrayRow[i];\n  }\n  return objectRow;\n}\n\n/** Convert an object row to an array row */\nexport function convertToArrayRow(\n  objectRow: {[columnName: string]: any},\n  headers: string[]\n): any[] {\n  if (!objectRow) {\n    throw new Error('null row');\n  }\n  if (!headers) {\n    throw new Error('no headers');\n  }\n  const arrayRow = new Array(headers.length);\n  for (let i = 0; i < headers.length; i++) {\n    arrayRow[i] = objectRow[headers[i]];\n  }\n  return arrayRow;\n}\n","import type {Schema} from '../schema';\nimport type {ColumnarTableBatch, ArrowTableBatch} from '../../category/table';\nimport {TableBatchAggregator} from './table-batch-aggregator';\n\ntype ColumnarTableBatchOptions = {};\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class ColumnarTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  length: number = 0;\n  allocated: number = 0;\n  columns: {[columnName: string]: any[]} = {};\n\n  constructor(schema: Schema, options: ColumnarTableBatchOptions) {\n    this.schema = schema;\n    this._reallocateColumns();\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[]) {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    let i = 0;\n    // TODO what if no csv header, columns not populated?\n    for (const fieldName in this.columns) {\n      this.columns[fieldName][this.length] = row[i++];\n    }\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}): void {\n    // If user keeps pushing rows beyond batch size, reallocate\n    this._reallocateColumns();\n    for (const fieldName in row) {\n      this.columns[fieldName][this.length] = row[fieldName];\n    }\n    this.length++;\n  }\n\n  getBatch(): ColumnarTableBatch | ArrowTableBatch | null {\n    this._pruneColumns();\n    const columns = Array.isArray(this.schema) ? this.columns : {};\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    // columns should match schema format\n    if (!Array.isArray(this.schema)) {\n      for (const fieldName in this.schema) {\n        const field = this.schema[fieldName];\n        columns[field.name] = this.columns[field.index];\n      }\n    }\n\n    this.columns = {};\n\n    const batch: ColumnarTableBatch = {\n      shape: 'columnar-table',\n      batchType: 'data',\n      data: columns,\n      schema: this.schema,\n      length: this.length\n    };\n\n    return batch;\n  }\n\n  // HELPERS\n\n  _reallocateColumns() {\n    if (this.length < this.allocated) {\n      return;\n    }\n\n    // @ts-ignore TODO\n    this.allocated = this.allocated > 0 ? (this.allocated *= 2) : DEFAULT_ROW_COUNT;\n    this.columns = {};\n\n    for (const fieldName in this.schema) {\n      const field = this.schema[fieldName];\n      const ArrayType = field.type || Float32Array;\n      const oldColumn = this.columns[field.index];\n\n      if (oldColumn && ArrayBuffer.isView(oldColumn)) {\n        // Copy the old data to the new array\n        const typedArray = new ArrayType(this.allocated);\n        typedArray.set(oldColumn);\n        this.columns[field.index] = typedArray;\n      } else if (oldColumn) {\n        // Plain array\n        oldColumn.length = this.allocated;\n        this.columns[field.index] = oldColumn;\n      } else {\n        // Create new\n        this.columns[field.index] = new ArrayType(this.allocated);\n      }\n    }\n  }\n\n  _pruneColumns() {\n    for (const [columnName, column] of Object.entries(this.columns)) {\n      this.columns[columnName] = column.slice(0, this.length);\n    }\n  }\n}\n","// Dynamic DRACO module loading inspired by THREE.DRACOLoader\n// https://github.com/mrdoob/three.js/blob/398c4f39ebdb8b23eefd4a7a5ec49ec0c96c7462/examples/jsm/loaders/DRACOLoader.js\n// by Don McCurdy / https://www.donmccurdy.com / MIT license\n\nimport {loadLibrary} from '@loaders.gl/worker-utils';\n\nconst DRACO_VERSION = '1.4.1';\nconst DRACO_JS_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.js`;\nconst DRACO_WASM_WRAPPER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_wasm_wrapper.js`;\nconst DRACO_WASM_DECODER_URL = `https://www.gstatic.com/draco/versioned/decoders/${DRACO_VERSION}/draco_decoder.wasm`;\n\nconst DRACO_ENCODER_URL = `https://raw.githubusercontent.com/google/draco/${DRACO_VERSION}/javascript/draco_encoder.js`;\n\nlet loadDecoderPromise;\nlet loadEncoderPromise;\n\nexport async function loadDracoDecoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadDecoderPromise =\n      loadDecoderPromise ||\n      modules.draco3d.createDecoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadDecoderPromise = loadDecoderPromise || loadDracoDecoder(options);\n  }\n  return await loadDecoderPromise;\n}\n\nexport async function loadDracoEncoderModule(options) {\n  const modules = options.modules || {};\n\n  // Check if a bundled draco3d library has been supplied by application\n  if (modules.draco3d) {\n    loadEncoderPromise =\n      loadEncoderPromise ||\n      modules.draco3d.createEncoderModule({}).then((draco) => {\n        return {draco};\n      });\n  } else {\n    // If not, dynamically load the WASM script from our CDN\n    loadEncoderPromise = loadEncoderPromise || loadDracoEncoder(options);\n  }\n  return await loadEncoderPromise;\n}\n\n// DRACO DECODER LOADING\n\nasync function loadDracoDecoder(options) {\n  let DracoDecoderModule;\n  let wasmBinary;\n  switch (options.draco && options.draco.decoderType) {\n    case 'js':\n      DracoDecoderModule = await loadLibrary(DRACO_JS_DECODER_URL, 'draco', options);\n      break;\n\n    case 'wasm':\n    default:\n      [DracoDecoderModule, wasmBinary] = await Promise.all([\n        await loadLibrary(DRACO_WASM_WRAPPER_URL, 'draco', options),\n        await loadLibrary(DRACO_WASM_DECODER_URL, 'draco', options)\n      ]);\n  }\n  // Depends on how import happened...\n  // @ts-ignore\n  DracoDecoderModule = DracoDecoderModule || globalThis.DracoDecoderModule;\n  return await initializeDracoDecoder(DracoDecoderModule, wasmBinary);\n}\n\nfunction initializeDracoDecoder(DracoDecoderModule, wasmBinary) {\n  const options: {wasmBinary?: any} = {};\n  if (wasmBinary) {\n    options.wasmBinary = wasmBinary;\n  }\n\n  return new Promise((resolve) => {\n    DracoDecoderModule({\n      ...options,\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n\n// ENCODER\n\nasync function loadDracoEncoder(options) {\n  let DracoEncoderModule = await loadLibrary(DRACO_ENCODER_URL, 'draco', options);\n  // @ts-ignore\n  DracoEncoderModule = DracoEncoderModule || globalThis.DracoEncoderModule;\n\n  return new Promise((resolve) => {\n    DracoEncoderModule({\n      onModuleLoaded: (draco) => resolve({draco}) // Module is Promise-like. Wrap in object to avoid loop.\n    });\n  });\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport WorkerThread from './worker-thread';\nimport {assert} from '../env-utils/assert';\n\n/**\n * Represents one Job handled by a WorkerPool or WorkerFarm\n */\nexport default class WorkerJob {\n  readonly name: string;\n  readonly workerThread: WorkerThread;\n  isRunning: boolean;\n  /** Promise that resolves when Job is done */\n  readonly result: Promise<any>;\n\n  private _resolve: (value: any) => void;\n  private _reject: (reason?: any) => void;\n\n  constructor(jobName: string, workerThread: WorkerThread) {\n    this.name = jobName;\n    this.workerThread = workerThread;\n    this.isRunning = true;\n    this._resolve = () => {};\n    this._reject = () => {};\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  /**\n   * Send a message to the job's worker thread\n   * @param data any data structure, ideally consisting mostly of transferrable objects\n   */\n  postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    this.workerThread.postMessage({\n      source: 'loaders.gl', // Lets worker ignore unrelated messages\n      type,\n      payload\n    });\n  }\n\n  /**\n   * Call to resolve the `result` Promise with the supplied value\n   */\n  done(value): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._resolve(value);\n  }\n\n  /**\n   * Call to reject the `result` Promise with the supplied error\n   */\n  error(error): void {\n    assert(this.isRunning);\n    this.isRunning = false;\n    this._reject(error);\n  }\n}\n","import WorkerPool from './worker-pool';\nimport WorkerThread from './worker-thread';\n\n/**\n * @param maxConcurrency {number} - max count of workers\n */\nexport type WorkerFarmProps = {\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  reuseWorkers?: boolean;\n  onDebug?: () => void;\n};\n\nconst DEFAULT_PROPS: WorkerFarmProps = {\n  maxConcurrency: 3,\n  maxMobileConcurrency: 1,\n  onDebug: () => {},\n  reuseWorkers: true\n};\n\n/**\n * Process multiple jobs with a \"farm\" of different workers in worker pools.\n */\nexport default class WorkerFarm {\n  private props: WorkerFarmProps;\n  private workerPools = new Map<string, WorkerPool>();\n  // singleton\n  private static _workerFarm?: WorkerFarm;\n\n  /** Check if Workers are supported */\n  static isSupported(): boolean {\n    return WorkerThread.isSupported();\n  }\n\n  /** Get the singleton instance of the global worker farm */\n  static getWorkerFarm(props: WorkerFarmProps = {}): WorkerFarm {\n    WorkerFarm._workerFarm = WorkerFarm._workerFarm || new WorkerFarm({});\n    WorkerFarm._workerFarm.setProps(props);\n    return WorkerFarm._workerFarm;\n  }\n\n  /** get global instance with WorkerFarm.getWorkerFarm() */\n  private constructor(props: WorkerFarmProps) {\n    this.props = {...DEFAULT_PROPS};\n    this.setProps(props);\n    /** @type Map<string, WorkerPool>} */\n    this.workerPools = new Map();\n  }\n\n  /**\n   * Terminate all workers in the farm\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.destroy();\n    }\n  }\n\n  /**\n   * Set props used when initializing worker pools\n   * @param props\n   */\n  setProps(props: WorkerFarmProps): void {\n    this.props = {...this.props, ...props};\n    // Update worker pool props\n    for (const workerPool of this.workerPools.values()) {\n      workerPool.setProps(this._getWorkerPoolProps());\n    }\n  }\n\n  /**\n   * Returns a worker pool for the specified worker\n   * @param options - only used first time for a specific worker name\n   * @param options.name - the name of the worker - used to identify worker pool\n   * @param options.url -\n   * @param options.source -\n   * @example\n   *   const job = WorkerFarm.getWorkerFarm().getWorkerPool({name, url}).startJob(...);\n   */\n  getWorkerPool(options: {name: string; source?: string; url?: string}): WorkerPool {\n    const {name, source, url} = options;\n    let workerPool = this.workerPools.get(name);\n    if (!workerPool) {\n      workerPool = new WorkerPool({\n        name,\n        source,\n        url\n      });\n      workerPool.setProps(this._getWorkerPoolProps());\n      this.workerPools.set(name, workerPool);\n    }\n    return workerPool;\n  }\n\n  _getWorkerPoolProps() {\n    return {\n      maxConcurrency: this.props.maxConcurrency,\n      maxMobileConcurrency: this.props.maxMobileConcurrency,\n      reuseWorkers: this.props.reuseWorkers,\n      onDebug: this.props.onDebug\n    };\n  }\n}\n","import type {WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {isMobile} from '../env-utils/globals';\nimport WorkerThread from './worker-thread';\nimport WorkerJob from './worker-job';\n\n/** WorkerPool onDebug Callback Parameters */\ntype OnDebugParameters = {\n  message: string;\n  worker: string;\n  name: string;\n  job: string;\n  backlog: number;\n  workerThread: WorkerThread;\n};\n\n/** WorkerPool Properties */\nexport type WorkerPoolProps = {\n  name?: string;\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency?: number;\n  maxMobileConcurrency?: number;\n  onDebug?: (options: OnDebugParameters) => any;\n  reuseWorkers?: boolean;\n};\n\n/** Private helper types */\ntype OnMessage = (job: WorkerJob, type: WorkerMessageType, payload: WorkerMessagePayload) => void;\ntype OnError = (job: WorkerJob, error: Error) => void;\n\ntype QueuedJob = {\n  name: string;\n  onMessage: OnMessage;\n  onError: OnError;\n  onStart: (value: any) => void; // Resolve job start promise\n};\n\n/**\n * Process multiple data messages with small pool of identical workers\n */\nexport default class WorkerPool {\n  name: string = 'unnamed';\n  source?: string; // | Function;\n  url?: string;\n  maxConcurrency: number = 1;\n  maxMobileConcurrency: number = 1;\n  onDebug: (options: OnDebugParameters) => any = () => {};\n  reuseWorkers: boolean = true;\n\n  private props: WorkerPoolProps = {};\n  private jobQueue: QueuedJob[] = [];\n  private idleQueue: WorkerThread[] = [];\n  private count = 0;\n  private isDestroyed = false;\n\n  /**\n   * @param processor - worker function\n   * @param maxConcurrency - max count of workers\n   */\n  constructor(props: WorkerPoolProps) {\n    this.source = props.source;\n    this.url = props.url;\n    this.setProps(props);\n  }\n\n  /**\n   * Terminates all workers in the pool\n   * @note Can free up significant memory\n   */\n  destroy(): void {\n    // Destroy idle workers, active Workers will be destroyed on completion\n    this.idleQueue.forEach((worker) => worker.destroy());\n    this.isDestroyed = true;\n  }\n\n  setProps(props: WorkerPoolProps) {\n    this.props = {...this.props, ...props};\n\n    if (props.name !== undefined) {\n      this.name = props.name;\n    }\n    if (props.maxConcurrency !== undefined) {\n      this.maxConcurrency = props.maxConcurrency;\n    }\n    if (props.maxMobileConcurrency !== undefined) {\n      this.maxMobileConcurrency = props.maxMobileConcurrency;\n    }\n    if (props.reuseWorkers !== undefined) {\n      this.reuseWorkers = props.reuseWorkers;\n    }\n    if (props.onDebug !== undefined) {\n      this.onDebug = props.onDebug;\n    }\n  }\n\n  async startJob(\n    name: string,\n    onMessage: OnMessage = (job, type, data) => job.done(data),\n    onError: OnError = (job, error) => job.error(error)\n  ): Promise<WorkerJob> {\n    // Promise resolves when thread starts working on this job\n    const startPromise = new Promise<WorkerJob>((onStart) => {\n      // Promise resolves when thread completes or fails working on this job\n      this.jobQueue.push({name, onMessage, onError, onStart});\n      return this;\n    });\n    this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    return await startPromise;\n  }\n\n  // PRIVATE\n\n  /**\n   * Starts first queued job if worker is available or can be created\n   * Called when job is started and whenever a worker returns to the idleQueue\n   */\n  async _startQueuedJob(): Promise<void> {\n    if (!this.jobQueue.length) {\n      return;\n    }\n\n    const workerThread = this._getAvailableWorker();\n    if (!workerThread) {\n      return;\n    }\n\n    // We have a worker, dequeue and start the job\n    const queuedJob = this.jobQueue.shift();\n    if (queuedJob) {\n      // Emit a debug event\n      // @ts-ignore\n      this.onDebug({\n        message: 'Starting job',\n        name: queuedJob.name,\n        workerThread,\n        backlog: this.jobQueue.length\n      });\n\n      // Create a worker job to let the app access thread and manage job completion\n      const job = new WorkerJob(queuedJob.name, workerThread);\n\n      // Set the worker thread's message handlers\n      workerThread.onMessage = (data) => queuedJob.onMessage(job, data.type, data.payload);\n      workerThread.onError = (error) => queuedJob.onError(job, error);\n\n      // Resolve the start promise so that the app can start sending messages to worker\n      queuedJob.onStart(job);\n\n      // Wait for the app to signal that the job is complete, then return worker to queue\n      try {\n        await job.result;\n      } finally {\n        this.returnWorkerToQueue(workerThread);\n      }\n    }\n  }\n\n  /**\n   * Returns a worker to the idle queue\n   * Destroys the worker if\n   *  - pool is destroyed\n   *  - if this pool doesn't reuse workers\n   *  - if maxConcurrency has been lowered\n   * @param worker\n   */\n  returnWorkerToQueue(worker: WorkerThread) {\n    const shouldDestroyWorker =\n      this.isDestroyed || !this.reuseWorkers || this.count > this._getMaxConcurrency();\n\n    if (shouldDestroyWorker) {\n      worker.destroy();\n      this.count--;\n    } else {\n      this.idleQueue.push(worker);\n    }\n\n    if (!this.isDestroyed) {\n      this._startQueuedJob(); // eslint-disable-line @typescript-eslint/no-floating-promises\n    }\n  }\n\n  /**\n   * Returns idle worker or creates new worker if maxConcurrency has not been reached\n   */\n  _getAvailableWorker(): WorkerThread | null {\n    // If a worker has completed and returned to the queue, it can be used\n    if (this.idleQueue.length > 0) {\n      return this.idleQueue.shift() || null;\n    }\n\n    // Create fresh worker if we haven't yet created the max amount of worker threads for this worker source\n    if (this.count < this._getMaxConcurrency()) {\n      this.count++;\n      const name = `${this.name.toLowerCase()} (#${this.count} of ${this.maxConcurrency})`;\n      return new WorkerThread({name, source: this.source, url: this.url});\n    }\n\n    // No worker available, have to wait\n    return null;\n  }\n\n  _getMaxConcurrency() {\n    return isMobile ? this.maxMobileConcurrency : this.maxConcurrency;\n  }\n}\n","import type {WorkerMessageData, WorkerMessageType, WorkerMessagePayload} from '../../types';\nimport {getTransferList} from '../worker-utils/get-transfer-list';\n\nconst onMessageWrapperMap = new Map();\n\n/**\n * Type safe wrapper for worker code\n */\nexport default class WorkerBody {\n  /*\n   * (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n   */\n  static set onmessage(onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any) {\n    // eslint-disable-next-line no-restricted-globals\n    self.onmessage = (message) => {\n      if (!isKnownMessage(message)) {\n        return;\n      }\n\n      // Confusingly the message itself also has a 'type' field which is always set to 'message'\n      const {type, payload} = message.data;\n      onMessage(type, payload);\n    };\n  }\n\n  static addEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    let onMessageWrapper = onMessageWrapperMap.get(onMessage);\n\n    if (!onMessageWrapper) {\n      onMessageWrapper = (message) => {\n        if (!isKnownMessage(message)) {\n          return;\n        }\n\n        // Confusingly the message itself also has a 'type' field which is always set to 'message'\n        const {type, payload} = message.data;\n        onMessage(type, payload);\n      };\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    self.addEventListener('message', onMessageWrapper);\n  }\n\n  static removeEventListener(\n    onMessage: (type: WorkerMessageType, payload: WorkerMessagePayload) => any\n  ) {\n    const onMessageWrapper = onMessageWrapperMap.get(onMessage);\n    onMessageWrapperMap.delete(onMessage);\n    // eslint-disable-next-line no-restricted-globals\n    self.removeEventListener('message', onMessageWrapper);\n  }\n\n  /**\n   * Send a message from a worker to creating thread (main thread)\n   * @param type\n   * @param payload\n   */\n  static postMessage(type: WorkerMessageType, payload: WorkerMessagePayload): void {\n    if (self) {\n      const data: WorkerMessageData = {source: 'loaders.gl', type, payload};\n      const transferList = getTransferList(payload);\n      // eslint-disable-next-line no-restricted-globals\n      // @ts-ignore\n      self.postMessage(data, transferList);\n    }\n  }\n}\n\n// Filter out noise messages sent to workers\nfunction isKnownMessage(message) {\n  const {type, data} = message;\n  return (\n    type === 'message' &&\n    data &&\n    typeof data.source === 'string' &&\n    data.source.startsWith('loaders.gl')\n  );\n}\n","import type {WorkerObject, WorkerOptions} from '../../types';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\nconst NPM_TAG = 'latest';\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : NPM_TAG;\n\n/**\n * Gets worker object's name (for debugging in Chrome thread inspector window)\n */\nexport function getWorkerName(worker: WorkerObject): string {\n  const warning = worker.version !== VERSION ? ` (worker-utils@${VERSION})` : '';\n  return `${worker.name}@${worker.version}${warning}`;\n}\n\n/**\n * Generate a worker URL based on worker object and options\n * @returns A URL to one of the following:\n * - a published worker on unpkg CDN\n * - a local test worker\n * - a URL provided by the user in options\n */\nexport function getWorkerURL(worker: WorkerObject, options: WorkerOptions = {}): string {\n  const workerOptions = options[worker.id] || {};\n\n  const workerFile = `${worker.id}-worker.js`;\n\n  let url = workerOptions.workerUrl;\n\n  // If URL is test, generate local loaders.gl url\n  // @ts-ignore _workerType\n  if (options._workerType === 'test') {\n    url = `modules/${worker.module}/dist/${workerFile}`;\n  }\n\n  // If url override is not provided, generate a URL to published version on npm CDN unpkg.com\n  if (!url) {\n    // GENERATE\n    let version = worker.version;\n    // On master we need to load npm alpha releases published with the `beta` tag\n    if (version === 'latest') {\n      // throw new Error('latest worker version specified');\n      version = NPM_TAG;\n    }\n    const versionTag = version ? `@${version}` : '';\n    url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;\n  }\n\n  assert(url);\n\n  // Allow user to override location\n  return url;\n}\n","// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\n/**\n * Async Queue\n * - AsyncIterable: An async iterator can be\n * - Values can be pushed onto the queue\n * @example\n *   const asyncQueue = new AsyncQueue();\n *   setTimeout(() => asyncQueue.enqueue('tick'), 1000);\n *   setTimeout(() => asyncQueue.enqueue(new Error('done')), 10000);\n *   for await (const value of asyncQueue) {\n *     console.log(value); // tick\n *   }\n */\nexport default class AsyncQueue<T> {\n  private _values: any[];\n  private _settlers: any[];\n  private _closed: boolean;\n\n  constructor() {\n    this._values = []; // enqueues > dequeues\n    this._settlers = []; // dequeues > enqueues\n    this._closed = false;\n  }\n\n  /** Return an async iterator for this queue */\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  /** Push a new value - the async iterator will yield a promise resolved to this value */\n  push(value: T): void {\n    return this.enqueue(value);\n  }\n\n  /**\n   * Push a new value - the async iterator will yield a promise resolved to this value\n   * Add an error - the async iterator will yield a promise rejected with this value\n   */\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.shift();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.push(value);\n    }\n  }\n\n  /** Indicate that we not waiting for more values - The async iterator will be done */\n  close(): void {\n    while (this._settlers.length > 0) {\n      const settler = this._settlers.shift();\n      settler.resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  // ITERATOR IMPLEMENTATION\n\n  /** @returns a Promise for an IteratorResult */\n  next(): Promise<IteratorResult<T, any>> {\n    // If values in queue, yield the first value\n    if (this._values.length > 0) {\n      const value = this._values.shift();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({done: false, value});\n    }\n\n    // If queue is closed, the iterator is done\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true, value: undefined});\n    }\n\n    // Yield a promise that waits for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.push({resolve, reject});\n    });\n  }\n}\n","// @ts-nocheck\nconst moduleExports = require('./index');\nconst _global = typeof window === 'undefined' ? global : window;\n_global.loaders = _global.loaders || {};\nmodule.exports = Object.assign(_global.loaders, moduleExports);\n","import type {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport type {DracoMeshData, DracoLoaderData} from './lib/draco-types';\nimport type {DracoLoaderOptions} from './draco-loader';\nimport {DracoLoader as DracoWorkerLoader} from './draco-loader';\nimport DracoParser from './lib/draco-parser';\nimport {loadDracoDecoderModule} from './lib/draco-module-loader';\n\n// Draco data types\n\nexport type {DracoMeshData, DracoLoaderData};\n\n// Draco Writer\n\nexport type {DracoWriterOptions} from './draco-writer';\nexport {DracoWriter} from './draco-writer';\n\n// Draco Loader\n\nexport type {DracoLoaderOptions};\nexport {DracoWorkerLoader};\n\n/**\n * Loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  ...DracoWorkerLoader,\n  parse\n};\n\nasync function parse(\n  arrayBuffer: ArrayBuffer,\n  options?: DracoLoaderOptions\n): Promise<DracoMeshData> {\n  const {draco} = await loadDracoDecoderModule(options);\n  const dracoParser = new DracoParser(draco);\n  try {\n    return dracoParser.parseSync(arrayBuffer, options?.draco);\n  } finally {\n    dracoParser.destroy();\n  }\n}\n\n// TYPE TESTS - TODO find a better way than exporting junk\nexport const _TypecheckDracoLoader: LoaderWithParser = DracoLoader;\n","import type {Loader, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {DracoParseOptions} from './lib/draco-parser';\n// import type {DracoMeshData} from './types';\nimport {VERSION} from './lib/utils/version';\n\nexport type DracoLoaderOptions = LoaderOptions & {\n  draco?: DracoParseOptions & {\n    decoderType?: 'wasm' | 'js';\n    libraryPath?: string;\n    extraAttributes?;\n    attributeNameEntry?: string;\n  };\n};\n\nconst DEFAULT_DRACO_OPTIONS: DracoLoaderOptions = {\n  draco: {\n    decoderType: typeof WebAssembly === 'object' ? 'wasm' : 'js', // 'js' for IE11\n    libraryPath: 'libs/',\n    extraAttributes: {},\n    attributeNameEntry: undefined\n  }\n};\n\n/**\n * Worker loader for Draco3D compressed geometries\n */\nexport const DracoLoader = {\n  name: 'Draco',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  worker: true,\n  extensions: ['drc'],\n  mimeTypes: ['application/octet-stream'],\n  binary: true,\n  tests: ['DRACO'],\n  options: DEFAULT_DRACO_OPTIONS\n};\n\nexport const _TypecheckDracoLoader: Loader = DracoLoader;\n","/* eslint-disable camelcase */\n\n// Draco types (input)\nimport type {\n  Draco3D,\n  Decoder,\n  Mesh,\n  PointCloud,\n  PointAttribute,\n  Metadata,\n  MetadataQuerier,\n  DracoInt32Array,\n  draco_DataType\n} from '../draco3d/draco3d-types';\n\n// Parsed data types (output)\nimport type {\n  TypedArray,\n  // standard mesh output data\n  MeshData,\n  MeshAttribute,\n  // standard mesh with draco metadata\n  DracoMeshData,\n  DracoLoaderData,\n  DracoAttribute,\n  DracoMetadataEntry,\n  DracoQuantizationTransform,\n  DracoOctahedronTransform\n} from './draco-types';\n\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\nimport {makeSchemaFromAttributes} from './utils/schema-attribute-utils';\n\n/**\n * @param topology - How triangle indices should be generated (mesh only)\n * @param attributeNameEntry\n * @param extraAttributes\n * @param quantizedAttributes\n * @param octahedronAttributes\n */\nexport type DracoParseOptions = {\n  topology?: 'triangle-list' | 'triangle-strip';\n  attributeNameEntry?: string;\n  extraAttributes?: {[uniqueId: string]: number};\n  quantizedAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n  octahedronAttributes?: ('POSITION' | 'NORMAL' | 'COLOR' | 'TEX_COORD' | 'GENERIC')[];\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst GEOMETRY_TYPE = {\n  TRIANGULAR_MESH: 0,\n  POINT_CLOUD: 1\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR: 'COLOR_0',\n  TEX_COORD: 'TEXCOORD_0'\n};\n\nconst DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP = {\n  1: Int8Array,\n  2: Uint8Array,\n  3: Int16Array,\n  4: Uint16Array,\n  5: Int32Array,\n  6: Uint32Array,\n  9: Float32Array\n};\n\nconst INDEX_ITEM_SIZE = 4;\n\nexport default class DracoParser {\n  draco: Draco3D;\n  decoder: Decoder;\n  metadataQuerier: MetadataQuerier;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.decoder = new this.draco.Decoder();\n    this.metadataQuerier = new this.draco.MetadataQuerier();\n  }\n\n  /**\n   * Destroy draco resources\n   */\n  destroy(): void {\n    this.draco.destroy(this.decoder);\n    this.draco.destroy(this.metadataQuerier);\n  }\n\n  /**\n   * NOTE: caller must call `destroyGeometry` on the return value after using it\n   * @param arrayBuffer\n   * @param options\n   */\n  parseSync(arrayBuffer: ArrayBuffer, options: DracoParseOptions = {}): DracoMeshData {\n    const buffer = new this.draco.DecoderBuffer();\n    buffer.Init(new Int8Array(arrayBuffer), arrayBuffer.byteLength);\n\n    this._disableAttributeTransforms(options);\n\n    const geometry_type = this.decoder.GetEncodedGeometryType(buffer);\n    const dracoGeometry =\n      geometry_type === this.draco.TRIANGULAR_MESH\n        ? new this.draco.Mesh()\n        : new this.draco.PointCloud();\n\n    try {\n      let dracoStatus;\n      switch (geometry_type) {\n        case this.draco.TRIANGULAR_MESH:\n          dracoStatus = this.decoder.DecodeBufferToMesh(buffer, dracoGeometry as Mesh);\n          break;\n\n        case this.draco.POINT_CLOUD:\n          dracoStatus = this.decoder.DecodeBufferToPointCloud(buffer, dracoGeometry);\n          break;\n\n        default:\n          throw new Error('DRACO: Unknown geometry type.');\n      }\n\n      if (!dracoStatus.ok() || !dracoGeometry.ptr) {\n        const message = `DRACO decompression failed: ${dracoStatus.error_msg()}`;\n        // console.error(message);\n        throw new Error(message);\n      }\n\n      const loaderData = this._getDracoLoaderData(dracoGeometry, geometry_type, options);\n\n      const geometry = this._getMeshData(dracoGeometry, loaderData, options);\n\n      const boundingBox = getMeshBoundingBox(geometry.attributes);\n\n      const schema = makeSchemaFromAttributes(geometry.attributes, loaderData, geometry.indices);\n\n      const data: DracoMeshData = {\n        loader: 'draco',\n        loaderData,\n        header: {\n          vertexCount: dracoGeometry.num_points(),\n          boundingBox\n        },\n        ...geometry,\n        schema\n      };\n      return data;\n    } finally {\n      this.draco.destroy(buffer);\n      if (dracoGeometry) {\n        this.draco.destroy(dracoGeometry);\n      }\n    }\n  }\n\n  // Draco specific \"loader data\"\n\n  /**\n   * Extract\n   * @param dracoGeometry\n   * @param geometry_type\n   * @param options\n   * @returns\n   */\n  _getDracoLoaderData(\n    dracoGeometry: Mesh | PointCloud,\n    geometry_type,\n    options: DracoParseOptions\n  ): DracoLoaderData {\n    const metadata = this._getTopLevelMetadata(dracoGeometry);\n    const attributes = this._getDracoAttributes(dracoGeometry, options);\n\n    return {\n      geometry_type,\n      num_attributes: dracoGeometry.num_attributes(),\n      num_points: dracoGeometry.num_points(),\n      num_faces: dracoGeometry instanceof this.draco.Mesh ? dracoGeometry.num_faces() : 0,\n      metadata,\n      attributes\n    };\n  }\n\n  /**\n   * Extract all draco provided information and metadata for each attribute\n   * @param dracoGeometry\n   * @param options\n   * @returns\n   */\n  _getDracoAttributes(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: DracoAttribute} {\n    const dracoAttributes: {[unique_id: number]: DracoAttribute} = {};\n\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      // Note: Draco docs do not seem clear on `GetAttribute` ids just being a zero-based index,\n      // but it does seems to work this way\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n\n      const metadata = this._getAttributeMetadata(dracoGeometry, attributeId);\n\n      dracoAttributes[dracoAttribute.unique_id()] = {\n        unique_id: dracoAttribute.unique_id(),\n        attribute_type: dracoAttribute.attribute_type(),\n        data_type: dracoAttribute.data_type(),\n        num_components: dracoAttribute.num_components(),\n\n        byte_offset: dracoAttribute.byte_offset(),\n        byte_stride: dracoAttribute.byte_stride(),\n        normalized: dracoAttribute.normalized(),\n        attribute_index: attributeId,\n\n        metadata\n      };\n\n      // Add transformation parameters for any attributes app wants untransformed\n      const quantization = this._getQuantizationTransform(dracoAttribute, options);\n      if (quantization) {\n        dracoAttributes[dracoAttribute.unique_id()].quantization_transform = quantization;\n      }\n\n      const octahedron = this._getOctahedronTransform(dracoAttribute, options);\n      if (octahedron) {\n        dracoAttributes[dracoAttribute.unique_id()].octahedron_transform = octahedron;\n      }\n    }\n\n    return dracoAttributes;\n  }\n\n  /**\n   * Get standard loaders.gl mesh category data\n   * Extracts the geometry from draco\n   * @param dracoGeometry\n   * @param options\n   */\n  _getMeshData(\n    dracoGeometry: Mesh | PointCloud,\n    loaderData: DracoLoaderData,\n    options: DracoParseOptions\n  ): MeshData {\n    const attributes = this._getMeshAttributes(loaderData, dracoGeometry, options);\n\n    const positionAttribute = attributes.POSITION;\n    if (!positionAttribute) {\n      throw new Error('DRACO: No position attribute found.');\n    }\n\n    // For meshes, we need indices to define the faces.\n    if (dracoGeometry instanceof this.draco.Mesh) {\n      switch (options.topology) {\n        case 'triangle-strip':\n          return {\n            topology: 'triangle-strip',\n            mode: 4, // GL.TRIANGLES\n            attributes,\n            indices: {\n              value: this._getTriangleStripIndices(dracoGeometry),\n              size: 1\n            }\n          };\n        case 'triangle-list':\n        default:\n          return {\n            topology: 'triangle-list',\n            mode: 5, // GL.TRIANGLE_STRIP\n            attributes,\n            indices: {\n              value: this._getTriangleListIndices(dracoGeometry),\n              size: 1\n            }\n          };\n      }\n    }\n\n    // PointCloud - must come last as Mesh inherits from PointCloud\n    return {\n      topology: 'point-list',\n      mode: 0, // GL.POINTS\n      attributes\n    };\n  }\n\n  _getMeshAttributes(\n    loaderData: DracoLoaderData,\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[attributeName: string]: MeshAttribute} {\n    const attributes: {[key: string]: MeshAttribute} = {};\n\n    for (const loaderAttribute of Object.values(loaderData.attributes)) {\n      const attributeName = this._deduceAttributeName(loaderAttribute, options);\n      loaderAttribute.name = attributeName;\n      const {value, size} = this._getAttributeValues(dracoGeometry, loaderAttribute);\n      attributes[attributeName] = {\n        value,\n        size,\n        byteOffset: loaderAttribute.byte_offset,\n        byteStride: loaderAttribute.byte_stride,\n        normalized: loaderAttribute.normalized\n      };\n    }\n\n    return attributes;\n  }\n\n  // MESH INDICES EXTRACTION\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleListIndices(dracoGeometry: Mesh) {\n    // Example on how to retrieve mesh and attributes.\n    const numFaces = dracoGeometry.num_faces();\n    const numIndices = numFaces * 3;\n    const byteLength = numIndices * INDEX_ITEM_SIZE;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      this.decoder.GetTrianglesUInt32Array(dracoGeometry, byteLength, ptr);\n      return new Uint32Array(this.draco.HEAPF32.buffer, ptr, numIndices).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n  }\n\n  /**\n   * For meshes, we need indices to define the faces.\n   * @param dracoGeometry\n   */\n  _getTriangleStripIndices(dracoGeometry: Mesh) {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      /* const numStrips = */ this.decoder.GetTriangleStripsFromMesh(dracoGeometry, dracoArray);\n      return getUint32Array(dracoArray);\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  /**\n   *\n   * @param dracoGeometry\n   * @param dracoAttribute\n   * @param attributeName\n   */\n  _getAttributeValues(\n    dracoGeometry: Mesh | PointCloud,\n    attribute: DracoAttribute\n  ): {value: TypedArray; size: number} {\n    const TypedArrayCtor = DRACO_DATA_TYPE_TO_TYPED_ARRAY_MAP[attribute.data_type];\n    const numComponents = attribute.num_components;\n    const numPoints = dracoGeometry.num_points();\n    const numValues = numPoints * numComponents;\n\n    const byteLength = numValues * TypedArrayCtor.BYTES_PER_ELEMENT;\n    const dataType = getDracoDataType(this.draco, TypedArrayCtor);\n\n    let value: TypedArray;\n\n    const ptr = this.draco._malloc(byteLength);\n    try {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attribute.attribute_index);\n      this.decoder.GetAttributeDataArrayForAllPoints(\n        dracoGeometry,\n        dracoAttribute,\n        dataType,\n        byteLength,\n        ptr\n      );\n      value = new TypedArrayCtor(this.draco.HEAPF32.buffer, ptr, numValues).slice();\n    } finally {\n      this.draco._free(ptr);\n    }\n\n    return {value, size: numComponents};\n  }\n\n  // Attribute names\n\n  /** \n   * DRACO does not store attribute names - We need to deduce an attribute name\n   * for each attribute\n  _getAttributeNames(\n    dracoGeometry: Mesh | PointCloud,\n    options: DracoParseOptions\n  ): {[unique_id: number]: string} {\n    const attributeNames: {[unique_id: number]: string} = {};\n    for (let attributeId = 0; attributeId < dracoGeometry.num_attributes(); attributeId++) {\n      const dracoAttribute = this.decoder.GetAttribute(dracoGeometry, attributeId);\n      const attributeName = this._deduceAttributeName(dracoAttribute, options);\n      attributeNames[attributeName] = attributeName;\n    }\n    return attributeNames;\n  }\n   */\n\n  /**\n   * Deduce an attribute name.\n   * @note DRACO does not save attribute names, just general type (POSITION, COLOR)\n   * to help optimize compression. We generate GLTF compatible names for the Draco-recognized\n   * types\n   * @param attributeData\n   */\n  _deduceAttributeName(attribute: DracoAttribute, options: DracoParseOptions): string {\n    // Deduce name based on application provided map\n    const uniqueId = attribute.unique_id;\n    for (const [attributeName, attributeUniqueId] of Object.entries(\n      options.extraAttributes || {}\n    )) {\n      if (attributeUniqueId === uniqueId) {\n        return attributeName;\n      }\n    }\n\n    // Deduce name based on attribute type\n    const thisAttributeType = attribute.attribute_type;\n    for (const dracoAttributeConstant in DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP) {\n      const attributeType = this.draco[dracoAttributeConstant];\n      if (attributeType === thisAttributeType) {\n        // TODO - Return unique names if there multiple attributes per type\n        // (e.g. multiple TEX_COORDS or COLORS)\n        return DRACO_TO_GLTF_ATTRIBUTE_NAME_MAP[dracoAttributeConstant];\n      }\n    }\n\n    // Look up in metadata\n    // TODO - shouldn't this have priority?\n    const entryName = options.attributeNameEntry || 'name';\n    if (attribute.metadata[entryName]) {\n      return attribute.metadata[entryName].string;\n    }\n\n    // Attribute of \"GENERIC\" type, we need to assign some name\n    return `CUSTOM_ATTRIBUTE_${uniqueId}`;\n  }\n\n  // METADATA EXTRACTION\n\n  /** Get top level metadata */\n  _getTopLevelMetadata(dracoGeometry: Mesh | PointCloud) {\n    const dracoMetadata = this.decoder.GetMetadata(dracoGeometry);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /** Get per attribute metadata */\n  _getAttributeMetadata(dracoGeometry: Mesh | PointCloud, attributeId: number) {\n    const dracoMetadata = this.decoder.GetAttributeMetadata(dracoGeometry, attributeId);\n    return this._getDracoMetadata(dracoMetadata);\n  }\n\n  /**\n   * Extract metadata field values\n   * @param dracoMetadata\n   * @returns\n   */\n  _getDracoMetadata(dracoMetadata: Metadata): {[entry: string]: DracoMetadataEntry} {\n    // The not so wonderful world of undocumented Draco APIs :(\n    if (!dracoMetadata || !dracoMetadata.ptr) {\n      return {};\n    }\n    const result = {};\n    const numEntries = this.metadataQuerier.NumEntries(dracoMetadata);\n    for (let entryIndex = 0; entryIndex < numEntries; entryIndex++) {\n      const entryName = this.metadataQuerier.GetEntryName(dracoMetadata, entryIndex);\n      result[entryName] = this._getDracoMetadataField(dracoMetadata, entryName);\n    }\n    return result;\n  }\n\n  /**\n   * Extracts possible values for one metadata entry by name\n   * @param dracoMetadata\n   * @param entryName\n   */\n  _getDracoMetadataField(dracoMetadata: Metadata, entryName: string): DracoMetadataEntry {\n    const dracoArray = new this.draco.DracoInt32Array();\n    try {\n      // Draco metadata fields can hold int32 arrays\n      this.metadataQuerier.GetIntEntryArray(dracoMetadata, entryName, dracoArray);\n      const intArray = getInt32Array(dracoArray);\n      return {\n        int: this.metadataQuerier.GetIntEntry(dracoMetadata, entryName),\n        string: this.metadataQuerier.GetStringEntry(dracoMetadata, entryName),\n        double: this.metadataQuerier.GetDoubleEntry(dracoMetadata, entryName),\n        intArray\n      };\n    } finally {\n      this.draco.destroy(dracoArray);\n    }\n  }\n\n  // QUANTIZED ATTRIBUTE SUPPORT (NO DECOMPRESSION)\n\n  /** Skip transforms for specific attribute types */\n  _disableAttributeTransforms(options: DracoParseOptions) {\n    const {quantizedAttributes = [], octahedronAttributes = []} = options;\n    const skipAttributes = [...quantizedAttributes, ...octahedronAttributes];\n    for (const dracoAttributeName of skipAttributes) {\n      this.decoder.SkipAttributeTransform(this.draco[dracoAttributeName]);\n    }\n  }\n\n  /**\n   * Extract (and apply?) Position Transform\n   * @todo not used\n   */\n  _getQuantizationTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoQuantizationTransform | null {\n    const {quantizedAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const skip = quantizedAttributes.map((type) => this.decoder[type]).includes(attribute_type);\n    if (skip) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits(),\n            range: transform.range(),\n            min_values: new Float32Array([1, 2, 3]).map((i) => transform.min_value(i))\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  _getOctahedronTransform(\n    dracoAttribute: PointAttribute,\n    options: DracoParseOptions\n  ): DracoOctahedronTransform | null {\n    const {octahedronAttributes = []} = options;\n    const attribute_type = dracoAttribute.attribute_type();\n    const octahedron = octahedronAttributes\n      .map((type) => this.decoder[type])\n      .includes(attribute_type);\n    if (octahedron) {\n      const transform = new this.draco.AttributeQuantizationTransform();\n      try {\n        if (transform.InitFromAttribute(dracoAttribute)) {\n          return {\n            quantization_bits: transform.quantization_bits()\n          };\n        }\n      } finally {\n        this.draco.destroy(transform);\n      }\n    }\n    return null;\n  }\n\n  // HELPERS\n}\n\n/**\n * Get draco specific data type by TypedArray constructor type\n * @param attributeType\n * @returns draco specific data type\n */\nfunction getDracoDataType(draco: Draco3D, attributeType: any): draco_DataType {\n  switch (attributeType) {\n    case Float32Array:\n      return draco.DT_FLOAT32;\n    case Int8Array:\n      return draco.DT_INT8;\n    case Int16Array:\n      return draco.DT_INT16;\n    case Int32Array:\n      return draco.DT_INT32;\n    case Uint8Array:\n      return draco.DT_UINT8;\n    case Uint16Array:\n      return draco.DT_UINT16;\n    case Uint32Array:\n      return draco.DT_UINT32;\n    default:\n      return draco.DT_INVALID;\n  }\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getInt32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n\n/**\n * Copy a Draco int32 array into a JS typed array\n */\nfunction getUint32Array(dracoArray: DracoInt32Array): Int32Array {\n  const numValues = dracoArray.size();\n  const intArray = new Int32Array(numValues);\n  for (let i = 0; i < numValues; i++) {\n    intArray[i] = dracoArray.GetValue(i);\n  }\n  return intArray;\n}\n","import type {Schema} from '../schema';\nimport type {TableBatch} from '../../category/table';\nimport type {TableBatchAggregator, TableBatchConstructor} from './table-batch-aggregator';\nimport BaseTableBatchAggregator from './base-table-batch-aggregator';\nimport RowTableBatchAggregator from './row-table-batch-aggregator';\nimport ColumnarTableBatchAggregator from './columnar-table-batch-aggregator';\n\n// TODO define interface instead\ntype TableBatchBuilderOptions = {\n  shape: 'row-table' | 'array-row-table' | 'object-row-table' | 'columnar-table' | 'arrow-table';\n  batchSize?: number | 'auto';\n  batchDebounceMs?: number;\n  limit: number;\n  _limitMB: number;\n};\n\ntype GetBatchOptions = {\n  bytesUsed?: number;\n  [key: string]: any;\n};\n\nconst DEFAULT_OPTIONS: Required<TableBatchBuilderOptions> = {\n  shape: 'array-row-table',\n  batchSize: 'auto',\n  batchDebounceMs: 0,\n  limit: 0,\n  _limitMB: 0\n};\n\nconst ERR_MESSAGE = 'TableBatchBuilder';\n\n/** Incrementally builds batches from a stream of rows */\nexport default class TableBatchBuilder {\n  schema: Schema;\n  options: Required<TableBatchBuilderOptions>;\n\n  private aggregator: TableBatchAggregator | null = null;\n  private batchCount: number = 0;\n  private bytesUsed: number = 0;\n  private isChunkComplete: boolean = false;\n  private lastBatchEmittedMs: number = Date.now();\n  private totalLength: number = 0;\n  private totalBytes: number = 0;\n  private rowBytes: number = 0;\n\n  static ArrowBatch?: TableBatchConstructor;\n\n  constructor(schema: Schema, options?: TableBatchBuilderOptions) {\n    this.schema = schema;\n    this.options = {...DEFAULT_OPTIONS, ...options};\n  }\n\n  limitReached(): boolean {\n    if (Boolean(this.options?.limit) && this.totalLength >= this.options.limit) {\n      return true;\n    }\n    if (Boolean(this.options?._limitMB) && this.totalBytes / 1e6 >= this.options._limitMB) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @deprecated Use addArrayRow or addObjectRow */\n  addRow(row: any[] | {[columnName: string]: any}): void {\n    if (this.limitReached()) {\n      return;\n    }\n    this.totalLength++;\n    this.rowBytes = this.rowBytes || this._estimateRowMB(row);\n    this.totalBytes += this.rowBytes;\n    if (Array.isArray(row)) {\n      this.addArrayRow(row);\n    } else {\n      this.addObjectRow(row);\n    }\n  }\n\n  /** Add one row to the batch */\n  protected addArrayRow(row: any[]) {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addArrayRow(row);\n  }\n\n  /** Add one row to the batch */\n  protected addObjectRow(row: {[columnName: string]: any}): void {\n    if (!this.aggregator) {\n      const TableBatchType = this._getTableBatchType();\n      this.aggregator = new TableBatchType(this.schema, this.options);\n    }\n    this.aggregator.addObjectRow(row);\n  }\n\n  /** Mark an incoming raw memory chunk has completed */\n  chunkComplete(chunk: ArrayBuffer | string): void {\n    if (chunk instanceof ArrayBuffer) {\n      this.bytesUsed += chunk.byteLength;\n    }\n    if (typeof chunk === 'string') {\n      this.bytesUsed += chunk.length;\n    }\n    this.isChunkComplete = true;\n  }\n\n  getFullBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._isFull() ? this._getBatch(options) : null;\n  }\n\n  getFinalBatch(options?: GetBatchOptions): TableBatch | null {\n    return this._getBatch(options);\n  }\n\n  // INTERNAL\n\n  _estimateRowMB(row) {\n    return Array.isArray(row) ? row.length * 8 : Object.keys(row).length * 8;\n  }\n\n  private _isFull(): boolean {\n    // No batch, not ready\n    if (!this.aggregator || this.aggregator.rowCount() === 0) {\n      return false;\n    }\n\n    // if batchSize === 'auto' we wait for chunk to complete\n    // if batchSize === number, ensure we have enough rows\n    if (this.options.batchSize === 'auto') {\n      if (!this.isChunkComplete) {\n        return false;\n      }\n    } else if (this.options.batchSize > this.aggregator.rowCount()) {\n      return false;\n    }\n\n    // Debounce batches\n    if (this.options.batchDebounceMs > Date.now() - this.lastBatchEmittedMs) {\n      return false;\n    }\n\n    // Emit batch\n    this.isChunkComplete = false;\n    this.lastBatchEmittedMs = Date.now();\n    return true;\n  }\n\n  /**\n   * bytesUsed can be set via chunkComplete or via getBatch*\n   */\n  private _getBatch(options?: GetBatchOptions): TableBatch | null {\n    if (!this.aggregator) {\n      return null;\n    }\n\n    // TODO - this can overly increment bytes used?\n    if (options?.bytesUsed) {\n      this.bytesUsed = options.bytesUsed;\n    }\n    const normalizedBatch = this.aggregator.getBatch() as TableBatch;\n    normalizedBatch.count = this.batchCount;\n    normalizedBatch.bytesUsed = this.bytesUsed;\n    Object.assign(normalizedBatch, options);\n\n    this.batchCount++;\n    this.aggregator = null;\n    return normalizedBatch;\n  }\n\n  private _getTableBatchType(): TableBatchConstructor {\n    switch (this.options.shape) {\n      case 'row-table':\n        return BaseTableBatchAggregator;\n      case 'array-row-table':\n      case 'object-row-table':\n        return RowTableBatchAggregator;\n      case 'columnar-table':\n        return ColumnarTableBatchAggregator;\n      case 'arrow-table':\n        if (!TableBatchBuilder.ArrowBatch) {\n          throw new Error(ERR_MESSAGE);\n        }\n        return TableBatchBuilder.ArrowBatch;\n      default:\n        throw new Error(ERR_MESSAGE);\n    }\n  }\n}\n","import type {Schema} from '../schema';\nimport type {TableBatch} from '../../category/table';\nimport {TableBatchAggregator, TableBatchOptions} from './table-batch-aggregator';\n\nconst DEFAULT_ROW_COUNT = 100;\n\nexport default class RowTableBatchAggregator implements TableBatchAggregator {\n  schema: Schema;\n  options: TableBatchOptions;\n\n  length: number = 0;\n  rows: any[] | null = null;\n  cursor: number = 0;\n  private _headers: string[] = [];\n\n  constructor(schema: Schema, options: TableBatchOptions) {\n    this.options = options;\n    this.schema = schema;\n\n    // schema is an array if there're no headers\n    // object if there are headers\n    if (!Array.isArray(schema)) {\n      this._headers = [];\n      for (const key in schema) {\n        this._headers[schema[key].index] = schema[key].name;\n      }\n    }\n  }\n\n  rowCount(): number {\n    return this.length;\n  }\n\n  addArrayRow(row: any[], cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  addObjectRow(row: {[columnName: string]: any}, cursor?: number): void {\n    if (Number.isFinite(cursor)) {\n      this.cursor = cursor as number;\n    }\n\n    this.rows = this.rows || new Array(DEFAULT_ROW_COUNT);\n    this.rows[this.length] = row;\n    this.length++;\n  }\n\n  getBatch(): TableBatch | null {\n    let rows = this.rows;\n    if (!rows) {\n      return null;\n    }\n\n    rows = rows.slice(0, this.length);\n    this.rows = null;\n\n    const batch: TableBatch = {\n      shape: this.options.shape,\n      batchType: 'data',\n      data: rows,\n      length: this.length,\n      schema: this.schema,\n      cursor: this.cursor\n    };\n\n    return batch;\n  }\n}\n","// Mesh category utilities\n// TODO - move to mesh category module, or to math.gl/geometry module\nimport {TypedArray} from '../../types';\n\ntype Attribute = {\n  size?: number;\n  type?: number;\n  normalized?: boolean;\n  value: TypedArray;\n};\n\ntype TypedArrays = {[key: string]: TypedArray};\nexport type Attributes = {[key: string]: Attribute};\n\n/**\n * Holds an axis aligned bounding box\n * TODO - make sure AxisAlignedBoundingBox in math.gl/culling understands this format (or change this format)\n */\ntype BoundingBox = [[number, number, number], [number, number, number]];\n\n/**\n * Get number of vertices in mesh\n * @param attributes\n */\nexport function getMeshSize(attributes: TypedArrays): number {\n  let size = 0;\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    if (ArrayBuffer.isView(attribute)) {\n      // @ts-ignore DataView doesn't have BYTES_PER_ELEMENT\n      size += attribute.byteLength * attribute.BYTES_PER_ELEMENT;\n    }\n  }\n  return size;\n}\n\n/**\n * Get the (axis aligned) bounding box of a mesh\n * @param attributes\n * @returns array of two vectors representing the axis aligned bounding box\n */\n// eslint-disable-next-line complexity\nexport function getMeshBoundingBox(attributes: Attributes): BoundingBox {\n  let minX = Infinity;\n  let minY = Infinity;\n  let minZ = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  let maxZ = -Infinity;\n\n  const positions = attributes.POSITION ? attributes.POSITION.value : [];\n  const len = positions && positions.length;\n\n  for (let i = 0; i < len; i += 3) {\n    const x = positions[i];\n    const y = positions[i + 1];\n    const z = positions[i + 2];\n\n    minX = x < minX ? x : minX;\n    minY = y < minY ? y : minY;\n    minZ = z < minZ ? z : minZ;\n\n    maxX = x > maxX ? x : maxX;\n    maxY = y > maxY ? y : maxY;\n    maxZ = z > maxZ ? z : maxZ;\n  }\n  return [\n    [minX, minY, minZ],\n    [maxX, maxY, maxZ]\n  ];\n}\n","import {assert} from '../../utils/assert';\nimport Field from './field';\n\nexport type SchemaMetadata = Map<string, any>;\n\n/**\n * ArrowJS `Schema` API-compatible class for row-based tables (returned from `DataTable`)\n * https://loaders.gl/arrowjs/docs/api-reference/schema\n */\nexport default class Schema {\n  fields: Field[];\n  // TODO - Arrow just allows Map<string, string>\n  metadata: SchemaMetadata;\n\n  constructor(fields: Field[], metadata?: SchemaMetadata) {\n    assert(Array.isArray(fields));\n    checkNames(fields);\n    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`\n    this.fields = fields;\n    this.metadata = metadata || new Map();\n  }\n\n  // TODO - arrow only seems to compare fields, not metadata\n  compareTo(other: Schema): boolean {\n    if (this.metadata !== other.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  select(...columnNames: string[]): Schema {\n    // Ensure column names reference valid fields\n    const nameMap = Object.create(null);\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = this.fields.filter((field) => nameMap[field.name]);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  selectAt(...columnIndices: number[]): Schema {\n    // Ensure column indices reference valid fields\n    const selectedFields = columnIndices.map((index) => this.fields[index]).filter(Boolean);\n    return new Schema(selectedFields, this.metadata);\n  }\n\n  assign(schemaOrFields: Schema | Field[]): Schema {\n    let fields: Field[];\n    let metadata: SchemaMetadata = this.metadata;\n\n    if (schemaOrFields instanceof Schema) {\n      const otherSchema = schemaOrFields;\n      fields = otherSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherSchema.metadata);\n    } else {\n      fields = schemaOrFields;\n    }\n\n    // Create a merged list of fields, overwrite fields in place, new fields at end\n    const fieldMap: {[key: string]: Field} = Object.create(null);\n\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n\n    const mergedFields = Object.values(fieldMap);\n\n    return new Schema(mergedFields, metadata);\n  }\n}\n\n// Warn if any duplicated field names\nfunction checkNames(fields) {\n  const usedNames = {};\n  for (const field of fields) {\n    if (usedNames[field.name]) {\n      // eslint-disable-next-line\n      console.warn('Schema: duplicated field name', field.name, field);\n    }\n    usedNames[field.name] = true;\n  }\n}\n\nfunction mergeMaps<T>(m1: T, m2: T): T {\n  // @ts-ignore\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n","// Replacement for the external assert method to reduce bundle size\n// Note: We don't use the second \"message\" argument in calling code,\n// so no need to support it here\nexport function assert(condition: boolean, message?: string) {\n  if (!condition) {\n    throw new Error(message || 'loader assertion failed.');\n  }\n}\n","import {DataType} from './type';\n\n/**\n * ArrowJS `Field` API-compatible class for row-based tables\n * https://loaders.gl/arrowjs/docs/api-reference/field\n * A field holds name, nullable, and metadata information about a table \"column\"\n * A Schema is essentially a list of fields\n */\nexport default class Field {\n  name: string;\n  type: DataType;\n  nullable: boolean;\n  metadata: Map<string, string>;\n\n  constructor(\n    name: string,\n    type: DataType,\n    nullable = false,\n    metadata: Map<string, string> = new Map()\n  ) {\n    this.name = name;\n    this.type = type;\n    this.nullable = nullable;\n    this.metadata = metadata;\n  }\n\n  get typeId(): number {\n    return this.type && this.type.typeId;\n  }\n\n  clone(): Field {\n    return new Field(this.name, this.type, this.nullable, this.metadata);\n  }\n\n  compareTo(other: this): boolean {\n    return (\n      this.name === other.name &&\n      this.type === other.type &&\n      this.nullable === other.nullable &&\n      this.metadata === other.metadata\n    );\n  }\n\n  toString(): string {\n    return `${this.type}${this.nullable ? ', nullable' : ''}${\n      this.metadata ? `, metadata: ${this.metadata}` : ''\n    }`;\n  }\n}\n","// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\nimport {Type} from './enum';\n\nimport Field from './field';\n\nexport {Type} from './enum';\n\nexport type TypedIntArray =\n  | Int8Array\n  | Uint8Array\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Int32Array\n  | Uint32Array\n  | Uint8ClampedArray;\n\nexport type TypedFloatArray = Float32Array | Float64Array;\n\nexport type TypedArray = TypedIntArray | TypedFloatArray;\n\nexport type AnyArrayType = Array<any> | TypedIntArray | TypedFloatArray;\n\nexport class DataType {\n  static isNull(x: any): boolean {\n    return x && x.typeId === Type.Null;\n  }\n  static isInt(x: any): boolean {\n    return x && x.typeId === Type.Int;\n  }\n  static isFloat(x: any): boolean {\n    return x && x.typeId === Type.Float;\n  }\n  static isBinary(x: any): boolean {\n    return x && x.typeId === Type.Binary;\n  }\n  static isUtf8(x: any): boolean {\n    return x && x.typeId === Type.Utf8;\n  }\n  static isBool(x: any): boolean {\n    return x && x.typeId === Type.Bool;\n  }\n  static isDecimal(x: any): boolean {\n    return x && x.typeId === Type.Decimal;\n  }\n  static isDate(x: any): boolean {\n    return x && x.typeId === Type.Date;\n  }\n  static isTime(x: any): boolean {\n    return x && x.typeId === Type.Time;\n  }\n  static isTimestamp(x: any): boolean {\n    return x && x.typeId === Type.Timestamp;\n  }\n  static isInterval(x: any): boolean {\n    return x && x.typeId === Type.Interval;\n  }\n  static isList(x: any): boolean {\n    return x && x.typeId === Type.List;\n  }\n  static isStruct(x: any): boolean {\n    return x && x.typeId === Type.Struct;\n  }\n  static isUnion(x: any): boolean {\n    return x && x.typeId === Type.Union;\n  }\n  static isFixedSizeBinary(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeBinary;\n  }\n  static isFixedSizeList(x: any): boolean {\n    return x && x.typeId === Type.FixedSizeList;\n  }\n  static isMap(x: any): boolean {\n    return x && x.typeId === Type.Map;\n  }\n  static isDictionary(x: any): boolean {\n    return x && x.typeId === Type.Dictionary;\n  }\n\n  get typeId(): Type {\n    return Type.NONE;\n  }\n\n  // get ArrayType(): AnyArrayType {\n  //   return Int8Array;\n  // }\n\n  // get ArrayType() { return Array; }\n  compareTo(other: DataType): boolean {\n    // TODO\n    return this === other; // comparer.visit(this, other);\n  }\n}\n\n// NULL\n\nexport class Null extends DataType {\n  get typeId(): Type {\n    return Type.Null;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Null';\n  }\n  toString(): string {\n    return 'Null';\n  }\n}\n\n// BOOLEANS\n\nexport class Bool extends DataType {\n  get typeId(): Type {\n    return Type.Bool;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Bool';\n  }\n  toString(): string {\n    return 'Bool';\n  }\n}\n\n// INTS\n\nexport class Int extends DataType {\n  readonly isSigned: boolean;\n  readonly bitWidth: number;\n  constructor(isSigned, bitWidth) {\n    super();\n    this.isSigned = isSigned;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Int;\n  }\n  // get ArrayType() {\n  //   switch (this.bitWidth) {\n  //     case 8:\n  //       return this.isSigned ? Int8Array : Uint8Array;\n  //     case 16:\n  //       return this.isSigned ? Int16Array : Uint16Array;\n  //     case 32:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     case 64:\n  //       return this.isSigned ? Int32Array : Uint32Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Int';\n  }\n  toString(): string {\n    return `${this.isSigned ? 'I' : 'Ui'}nt${this.bitWidth}`;\n  }\n}\n\nexport class Int8 extends Int {\n  constructor() {\n    super(true, 8);\n  }\n}\nexport class Int16 extends Int {\n  constructor() {\n    super(true, 16);\n  }\n}\nexport class Int32 extends Int {\n  constructor() {\n    super(true, 32);\n  }\n}\nexport class Int64 extends Int {\n  constructor() {\n    super(true, 64);\n  }\n}\nexport class Uint8 extends Int {\n  constructor() {\n    super(false, 8);\n  }\n}\nexport class Uint16 extends Int {\n  constructor() {\n    super(false, 16);\n  }\n}\nexport class Uint32 extends Int {\n  constructor() {\n    super(false, 32);\n  }\n}\nexport class Uint64 extends Int {\n  constructor() {\n    super(false, 64);\n  }\n}\n\n// FLOATS\n\nconst Precision = {\n  HALF: 16,\n  SINGLE: 32,\n  DOUBLE: 64\n};\n\nexport class Float extends DataType {\n  readonly precision: number;\n  constructor(precision) {\n    super();\n    this.precision = precision;\n  }\n  get typeId(): Type {\n    return Type.Float;\n  }\n  // get ArrayType() {\n  //   switch (this.precision) {\n  //     case Precision.HALF:\n  //       return Uint16Array;\n  //     case Precision.SINGLE:\n  //       return Float32Array;\n  //     case Precision.DOUBLE:\n  //       return Float64Array;\n  //     default:\n  //       throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n  //   }\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Float';\n  }\n  toString(): string {\n    return `Float${this.precision}`;\n  }\n}\n\nexport class Float16 extends Float {\n  constructor() {\n    super(Precision.HALF);\n  }\n}\nexport class Float32 extends Float {\n  constructor() {\n    super(Precision.SINGLE);\n  }\n}\nexport class Float64 extends Float {\n  constructor() {\n    super(Precision.DOUBLE);\n  }\n}\n\nexport class Binary extends DataType {\n  constructor() {\n    super();\n  }\n  get typeId() {\n    return Type.Binary;\n  }\n  toString() {\n    return 'Binary';\n  }\n  get [Symbol.toStringTag]() {\n    return 'Binary';\n  }\n}\n\n// STRINGS\n\nexport class Utf8 extends DataType {\n  get typeId(): Type {\n    return Type.Utf8;\n  }\n  // get ArrayType() {\n  //   return Uint8Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Utf8';\n  }\n  toString(): string {\n    return 'Utf8';\n  }\n}\n\n// DATES, TIMES AND INTERVALS\n\nconst DateUnit = {\n  DAY: 0,\n  MILLISECOND: 1\n};\n\nexport class Date extends DataType {\n  readonly unit: number;\n  constructor(unit) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Date;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Date';\n  }\n  toString(): string {\n    return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`;\n  }\n}\n\nexport class DateDay extends Date {\n  constructor() {\n    super(DateUnit.DAY);\n  }\n}\nexport class DateMillisecond extends Date {\n  constructor() {\n    super(DateUnit.MILLISECOND);\n  }\n}\n\nconst TimeUnit = {\n  SECOND: 1,\n  MILLISECOND: 1e3,\n  MICROSECOND: 1e6,\n  NANOSECOND: 1e9\n};\n\nexport class Time extends DataType {\n  readonly unit: number;\n  readonly bitWidth: number;\n\n  constructor(unit, bitWidth) {\n    super();\n    this.unit = unit;\n    this.bitWidth = bitWidth;\n  }\n  get typeId(): Type {\n    return Type.Time;\n  }\n  toString(): string {\n    return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`;\n  }\n  get [Symbol.toStringTag](): string {\n    return 'Time';\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n}\n\nexport class TimeSecond extends Time {\n  constructor() {\n    super(TimeUnit.SECOND, 32);\n  }\n}\nexport class TimeMillisecond extends Time {\n  constructor() {\n    super(TimeUnit.MILLISECOND, 32);\n  }\n}\n// export class TimeMicrosecond extends Time { constructor() { super(TimeUnit.MICROSECOND, 64); } }\n// export class TimeNanosecond extends Time { constructor() { super(TimeUnit.NANOSECOND, 64); } }\n\nexport class Timestamp extends DataType {\n  readonly unit: any;\n  readonly timezone: any;\n\n  constructor(unit: any, timezone = null) {\n    super();\n    this.unit = unit;\n    this.timezone = timezone;\n  }\n  get typeId(): Type {\n    return Type.Timestamp;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Timestamp';\n  }\n  toString(): string {\n    return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ''}>`;\n  }\n}\n\nexport class TimestampSecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.SECOND, timezone);\n  }\n}\nexport class TimestampMillisecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MILLISECOND, timezone);\n  }\n}\nexport class TimestampMicrosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.MICROSECOND, timezone);\n  }\n}\nexport class TimestampNanosecond extends Timestamp {\n  constructor(timezone = null) {\n    super(TimeUnit.NANOSECOND, timezone);\n  }\n}\n\nconst IntervalUnit = {\n  DAY_TIME: 0,\n  YEAR_MONTH: 1\n};\n\nexport class Interval extends DataType {\n  readonly unit: number;\n  constructor(unit: number) {\n    super();\n    this.unit = unit;\n  }\n  get typeId(): Type {\n    return Type.Interval;\n  }\n  // get ArrayType() {\n  //   return Int32Array;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'Interval';\n  }\n  toString(): string {\n    return `Interval<${IntervalUnit[this.unit]}>`;\n  }\n}\n\nexport class IntervalDayTime extends Interval {\n  constructor() {\n    super(IntervalUnit.DAY_TIME);\n  }\n}\nexport class IntervalYearMonth extends Interval {\n  constructor() {\n    super(IntervalUnit.YEAR_MONTH);\n  }\n}\n\nexport class FixedSizeList extends DataType {\n  readonly listSize: number;\n  readonly children: Field[];\n\n  constructor(listSize: number, child: Field) {\n    super();\n    this.listSize = listSize;\n    this.children = [child];\n  }\n  get typeId(): Type {\n    return Type.FixedSizeList;\n  }\n  get valueType() {\n    return this.children[0].type;\n  }\n  get valueField() {\n    return this.children[0];\n  }\n  // get ArrayType() {\n  //   return this.valueType.ArrayType;\n  // }\n  get [Symbol.toStringTag](): string {\n    return 'FixedSizeList';\n  }\n  toString(): string {\n    return `FixedSizeList[${this.listSize}]<${this.valueType}>`;\n  }\n}\n","// This code is adapted from ArrowJS https://github.com/apache/arrow\n// under Apache license http://www.apache.org/licenses/LICENSE-2.0\n\n/**\n * Main data type enumeration.\n *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64).\n *\n * **Note**: Only enum values 0-17 (NONE through Map) are written to an Arrow\n * IPC payload.\n *\n * The rest of the values are specified here so TypeScript can narrow the type\n * signatures further beyond the base Arrow Types. The Arrow DataTypes include\n * metadata like `bitWidth` that impact the type signatures of the values we\n * accept and return.\n *\n * For example, the `Int8Vector` reads 1-byte numbers from an `Int8Array`, an\n * `Int32Vector` reads a 4-byte number from an `Int32Array`, and an `Int64Vector`\n * reads a pair of 4-byte lo, hi 32-bit integers as a zero-copy slice from the\n * underlying `Int32Array`.\n *\n * Library consumers benefit by knowing the narrowest type, since we can ensure\n * the types across all public methods are propagated, and never bail to `any`.\n * These values are _never_ used at runtime, and they will _never_ be written\n * to the flatbuffers metadata of serialized Arrow IPC payloads.\n */\nexport enum Type {\n  /** The default placeholder type */\n  NONE = 0,\n  /** A NULL type having no physical storage */\n  Null = 1,\n  /** Signed or unsigned 8, 16, 32, or 64-bit little-endian integer */\n  Int = 2,\n  /** 2, 4, or 8-byte floating point value */\n  Float = 3,\n  /** Variable-length bytes (no guarantee of UTF8-ness) */\n  Binary = 4,\n  /** UTF8 variable-length string as List<Char> */\n  Utf8 = 5,\n  /** Boolean as 1 bit, LSB bit-packed ordering */\n  Bool = 6,\n  /** Precision-and-scale-based decimal type. Storage type depends on the parameters. */\n  Decimal = 7,\n  /** int32_t days or int64_t milliseconds since the UNIX epoch */\n  Date = 8,\n  /** Time as signed 32 or 64-bit integer, representing either seconds, milliseconds, microseconds, or nanoseconds since midnight since midnight */\n  Time = 9,\n  /** Exact timestamp encoded with int64 since UNIX epoch (Default unit millisecond) */\n  Timestamp = 10,\n  /** YEAR_MONTH or DAY_TIME interval in SQL style */\n  Interval = 11,\n  /** A list of some logical data type */\n  List = 12,\n  /** Struct of logical types */\n  Struct = 13,\n  /** Union of logical types */\n  Union = 14,\n  /** Fixed-size binary. Each value occupies the same number of bytes */\n  FixedSizeBinary = 15,\n  /** Fixed-size list. Each value occupies the same number of bytes */\n  FixedSizeList = 16,\n  /** Map of named logical types */\n  Map = 17,\n\n  /** Dictionary aka Category type */\n  Dictionary = -1,\n  Int8 = -2,\n  Int16 = -3,\n  Int32 = -4,\n  Int64 = -5,\n  Uint8 = -6,\n  Uint16 = -7,\n  Uint32 = -8,\n  Uint64 = -9,\n  Float16 = -10,\n  Float32 = -11,\n  Float64 = -12,\n  DateDay = -13,\n  DateMillisecond = -14,\n  TimestampSecond = -15,\n  TimestampMillisecond = -16,\n  TimestampMicrosecond = -17,\n  TimestampNanosecond = -18,\n  TimeSecond = -19,\n  TimeMillisecond = -20,\n  TimeMicrosecond = -21,\n  TimeNanosecond = -22,\n  DenseUnion = -23,\n  SparseUnion = -24,\n  IntervalDayTime = -25,\n  IntervalYearMonth = -26\n}\n","// Type deduction\nimport {\n  Schema\n  // Int,\n  // Int8,\n  // Int16,\n  // Int32,\n  // Uint8,\n  // Uint16,\n  // Uint32,\n  // Float32,\n  // Float64\n  // Bool,\n  // Utf8,\n  // TimestampMillisecond,\n  // Null\n} from '../schema';\n\n// const TYPED_ARRAY_TO_TYPE = {\n//   Int8Array: new Int8(),\n//   Int16Array: new Int16(),\n//   Int32Array: new Int32(),\n//   Uint8Array: new Uint8(),\n//   Uint8ClampedArray: new Uint8(),\n//   Uint16Array: new Uint16(),\n//   Uint32Array: new Uint32(),\n//   Float32Array: new Float32(),\n//   Float64Array: new Float64()\n// };\n\n// if (typeof BigInt64Array !== 'undefined') {\n//   TYPED_ARRAY_TO_TYPE.BigInt64Array = new Int64();\n//   TYPED_ARRAY_TO_TYPE.BigUint64Array = new Uint64();\n// }\n\n/**\n * SCHEMA SUPPORT - AUTODEDUCTION\n * @param {*} table\n * @param {*} schema\n * @returns\n */\nexport function deduceTableSchema(table, schema?: Schema) {\n  const deducedSchema = Array.isArray(table)\n    ? deduceSchemaForRowTable(table)\n    : deduceSchemaForColumnarTable(table);\n  // Deduced schema will fill in missing info from partial options.schema, if provided\n  return Object.assign(deducedSchema, schema);\n}\n\nfunction deduceSchemaForColumnarTable(columnarTable) {\n  const schema = {};\n  for (const field in columnarTable) {\n    const column = columnarTable[field];\n    // Check if column is typed, if so we are done\n    if (ArrayBuffer.isView(column)) {\n      schema[field] = column.constructor;\n      // else we need data\n    } else if (column.length) {\n      const value = column[0];\n      schema[field] = deduceTypeFromValue(value);\n      // TODO - support nested schemas?\n    }\n    // else we mark as present but unknow\n    schema[field] = schema[field] || null;\n  }\n  return schema;\n}\n\nfunction deduceSchemaForRowTable(rowTable) {\n  const schema = {};\n  if (rowTable.length) {\n    const row = rowTable[0];\n    // TODO - Could look at additional rows if nulls in first row\n    for (const field in row) {\n      const value = row[field];\n      schema[field] = deduceTypeFromValue(value);\n    }\n  }\n  return schema;\n}\n\nfunction deduceTypeFromValue(value) {\n  if (value instanceof Date) {\n    return Date;\n  } else if (value instanceof Number) {\n    return Float32Array;\n  } else if (typeof value === 'string') {\n    return String;\n  }\n  return null;\n}\n\n/*\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction deduceSchema(rows) {\n  const row = rows[0];\n\n  const schema = {};\n  let i = 0;\n  for (const columnName in row) {\n    const value = row[columnName];\n    switch (typeof value) {\n      case 'number':\n      case 'boolean':\n        // TODO - booleans could be handled differently...\n        schema[columnName] = {name: String(columnName), index: i, type: Float32Array};\n        break;\n\n      case 'object':\n        schema[columnName] = {name: String(columnName), index: i, type: Array};\n        break;\n\n      case 'string':\n      default:\n        schema[columnName] = {name: String(columnName), index: i, type: Array};\n      // We currently only handle numeric rows\n      // TODO we could offer a function to map strings to numbers?\n    }\n    i++;\n  }\n  return schema;\n}\n*/\n","import {Type} from '../schema';\nimport {AnyArray} from '../../types';\n\n/**\n * Gets type information from an Arrow type object or \"mock\" Arrow type object\n * @param arrowTypeLike Arrow Type or type object of similar shape\n */\nexport function getTypeInfo(arrowTypeLike: any): {\n  typeId: Type;\n  ArrayType: AnyArray;\n  typeName: string;\n  typeEnumName?: string;\n  precision?: number;\n} {\n  return {\n    typeId: arrowTypeLike.typeId,\n    ArrayType: arrowTypeLike.ArrayType,\n    typeName: arrowTypeLike.toString(),\n    typeEnumName: getTypeKey(arrowTypeLike.typeId),\n    precision: arrowTypeLike.precision\n  };\n}\n\nlet ReverseType: {[key: string]: string} | null = null;\n\nfunction getTypeKey(typeKey) {\n  if (!ReverseType) {\n    ReverseType = {};\n    for (const key in Type) {\n      ReverseType[Type[key]] = key;\n    }\n  }\n\n  return ReverseType[typeKey];\n}\n","import type {TypedArray} from '../../types';\nimport {DataType, Float32, Float64, Int16, Int32, Int8, Uint16, Uint32, Uint8} from '../schema';\n\nexport function getArrowTypeFromTypedArray(array: TypedArray): DataType {\n  switch (array.constructor) {\n    case Int8Array:\n      return new Int8();\n    case Uint8Array:\n      return new Uint8();\n    case Int16Array:\n      return new Int16();\n    case Uint16Array:\n      return new Uint16();\n    case Int32Array:\n      return new Int32();\n    case Uint32Array:\n      return new Uint32();\n    case Float32Array:\n      return new Float32();\n    case Float64Array:\n      return new Float64();\n    default:\n      throw new Error('array type not supported');\n  }\n}\n","// From https://github.com/rauschma/async-iter-demo/tree/master/src under MIT license\n// http://2ality.com/2016/10/asynchronous-iteration.html\n\nclass ArrayQueue<T> extends Array<T> {\n  enqueue(value) {\n    // Add at the end\n    return this.push(value);\n  }\n  dequeue(): T {\n    // Remove first element\n    return this.shift() as T;\n  }\n}\n\nexport default class AsyncQueue<T> {\n  private _values: ArrayQueue<T>;\n  private _settlers: ArrayQueue<{resolve; reject}>;\n  private _closed: boolean;\n\n  constructor() {\n    // enqueues > dequeues\n    this._values = new ArrayQueue<T>();\n    // dequeues > enqueues\n    this._settlers = new ArrayQueue<{resolve; reject}>();\n    this._closed = false;\n  }\n\n  close(): void {\n    while (this._settlers.length > 0) {\n      this._settlers.dequeue().resolve({done: true});\n    }\n    this._closed = true;\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<T> {\n    return this;\n  }\n\n  enqueue(value: T | Error): void {\n    if (this._closed) {\n      throw new Error('Closed');\n    }\n\n    if (this._settlers.length > 0) {\n      if (this._values.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      const settler = this._settlers.dequeue();\n      if (value instanceof Error) {\n        settler.reject(value);\n      } else {\n        settler.resolve({value});\n      }\n    } else {\n      this._values.enqueue(value);\n    }\n  }\n\n  /**\n   * @returns a Promise for an IteratorResult\n   */\n  next(): Promise<any> {\n    if (this._values.length > 0) {\n      const value = this._values.dequeue();\n      if (value instanceof Error) {\n        return Promise.reject(value);\n      }\n      return Promise.resolve({value});\n    }\n\n    if (this._closed) {\n      if (this._settlers.length > 0) {\n        throw new Error('Illegal internal state');\n      }\n      return Promise.resolve({done: true});\n    }\n    // Wait for new values to be enqueued\n    return new Promise((resolve, reject) => {\n      this._settlers.enqueue({resolve, reject});\n    });\n  }\n}\n\n/**\n * @returns a Promise for an Array with the elements in `asyncIterable`\n */\nexport async function takeAsync(\n  asyncIterable: AsyncIterable<any>,\n  count = Infinity\n): Promise<any[]> {\n  const result: Array<any> = [];\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  while (result.length < count) {\n    const {value, done} = await iterator.next();\n    if (done) {\n      break;\n    }\n    result.push(value);\n  }\n  return result;\n}\n","import {Schema, Field, FixedSizeList, getArrowTypeFromTypedArray} from '@loaders.gl/schema';\n\nimport {MeshAttribute, DracoAttribute, DracoLoaderData, DracoMetadataEntry} from '../draco-types';\n\nexport function makeSchemaFromAttributes(\n  attributes: {[attributeName: string]: MeshAttribute},\n  loaderData: DracoLoaderData,\n  indices?: MeshAttribute\n): Schema {\n  const metadataMap = makeMetadata(loaderData.metadata);\n  const fields: Field[] = [];\n  const namedLoaderDataAttributes = transformAttributesLoaderData(loaderData.attributes);\n  for (const attributeName in attributes) {\n    const attribute = attributes[attributeName];\n    const field = getArrowFieldFromAttribute(\n      attributeName,\n      attribute,\n      namedLoaderDataAttributes[attributeName]\n    );\n    fields.push(field);\n  }\n  if (indices) {\n    const indicesField = getArrowFieldFromAttribute('indices', indices);\n    fields.push(indicesField);\n  }\n  return new Schema(fields, metadataMap);\n}\n\nfunction transformAttributesLoaderData(loaderData: {[key: number]: DracoAttribute}): {\n  [attributeName: string]: DracoAttribute;\n} {\n  const result: {[attributeName: string]: DracoAttribute} = {};\n  for (const key in loaderData) {\n    const dracoAttribute = loaderData[key];\n    result[dracoAttribute.name || 'undefined'] = dracoAttribute;\n  }\n  return result;\n}\n\nfunction getArrowFieldFromAttribute(\n  attributeName: string,\n  attribute: MeshAttribute,\n  loaderData?: DracoAttribute\n): Field {\n  const metadataMap = loaderData ? makeMetadata(loaderData.metadata) : undefined;\n  const type = getArrowTypeFromTypedArray(attribute.value);\n  return new Field(\n    attributeName,\n    new FixedSizeList(attribute.size, new Field('value', type)),\n    false,\n    metadataMap\n  );\n}\n\nfunction makeMetadata(metadata: {[key: string]: DracoMetadataEntry}): Map<string, string> {\n  const metadataMap = new Map();\n  for (const key in metadata) {\n    metadataMap.set(`${key}.string`, JSON.stringify(metadata[key]));\n  }\n\n  return metadataMap;\n}\n","import type {WorkerObject} from './types';\nimport {VERSION} from './lib/env-utils/version';\n\n// TYPES\nexport type {\n  WorkerObject,\n  WorkerOptions,\n  // Protocol\n  WorkerMessage,\n  WorkerMessageType,\n  WorkerMessageData,\n  WorkerMessagePayload\n} from './types';\n\n// GENERAL UTILS\nexport {assert} from './lib/env-utils/assert';\nexport {isBrowser, isWorker} from './lib/env-utils/globals';\n\n// WORKER UTILS - TYPES\nexport {default as WorkerJob} from './lib/worker-farm/worker-job';\nexport {default as WorkerThread} from './lib/worker-farm/worker-thread';\n\n// WORKER FARMS\nexport {default as WorkerFarm} from './lib/worker-farm/worker-farm';\nexport {default as WorkerPool} from './lib/worker-farm/worker-pool';\nexport {default as WorkerBody} from './lib/worker-farm/worker-body';\n\nexport {processOnWorker, canProcessOnWorker} from './lib/worker-api/process-on-worker';\nexport {createWorker} from './lib/worker-api/create-worker';\n\n// WORKER UTILS - EXPORTS\nexport {getWorkerURL} from './lib/worker-api/get-worker-url';\nexport {validateWorkerVersion} from './lib/worker-api/validate-worker-version';\nexport {getTransferList} from './lib/worker-utils/get-transfer-list';\n\n// LIBRARY UTILS\nexport {getLibraryUrl, loadLibrary} from './lib/library-utils/library-utils';\n\n// PARSER UTILS\nexport {default as AsyncQueue} from './lib/async-queue/async-queue';\n\n// PROCESS UTILS\nexport {default as ChildProcessProxy} from './lib/process-utils/child-process-proxy';\n\n// WORKER OBJECTS\n\n/** A null worker to test that worker processing is functional */\nexport const NullWorker: WorkerObject = {\n  id: 'null',\n  name: 'null',\n  module: 'worker-utils',\n  version: VERSION,\n  options: {\n    null: {}\n  }\n};\n","import {assert} from '../env-utils/assert';\n\nconst workerURLCache = new Map();\n\n/**\n * Creates a loadable URL from worker source or URL\n * that can be used to create `Worker` instances.\n * Due to CORS issues it may be necessary to wrap a URL in a small importScripts\n * @param props\n * @param props.source Worker source\n * @param props.url Worker URL\n * @returns loadable url\n */\nexport function getLoadableWorkerURL(props: {source?: string; url?: string}) {\n  assert((props.source && !props.url) || (!props.source && props.url)); // Either source or url must be defined\n\n  let workerURL = workerURLCache.get(props.source || props.url);\n  if (!workerURL) {\n    // Differentiate worker urls from worker source code\n    if (props.url) {\n      workerURL = getLoadableWorkerURLFromURL(props.url);\n      workerURLCache.set(props.url, workerURL);\n    }\n\n    if (props.source) {\n      workerURL = getLoadableWorkerURLFromSource(props.source);\n      workerURLCache.set(props.source, workerURL);\n    }\n  }\n\n  assert(workerURL);\n  return workerURL;\n}\n\n/**\n * Build a loadable worker URL from worker URL\n * @param url\n * @returns loadable URL\n */\nfunction getLoadableWorkerURLFromURL(url: string): string {\n  // A local script url, we can use it to initialize a Worker directly\n  if (!url.startsWith('http')) {\n    return url;\n  }\n\n  // A remote script, we need to use `importScripts` to load from different origin\n  const workerSource = buildScriptSource(url);\n  return getLoadableWorkerURLFromSource(workerSource);\n}\n\n/**\n * Build a loadable worker URL from worker source\n * @param workerSource\n * @returns loadable url\n */\nfunction getLoadableWorkerURLFromSource(workerSource: string): string {\n  // NOTE: webworkify was previously used\n  // const blob = webworkify(workerSource, {bare: true});\n  const blob = new Blob([workerSource], {type: 'application/javascript'});\n  return URL.createObjectURL(blob);\n}\n\n/**\n * Per spec, worker cannot be initialized with a script from a different origin\n * However a local worker script can still import scripts from other origins,\n * so we simply build a wrapper script.\n *\n * @param workerUrl\n * @returns source\n */\nfunction buildScriptSource(workerUrl: string): string {\n  return `\\\ntry {\n  importScripts('${workerUrl}');\n} catch (error) {\n  console.error(error);\n  throw error;\n}`;\n}\n","import type {\n  WorkerObject,\n  WorkerOptions,\n  WorkerContext,\n  WorkerMessageType,\n  WorkerMessagePayload\n} from '../../types';\nimport type WorkerJob from '../worker-farm/worker-job';\nimport WorkerFarm from '../worker-farm/worker-farm';\nimport {removeNontransferableOptions} from '../worker-utils/remove-nontransferable-options';\nimport {getWorkerURL, getWorkerName} from './get-worker-url';\n\ntype ProcessOnWorkerOptions = WorkerOptions & {\n  jobName?: string;\n  [key: string]: any;\n};\n\n/**\n * Determines if we can parse with worker\n * @param loader\n * @param data\n * @param options\n */\nexport function canProcessOnWorker(worker: WorkerObject, options?: WorkerOptions) {\n  if (!WorkerFarm.isSupported()) {\n    return false;\n  }\n\n  return worker.worker && options?.worker;\n}\n\n/**\n * This function expects that the worker thread sends certain messages,\n * Creating such a worker can be automated if the worker is wrapper by a call to\n * createWorker in @loaders.gl/worker-utils.\n */\nexport async function processOnWorker(\n  worker: WorkerObject,\n  data: any,\n  options: ProcessOnWorkerOptions = {},\n  context: WorkerContext = {}\n): Promise<any> {\n  const name = getWorkerName(worker);\n  const url = getWorkerURL(worker, options);\n\n  const workerFarm = WorkerFarm.getWorkerFarm(options);\n  const workerPool = workerFarm.getWorkerPool({name, url});\n\n  const jobName = options.jobName || worker.name;\n  const job = await workerPool.startJob(\n    jobName,\n    // eslint-disable-next-line\n    onMessage.bind(null, context)\n  );\n\n  // Kick off the processing in the worker\n  const transferableOptions = removeNontransferableOptions(options);\n  job.postMessage('process', {input: data, options: transferableOptions});\n\n  const result = await job.result;\n  return result.result;\n}\n\n/**\n * Job completes when we receive the result\n * @param job\n * @param message\n */\nasync function onMessage(\n  context: WorkerContext,\n  job: WorkerJob,\n  type: WorkerMessageType,\n  payload: WorkerMessagePayload\n) {\n  switch (type) {\n    case 'done':\n      // Worker is done\n      job.done(payload);\n      break;\n\n    case 'error':\n      // Worker encountered an error\n      job.error(payload.error);\n      break;\n\n    case 'process':\n      // Worker is asking for us (main thread) to process something\n      const {id, input, options} = payload;\n      try {\n        if (!context.process) {\n          job.postMessage('error', {id, error: 'Worker not set up to process on main thread'});\n          return;\n        }\n        const result = await context.process(input, options);\n        job.postMessage('done', {id, result});\n      } catch (error) {\n        const message = error instanceof Error ? error.message : 'unknown error';\n        job.postMessage('error', {id, error: message});\n      }\n      break;\n\n    default:\n      // eslint-disable-next-line\n      console.warn(`process-on-worker: unknown message ${type}`);\n  }\n}\n","/**\n * Safely stringify JSON (drop non serializable values like functions and regexps)\n * @param value\n */\nexport function removeNontransferableOptions(object: object): object {\n  // options.log object contains functions which cannot be transferred\n  // TODO - decide how to handle logging on workers\n  // TODO - warn if options stringification is long\n  return JSON.parse(stringifyJSON(object));\n}\n\nfunction stringifyJSON(v) {\n  const cache = new Set();\n  return JSON.stringify(v, (key, value) => {\n    if (typeof value === 'object' && value !== null) {\n      if (cache.has(value)) {\n        // Circular reference found\n        try {\n          // If this value does not reference a parent it can be deduped\n          return JSON.parse(JSON.stringify(value));\n        } catch (err) {\n          // discard key if value cannot be deduped\n          return undefined;\n        }\n      }\n      // Store value in our set\n      cache.add(value);\n    }\n    return value;\n  });\n}\n","import type {\n  WorkerMessageType,\n  WorkerMessagePayload,\n  WorkerContext,\n  Process,\n  ProcessInBatches\n} from '../../types';\nimport AsyncQueue from '../async-queue/async-queue';\nimport WorkerBody from '../worker-farm/worker-body';\n// import {validateWorkerVersion} from './validate-worker-version';\n\n/** Counter for jobs */\nlet requestId = 0;\nlet inputBatches;\nlet options;\n\nexport type ProcessOnMainThread = (data: any, options?: {[key: string]: any}, context?) => any;\n\n/**\n * Set up a WebWorkerGlobalScope to talk with the main thread\n */\nexport function createWorker(process: Process, processInBatches?: ProcessInBatches): void {\n  // Check that we are actually in a worker thread\n  if (typeof self === 'undefined') {\n    return;\n  }\n\n  const context: WorkerContext = {\n    process: processOnMainThread\n  };\n\n  // eslint-disable-next-line complexity\n  WorkerBody.onmessage = async (type: WorkerMessageType, payload: WorkerMessagePayload) => {\n    try {\n      switch (type) {\n        case 'process':\n          if (!process) {\n            throw new Error('Worker does not support atomic processing');\n          }\n          const result = await process(payload.input, payload.options || {}, context);\n          WorkerBody.postMessage('done', {result});\n          break;\n\n        case 'process-in-batches':\n          if (!processInBatches) {\n            throw new Error('Worker does not support batched processing');\n          }\n          inputBatches = new AsyncQueue();\n          options = payload.options || {};\n          const resultIterator = processInBatches(inputBatches, options, context?.processInBatches);\n          for await (const batch of resultIterator) {\n            WorkerBody.postMessage('output-batch', {result: batch});\n          }\n          WorkerBody.postMessage('done', {});\n          break;\n\n        case 'input-batch':\n          inputBatches.push(payload.input);\n          break;\n\n        case 'input-done':\n          inputBatches.close();\n          break;\n\n        default:\n      }\n    } catch (error) {\n      const message = error instanceof Error ? error.message : '';\n      WorkerBody.postMessage('error', {error: message});\n    }\n  };\n}\n\nfunction processOnMainThread(arrayBuffer, options = {}) {\n  return new Promise((resolve, reject) => {\n    const id = requestId++;\n\n    /**\n     */\n    const onMessage = (type, payload) => {\n      if (payload.id !== id) {\n        // not ours\n        return;\n      }\n\n      switch (type) {\n        case 'done':\n          WorkerBody.removeEventListener(onMessage);\n          resolve(payload.result);\n          break;\n\n        case 'error':\n          WorkerBody.removeEventListener(onMessage);\n          reject(payload.error);\n          break;\n\n        default:\n        // ignore\n      }\n    };\n\n    WorkerBody.addEventListener(onMessage);\n\n    // Ask the main thread to decode data\n    const payload = {id, input: arrayBuffer, options};\n    WorkerBody.postMessage('process', payload);\n  });\n}\n","import type {WorkerObject} from '../../types';\nimport {assert} from '../env-utils/assert';\nimport {VERSION} from '../env-utils/version';\n\n/**\n * Check if worker is compatible with this library version\n * @param worker\n * @param libVersion\n * @returns `true` if the two versions are compatible\n */\nexport function validateWorkerVersion(\n  worker: WorkerObject,\n  coreVersion: string = VERSION\n): boolean {\n  assert(worker, 'no worker provided');\n\n  const workerVersion = worker.version;\n  if (!coreVersion || !workerVersion) {\n    return false;\n  }\n\n  // TODO enable when fix the __version__ injection\n  // const coreVersions = parseVersion(coreVersion);\n  // const workerVersions = parseVersion(workerVersion);\n  // assert(\n  //   coreVersion.major === workerVersion.major && coreVersion.minor <= workerVersion.minor,\n  //   `worker: ${worker.name} is not compatible. ${coreVersion.major}.${\n  //     coreVersion.minor\n  //   }+ is required.`\n  // );\n\n  return true;\n}\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction parseVersion(version) {\n  const parts = version.split('.').map(Number);\n  return {major: parts[0], minor: parts[1]};\n}\n","/* global importScripts */\nimport {global, isBrowser, isWorker} from '../env-utils/globals';\nimport * as node from '../node/require-utils.node';\nimport {assert} from '../env-utils/assert';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\n// TODO - unpkg.com doesn't seem to have a `latest` specifier for alpha releases...\nconst LATEST = 'beta';\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : LATEST;\n\nconst loadLibraryPromises = {}; // promises\n\n/**\n * Dynamically loads a library (\"module\")\n *\n * - wasm library: Array buffer is returned\n * - js library: Parse JS is returned\n *\n * Method depends on environment\n * - browser - script element is created and installed on document\n * - worker - eval is called on global context\n * - node - file is required\n *\n * @param libraryUrl\n * @param moduleName\n * @param options\n */\nexport async function loadLibrary(\n  libraryUrl: string,\n  moduleName: string | null = null,\n  options: object = {}\n): Promise<any> {\n  if (moduleName) {\n    libraryUrl = getLibraryUrl(libraryUrl, moduleName, options);\n  }\n\n  // Ensure libraries are only loaded once\n  loadLibraryPromises[libraryUrl] =\n    loadLibraryPromises[libraryUrl] || loadLibraryFromFile(libraryUrl);\n  return await loadLibraryPromises[libraryUrl];\n}\n\n// TODO - sort out how to resolve paths for main/worker and dev/prod\nexport function getLibraryUrl(library, moduleName?: string, options?): string {\n  // Check if already a URL\n  if (library.startsWith('http')) {\n    return library;\n  }\n\n  // Allow application to import and supply libraries through `options.modules`\n  const modules = options.modules || {};\n  if (modules[library]) {\n    return modules[library];\n  }\n\n  // Load from local files, not from CDN scripts in Node.js\n  // TODO - needs to locate the modules directory when installed!\n  if (!isBrowser) {\n    return `modules/${moduleName}/dist/libs/${library}`;\n  }\n\n  // In browser, load from external scripts\n  if (options.CDN) {\n    assert(options.CDN.startsWith('http'));\n    return `${options.CDN}/${moduleName}@${VERSION}/dist/libs/${library}`;\n  }\n\n  // TODO - loading inside workers requires paths relative to worker script location...\n  if (isWorker) {\n    return `../src/libs/${library}`;\n  }\n\n  return `modules/${moduleName}/src/libs/${library}`;\n}\n\nasync function loadLibraryFromFile(libraryUrl) {\n  if (libraryUrl.endsWith('wasm')) {\n    const response = await fetch(libraryUrl);\n    return await response.arrayBuffer();\n  }\n\n  if (!isBrowser) {\n    return node.requireFromFile && (await node.requireFromFile(libraryUrl));\n  }\n  if (isWorker) {\n    return importScripts(libraryUrl);\n  }\n  // TODO - fix - should be more secure than string parsing since observes CORS\n  // if (isBrowser) {\n  //   return await loadScriptFromFile(libraryUrl);\n  // }\n\n  const response = await fetch(libraryUrl);\n  const scriptSource = await response.text();\n  return loadLibraryFromString(scriptSource, libraryUrl);\n}\n\n/*\nasync function loadScriptFromFile(libraryUrl) {\n  const script = document.createElement('script');\n  script.src = libraryUrl;\n  return await new Promise((resolve, reject) => {\n    script.onload = data => {\n      resolve(data);\n    };\n    script.onerror = reject;\n  });\n}\n*/\n\n// TODO - Needs security audit...\n//  - Raw eval call\n//  - Potentially bypasses CORS\n// Upside is that this separates fetching and parsing\n// we could create a`LibraryLoader` or`ModuleLoader`\nfunction loadLibraryFromString(scriptSource, id) {\n  if (!isBrowser) {\n    return node.requireFromString && node.requireFromString(scriptSource, id);\n  }\n\n  if (isWorker) {\n    // Use lvalue trick to make eval run in global scope\n    eval.call(global, scriptSource); // eslint-disable-line no-eval\n    // https://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript\n    // http://perfectionkills.com/global-eval-what-are-the-options/\n    return null;\n  }\n\n  const script = document.createElement('script');\n  script.id = id;\n  // most browsers like a separate text node but some throw an error. The second method covers those.\n  try {\n    script.appendChild(document.createTextNode(scriptSource));\n  } catch (e) {\n    script.text = scriptSource;\n  }\n  document.body.appendChild(script);\n  return null;\n}\n\n// TODO - technique for module injection into worker, from THREE.DracoLoader...\n/*\nfunction combineWorkerWithLibrary(worker, jsContent) {\n  var fn = wWorker.toString();\n  var body = [\n    '// injected',\n    jsContent,\n    '',\n    '// worker',\n    fn.substring(fn.indexOf('{') + 1, fn.lastIndexOf('}'))\n  ].join('\\n');\n  this.workerSourceURL = URL.createObjectURL(new Blob([body]));\n}\n*/\n","/* eslint-disable no-console */\nimport {spawn, ChildProcess, SpawnOptionsWithoutStdio} from 'child_process';\nimport {getAvailablePort} from './process-utils';\n\nexport type ChildProcessProxyProps = {\n  command: string;\n  arguments: string[];\n  /** Whether to add a port specified arg */\n  portArg?: string;\n  /** Base port number */\n  port?: number;\n  /** Whether to search for an available port if the base port is occupied */\n  autoPort?: boolean;\n  /** Number of milliseconds to wait until concluding success */\n  /** wait: 0 - infinity */\n  wait?: number;\n  /** Options passed on to Node'.js `spawn` */\n  spawn?: SpawnOptionsWithoutStdio;\n  /** Callback when the  */\n  onStart?: (proxy: ChildProcessProxy) => void;\n  onSuccess?: (proxy: ChildProcessProxy) => void;\n};\n\nconst DEFAULT_PROPS: ChildProcessProxyProps = {\n  command: '',\n  arguments: [],\n  port: 5000,\n  autoPort: true,\n  wait: 2000,\n  onSuccess: (processProxy) => {\n    console.log(`Started ${processProxy.props.command}`);\n  }\n};\n\n/**\n * Manager for a Node.js child process\n * Prepares arguments, starts, stops and tracks output\n */\nexport default class ChildProcessProxy {\n  id: string;\n  props: ChildProcessProxyProps = {...DEFAULT_PROPS};\n  private childProcess: ChildProcess | null = null;\n  private port: number = 0;\n  private successTimer?;\n\n  // constructor(props?: {id?: string});\n  constructor({id = 'browser-driver'} = {}) {\n    this.id = id;\n  }\n\n  /** Starts a child process with the provided props */\n  async start(props: ChildProcessProxyProps): Promise<object> {\n    props = {...DEFAULT_PROPS, ...props};\n    this.props = props;\n\n    const args = [...props.arguments];\n\n    // If portArg is set, we can look up an available port\n    this.port = Number(props.port);\n    if (props.portArg) {\n      if (props.autoPort) {\n        this.port = await getAvailablePort(props.port);\n      }\n      args.push(props.portArg, String(this.port));\n    }\n\n    return await new Promise((resolve, reject) => {\n      try {\n        this._setTimeout(() => {\n          if (props.onSuccess) {\n            props.onSuccess(this);\n          }\n          resolve({});\n        });\n\n        console.log(`Spawning ${props.command} ${props.arguments.join(' ')}`);\n        const childProcess = spawn(props.command, args, props.spawn);\n        this.childProcess = childProcess;\n\n        childProcess.stdout.on('data', (data) => {\n          console.log(data.toString());\n        });\n        // TODO - add option regarding whether stderr should be treated as data\n        childProcess.stderr.on('data', (data) => {\n          console.log(`Child process wrote to stderr: \"${data}\".`);\n          this._clearTimeout();\n          reject(new Error(data));\n        });\n        childProcess.on('error', (error) => {\n          console.log(`Child process errored with ${error}`);\n          this._clearTimeout();\n          reject(error);\n        });\n        childProcess.on('close', (code) => {\n          console.log(`Child process exited with ${code}`);\n          this.childProcess = null;\n          this._clearTimeout();\n          resolve({});\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  /** Stops a running child process */\n  async stop(): Promise<void> {\n    if (this.childProcess) {\n      this.childProcess.kill();\n      this.childProcess = null;\n    }\n  }\n\n  /** Exits this process */\n  async exit(statusCode: number = 0): Promise<void> {\n    try {\n      await this.stop();\n      // eslint-disable-next-line no-process-exit\n      process.exit(statusCode);\n    } catch (error) {\n      console.error(error.message || error);\n      // eslint-disable-next-line no-process-exit\n      process.exit(1);\n    }\n  }\n\n  _setTimeout(callback: (...args: any[]) => void) {\n    if (Number(this.props.wait) > 0) {\n      this.successTimer = setTimeout(callback, this.props.wait);\n    }\n  }\n\n  _clearTimeout() {\n    if (this.successTimer) {\n      clearTimeout(this.successTimer);\n    }\n  }\n}\n","import ChildProcess from 'child_process';\n\n// Get an available port\n// Works on Unix systems\nexport function getAvailablePort(defaultPort: number = 3000): Promise<number> {\n  return new Promise((resolve) => {\n    // Get a list of all ports in use\n    ChildProcess.exec('lsof -i -P -n | grep LISTEN', (error, stdout) => {\n      if (error) {\n        // likely no permission, e.g. CI\n        resolve(defaultPort);\n        return;\n      }\n\n      const portsInUse: number[] = [];\n      const regex = /:(\\d+) \\(LISTEN\\)/;\n      stdout.split('\\n').forEach((line) => {\n        const match = regex.exec(line);\n        if (match) {\n          portsInUse.push(Number(match[1]));\n        }\n      });\n      let port = defaultPort;\n      while (portsInUse.includes(port)) {\n        port++;\n      }\n      resolve(port);\n    });\n  });\n}\n","import type {Writer} from '@loaders.gl/loader-utils';\nimport type {DracoMeshData} from './lib/draco-types';\nimport type {DracoBuildOptions} from './lib/draco-builder';\nimport DRACOBuilder from './lib/draco-builder';\nimport {loadDracoEncoderModule} from './lib/draco-module-loader';\nimport {VERSION} from './lib/utils/version';\n\nexport type DracoWriterOptions = DracoBuildOptions & {};\n\nconst DEFAULT_DRACO_OPTIONS = {\n  pointcloud: false, // Set to true if pointcloud (mode: 0, no indices)\n  attributeNameEntry: 'name'\n  // Draco Compression Parameters\n  // method: 'MESH_EDGEBREAKER_ENCODING',\n  // speed: [5, 5],\n  // quantization: {\n  //   POSITION: 10\n  // }\n};\n\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter: Writer = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: DEFAULT_DRACO_OPTIONS\n  }\n};\n\nasync function encode(\n  data: DracoMeshData,\n  options: {draco?: DracoWriterOptions} = {}\n): Promise<ArrayBuffer> {\n  // Dynamically load draco\n  const {draco} = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}\n","/* eslint-disable camelcase */\n// This code is inspired by example code in the DRACO repository\nimport type {\n  Draco3D,\n  DracoInt8Array,\n  Encoder,\n  Mesh,\n  MeshBuilder,\n  PointCloud,\n  Metadata,\n  MetadataBuilder,\n  draco_GeometryAttribute_Type\n} from '../draco3d/draco3d-types';\n\nimport type {TypedArray, DracoMeshData} from './draco-types';\n\nexport type DracoBuildOptions = {\n  pointcloud?: boolean;\n  metadata?: {[key: string]: string};\n  attributesMetadata?: {};\n  log?: any;\n\n  // draco encoding options\n  speed?: [number, number];\n  method?: string;\n  quantization?: {[attributeName: string]: number};\n};\n\n// Native Draco attribute names to GLTF attribute names.\nconst GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP = {\n  POSITION: 'POSITION',\n  NORMAL: 'NORMAL',\n  COLOR_0: 'COLOR',\n  TEXCOORD_0: 'TEX_COORD'\n};\n\nconst noop = () => {};\n\nexport default class DracoBuilder {\n  draco: Draco3D;\n  dracoEncoder: Encoder;\n  dracoMeshBuilder: MeshBuilder;\n  dracoMetadataBuilder: MetadataBuilder;\n  log: any;\n\n  // draco - the draco decoder, either import `draco3d` or load dynamically\n  constructor(draco: Draco3D) {\n    this.draco = draco;\n    this.dracoEncoder = new this.draco.Encoder();\n    this.dracoMeshBuilder = new this.draco.MeshBuilder();\n    this.dracoMetadataBuilder = new this.draco.MetadataBuilder();\n  }\n\n  destroy(): void {\n    this.destroyEncodedObject(this.dracoMeshBuilder);\n    this.destroyEncodedObject(this.dracoEncoder);\n    this.destroyEncodedObject(this.dracoMetadataBuilder);\n    // @ts-ignore\n    this.dracoMeshBuilder = null;\n    // @ts-ignore\n    this.dracoEncoder = null;\n    // @ts-ignore\n    this.draco = null;\n  }\n\n  // TBD - when does this need to be called?\n  destroyEncodedObject(object): void {\n    if (object) {\n      this.draco.destroy(object);\n    }\n  }\n\n  /**\n   * Encode mesh or point cloud\n   * @param mesh =({})\n   * @param options\n   */\n  encodeSync(mesh: DracoMeshData, options: DracoBuildOptions = {}): ArrayBuffer {\n    this.log = noop; // TODO\n    this._setOptions(options);\n\n    return options.pointcloud\n      ? this._encodePointCloud(mesh, options)\n      : this._encodeMesh(mesh, options);\n  }\n\n  // PRIVATE\n\n  _getAttributesFromMesh(mesh: DracoMeshData) {\n    // TODO - Change the encodePointCloud interface instead?\n    const attributes = {...mesh, ...mesh.attributes};\n    // Fold indices into the attributes\n    if (mesh.indices) {\n      attributes.indices = mesh.indices;\n    }\n    return attributes;\n  }\n\n  _encodePointCloud(pointcloud: DracoMeshData, options: DracoBuildOptions): ArrayBuffer {\n    const dracoPointCloud = new this.draco.PointCloud();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoPointCloud, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(pointcloud);\n\n    // Build a `DracoPointCloud` from the input data\n    this._createDracoPointCloud(dracoPointCloud, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodePointCloudToDracoBuffer(\n        dracoPointCloud,\n        false,\n        dracoData\n      );\n\n      if (!(encodedLen > 0)) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoPointCloud.num_points()} points\n        with ${dracoPointCloud.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoPointCloud);\n    }\n  }\n\n  _encodeMesh(mesh: DracoMeshData, options: DracoBuildOptions): ArrayBuffer {\n    const dracoMesh = new this.draco.Mesh();\n\n    if (options.metadata) {\n      this._addGeometryMetadata(dracoMesh, options.metadata);\n    }\n\n    const attributes = this._getAttributesFromMesh(mesh);\n\n    // Build a `DracoMeshData` from the input data\n    this._createDracoMesh(dracoMesh, attributes, options);\n\n    const dracoData = new this.draco.DracoInt8Array();\n\n    try {\n      const encodedLen = this.dracoEncoder.EncodeMeshToDracoBuffer(dracoMesh, dracoData);\n      if (encodedLen <= 0) {\n        throw new Error('Draco encoding failed.');\n      }\n\n      this.log(`DRACO encoded ${dracoMesh.num_points()} points\n        with ${dracoMesh.num_attributes()} attributes into ${encodedLen} bytes`);\n\n      return dracoInt8ArrayToArrayBuffer(dracoData);\n    } finally {\n      this.destroyEncodedObject(dracoData);\n      this.destroyEncodedObject(dracoMesh);\n    }\n  }\n\n  /**\n   * Set encoding options.\n   * @param {{speed?: any; method?: any; quantization?: any;}} options\n   */\n  _setOptions(options: DracoBuildOptions): void {\n    if ('speed' in options) {\n      // @ts-ignore\n      this.dracoEncoder.SetSpeedOptions(...options.speed);\n    }\n    if ('method' in options) {\n      const dracoMethod = this.draco[options.method || 'MESH_SEQUENTIAL_ENCODING'];\n      // assert(dracoMethod)\n      this.dracoEncoder.SetEncodingMethod(dracoMethod);\n    }\n    if ('quantization' in options) {\n      for (const attribute in options.quantization) {\n        const bits = options.quantization[attribute];\n        const dracoPosition = this.draco[attribute];\n        this.dracoEncoder.SetAttributeQuantization(dracoPosition, bits);\n      }\n    }\n  }\n\n  /**\n   * @param {Mesh} dracoMesh\n   * @param {object} attributes\n   * @returns {Mesh}\n   */\n  _createDracoMesh(dracoMesh: Mesh, attributes, options: DracoBuildOptions): Mesh {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(dracoMesh, attributeName, attribute, vertexCount);\n\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoMesh, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoMesh);\n      throw error;\n    }\n\n    return dracoMesh;\n  }\n\n  /**\n   * @param {} dracoPointCloud\n   * @param {object} attributes\n   */\n  _createDracoPointCloud(\n    dracoPointCloud: PointCloud,\n    attributes: object,\n    options: DracoBuildOptions\n  ): PointCloud {\n    const optionalMetadata = options.attributesMetadata || {};\n\n    try {\n      const positions = this._getPositionAttribute(attributes);\n      if (!positions) {\n        throw new Error('positions');\n      }\n      const vertexCount = positions.length / 3;\n\n      for (let attributeName in attributes) {\n        const attribute = attributes[attributeName];\n        attributeName = GLTF_TO_DRACO_ATTRIBUTE_NAME_MAP[attributeName] || attributeName;\n        const uniqueId = this._addAttributeToMesh(\n          dracoPointCloud,\n          attributeName,\n          attribute,\n          vertexCount\n        );\n        if (uniqueId !== -1) {\n          this._addAttributeMetadata(dracoPointCloud, uniqueId, {\n            name: attributeName,\n            ...(optionalMetadata[attributeName] || {})\n          });\n        }\n      }\n    } catch (error) {\n      this.destroyEncodedObject(dracoPointCloud);\n      throw error;\n    }\n\n    return dracoPointCloud;\n  }\n\n  /**\n   * @param mesh\n   * @param attributeName\n   * @param attribute\n   * @param vertexCount\n   */\n  _addAttributeToMesh(\n    mesh: PointCloud,\n    attributeName: string,\n    attribute: TypedArray,\n    vertexCount: number\n  ) {\n    if (!ArrayBuffer.isView(attribute)) {\n      return -1;\n    }\n\n    const type = this._getDracoAttributeType(attributeName);\n    // @ts-ignore TODO/fix types\n    const size = attribute.length / vertexCount;\n\n    if (type === 'indices') {\n      // @ts-ignore TODO/fix types\n      const numFaces = attribute.length / 3;\n      this.log(`Adding attribute ${attributeName}, size ${numFaces}`);\n\n      // @ts-ignore assumes mesh is a Mesh, not a point cloud\n      this.dracoMeshBuilder.AddFacesToMesh(mesh, numFaces, attribute);\n      return -1;\n    }\n\n    this.log(`Adding attribute ${attributeName}, size ${size}`);\n\n    const builder = this.dracoMeshBuilder;\n    const {buffer} = attribute;\n\n    switch (attribute.constructor) {\n      case Int8Array:\n        return builder.AddInt8Attribute(mesh, type, vertexCount, size, new Int8Array(buffer));\n\n      case Int16Array:\n        return builder.AddInt16Attribute(mesh, type, vertexCount, size, new Int16Array(buffer));\n\n      case Int32Array:\n        return builder.AddInt32Attribute(mesh, type, vertexCount, size, new Int32Array(buffer));\n      case Uint8Array:\n      case Uint8ClampedArray:\n        return builder.AddUInt8Attribute(mesh, type, vertexCount, size, new Uint8Array(buffer));\n\n      case Uint16Array:\n        return builder.AddUInt16Attribute(mesh, type, vertexCount, size, new Uint16Array(buffer));\n\n      case Uint32Array:\n        return builder.AddUInt32Attribute(mesh, type, vertexCount, size, new Uint32Array(buffer));\n\n      case Float32Array:\n      default:\n        return builder.AddFloatAttribute(mesh, type, vertexCount, size, new Float32Array(buffer));\n    }\n  }\n\n  /**\n   * DRACO can compress attributes of know type better\n   * TODO - expose an attribute type map?\n   * @param attributeName\n   */\n  _getDracoAttributeType(attributeName: string): draco_GeometryAttribute_Type | 'indices' {\n    switch (attributeName.toLowerCase()) {\n      case 'indices':\n        return 'indices';\n      case 'position':\n      case 'positions':\n      case 'vertices':\n        return this.draco.POSITION;\n      case 'normal':\n      case 'normals':\n        return this.draco.NORMAL;\n      case 'color':\n      case 'colors':\n        return this.draco.COLOR;\n      case 'texcoord':\n      case 'texcoords':\n        return this.draco.TEX_COORD;\n      default:\n        return this.draco.GENERIC;\n    }\n  }\n\n  _getPositionAttribute(attributes) {\n    for (const attributeName in attributes) {\n      const attribute = attributes[attributeName];\n      const dracoType = this._getDracoAttributeType(attributeName);\n      if (dracoType === this.draco.POSITION) {\n        return attribute;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Add metadata for the geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param metadata\n   */\n  _addGeometryMetadata(dracoGeometry: PointCloud, metadata: {[key: string]: string}) {\n    const dracoMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoMetadata, metadata);\n    this.dracoMeshBuilder.AddMetadata(dracoGeometry, dracoMetadata);\n  }\n\n  /**\n   * Add metadata for an attribute to geometry.\n   * @param dracoGeometry - WASM Draco Object\n   * @param uniqueAttributeId\n   * @param metadata\n   */\n  _addAttributeMetadata(\n    dracoGeometry: PointCloud,\n    uniqueAttributeId: number,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    // Note: Draco JS IDL doesn't seem to expose draco.AttributeMetadata, however it seems to\n    // create such objects automatically from draco.Metadata object.\n    const dracoAttributeMetadata = new this.draco.Metadata();\n    this._populateDracoMetadata(dracoAttributeMetadata, metadata);\n    // Draco3d doc note: Directly add attribute metadata to geometry.\n    // You can do this without explicitly adding |GeometryMetadata| to mesh.\n    this.dracoMeshBuilder.SetMetadataForAttribute(\n      dracoGeometry,\n      uniqueAttributeId,\n      dracoAttributeMetadata\n    );\n  }\n\n  /**\n   * Add contents of object or map to a WASM Draco Metadata Object\n   * @param dracoMetadata - WASM Draco Object\n   * @param metadata\n   */\n  _populateDracoMetadata(\n    dracoMetadata: Metadata,\n    metadata: Map<string, string> | {[key: string]: string}\n  ) {\n    for (const [key, value] of getEntries(metadata)) {\n      switch (typeof value) {\n        case 'number':\n          if (Math.trunc(value) === value) {\n            this.dracoMetadataBuilder.AddIntEntry(dracoMetadata, key, value);\n          } else {\n            this.dracoMetadataBuilder.AddDoubleEntry(dracoMetadata, key, value);\n          }\n          break;\n        case 'object':\n          if (value instanceof Int32Array) {\n            this.dracoMetadataBuilder.AddIntEntryArray(dracoMetadata, key, value, value.length);\n          }\n          break;\n        case 'string':\n        default:\n          this.dracoMetadataBuilder.AddStringEntry(dracoMetadata, key, value);\n      }\n    }\n  }\n}\n\n// HELPER FUNCTIONS\n\n/**\n * Copy encoded data to buffer\n * @param dracoData\n */\nfunction dracoInt8ArrayToArrayBuffer(dracoData: DracoInt8Array) {\n  const byteLength = dracoData.size();\n  const outputBuffer = new ArrayBuffer(byteLength);\n  const outputData = new Int8Array(outputBuffer);\n  for (let i = 0; i < byteLength; ++i) {\n    outputData[i] = dracoData.GetValue(i);\n  }\n  return outputBuffer;\n}\n\n/** Enable iteration over either an object or a map */\nfunction getEntries(container) {\n  const hasEntriesFunc = container.entries && !container.hasOwnProperty('entries');\n  return hasEntriesFunc ? container.entries() : Object.entries(container);\n}\n"],"sourceRoot":""}