{"version":3,"sources":["../../../../src/lib/binary-vector-tile/features-to-binary.js"],"names":["featuresToBinary","features","firstPassData","options","fillArrays","numericPropKeys","extractNumericPropKeys","PositionDataType","Float32Array","TEST_EXPORTS","feature","properties","key","numericSoFar","undefined","val","isNumeric","Object","keys","filter","k","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLength","GlobalFeatureIdsDataType","length","Uint32Array","Uint16Array","points","positions","globalFeatureIds","featureIds","numericProps","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","triangles","object","propName","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","geometry","type","handlePoint","push","keepStringProperties","handleLineString","handlePolygon","Error","makeAccessorObjects","set","data","nPositions","fillNumericProperties","fill","i","il","start","end","l","ll","startPosition","areas","nextLines","endPosition","triangulatePolygon","polygonPositions","subarray","offset","holes","slice","map","n","indices","t","tl","returnObj","value","size","geomType","numericProp","index","numericPropName","numericKeys","props","includes","x","Number","isFinite"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport {earcut} from '@math.gl/polygon';\n\n/**\n * Convert binary features to flat binary arrays. Similar to\n * `geojsonToBinary` helper function, except that it expects\n * a binary representation of the feature data, which enables\n * 2X-3X speed increase in parse speed, compared to using\n * geoJSON. See `binary-vector-tile/VectorTileFeature` for\n * data format detais\n */\nexport function featuresToBinary(features, firstPassData, options = {}) {\n  return fillArrays(features, firstPassData, {\n    numericPropKeys: options.numericPropKeys || extractNumericPropKeys(features),\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\n\nexport const TEST_EXPORTS = {\n  extractNumericPropKeys,\n  fillArrays\n};\n\n// Extracts properties that are always numeric\n// eslint-disable-next-line complexity, max-statements\nfunction extractNumericPropKeys(features) {\n  const numericPropKeys = {};\n  for (const feature of features) {\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, false is stored to prevent rechecking in the future\n        const numericSoFar = numericPropKeys[key];\n        // eslint-disable-next-line max-depth\n        if (numericSoFar || numericSoFar === undefined) {\n          const val = feature.properties[key];\n          numericPropKeys[key] = isNumeric(val);\n        }\n      }\n    }\n  }\n\n  return Object.keys(numericPropKeys).filter((k) => numericPropKeys[k]);\n}\n\n// Fills coordinates into pre-allocated typed arrays\n// eslint-disable-next-line complexity\nfunction fillArrays(features, firstPassData = {}, options = {}) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  } = firstPassData;\n  const {numericPropKeys, PositionDataType = Float32Array} = options;\n  const coordLength = 2;\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const lines = {\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: []\n  };\n  const polygons = {\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    triangles: [],\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: []\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      object.numericProps[propName] = new Float32Array(object.positions.length / coordLength);\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties = feature.properties || {};\n\n    switch (geometry.type) {\n      case 'Point':\n      case 'MultiPoint':\n        handlePoint(geometry, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n      case 'MultiLineString':\n        handleLineString(geometry, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n      case 'MultiPolygon':\n        handlePolygon(geometry, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n// Fills (Multi)Point coordinates into points object of arrays\nfunction handlePoint(geometry, points, indexMap, coordLength, properties) {\n  points.positions.set(geometry.data, indexMap.pointPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(points, properties, indexMap.pointPosition, nPositions);\n  points.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n  points.featureIds.fill(\n    indexMap.pointFeature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n\n  indexMap.pointPosition += nPositions;\n}\n\n// Fills (Multi)LineString coordinates into lines object of arrays\nfunction handleLineString(geometry, lines, indexMap, coordLength, properties) {\n  lines.positions.set(geometry.data, indexMap.linePosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n  lines.featureIds.fill(\n    indexMap.lineFeature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n\n  for (let i = 0, il = geometry.lines.length; i < il; ++i) {\n    // Extract range of data we are working with, defined by start\n    // and end indices (these index into the geometry.data array)\n    const start = geometry.lines[i];\n    const end =\n      i === il - 1\n        ? geometry.data.length // last line, so read to end of data\n        : geometry.lines[i + 1]; // start index for next line\n\n    lines.pathIndices[indexMap.linePath++] = indexMap.linePosition;\n    indexMap.linePosition += (end - start) / coordLength;\n  }\n}\n\n// Fills (Multi)Polygon coordinates into polygons object of arrays\nfunction handlePolygon(geometry, polygons, indexMap, coordLength, properties) {\n  polygons.positions.set(geometry.data, indexMap.polygonPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n  polygons.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n  polygons.featureIds.fill(\n    indexMap.polygonFeature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n\n  // Unlike Point & LineString geometry.lines is a 2D array\n  for (let l = 0, ll = geometry.lines.length; l < ll; ++l) {\n    const startPosition = indexMap.polygonPosition;\n    polygons.polygonIndices[indexMap.polygonObject++] = startPosition;\n\n    const areas = geometry.areas[l];\n    const lines = geometry.lines[l];\n    const nextLines = geometry.lines[l + 1];\n\n    for (let i = 0, il = lines.length; i < il; ++i) {\n      const start = lines[i];\n      const end =\n        i === il - 1\n          ? // last line, so either read to:\n            nextLines === undefined\n            ? geometry.data.length // end of data (no next lines)\n            : nextLines[0] // start of first line in nextLines\n          : lines[i + 1]; // start index for next line\n\n      polygons.primitivePolygonIndices[indexMap.polygonRing++] = indexMap.polygonPosition;\n      indexMap.polygonPosition += (end - start) / coordLength;\n    }\n\n    const endPosition = indexMap.polygonPosition;\n    triangulatePolygon(polygons, areas, lines, {startPosition, endPosition, coordLength});\n  }\n}\n\n/**\n * Triangulate polygon using earcut\n */\nfunction triangulatePolygon(polygons, areas, lines, {startPosition, endPosition, coordLength}) {\n  const start = startPosition * coordLength;\n  const end = endPosition * coordLength;\n\n  // Extract positions and holes for just this polygon\n  const polygonPositions = polygons.positions.subarray(start, end);\n\n  // Holes are referenced relative to outer polygon\n  const offset = lines[0];\n  const holes = lines.slice(1).map((n) => (n - offset) / coordLength);\n\n  // Compute triangulation\n  const indices = earcut(polygonPositions, holes, coordLength, areas);\n\n  // Indices returned by triangulation are relative to start\n  // of polygon, so we need to offset\n  for (let t = 0, tl = indices.length; t < tl; ++t) {\n    polygons.triangles.push(startPosition + indices[t]);\n  }\n}\n\n// Wrap each array in an accessor object with value and size keys\nfunction makeAccessorObjects(points, lines, polygons, coordLength) {\n  const returnObj = {\n    points: {\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1},\n      numericProps: points.numericProps,\n      properties: points.properties\n    },\n    lines: {\n      pathIndices: {value: lines.pathIndices, size: 1},\n      positions: {value: lines.positions, size: coordLength},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1},\n      numericProps: lines.numericProps,\n      properties: lines.properties\n    },\n    polygons: {\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      positions: {value: polygons.positions, size: coordLength},\n      triangles: {value: new Uint32Array(polygons.triangles), size: 1},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1},\n      numericProps: polygons.numericProps,\n      properties: polygons.properties\n    }\n  };\n\n  for (const geomType in returnObj) {\n    for (const numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n  return returnObj;\n}\n\n// Add numeric properties to object\nfunction fillNumericProperties(object, properties, index, length) {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].fill(properties[numericPropName], index, index + length);\n    }\n  }\n}\n\n// Keep string properties in object\nfunction keepStringProperties(properties, numericKeys) {\n  const props = {};\n  for (const key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\n\nfunction isNumeric(x) {\n  return Number.isFinite(x);\n}\n"],"file":"features-to-binary.js"}