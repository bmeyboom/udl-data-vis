import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

import { BlobPolyfill } from './blob-polyfill';
export var FilePolyfill = function (_BlobPolyfill) {
  _inherits(FilePolyfill, _BlobPolyfill);

  var _super = _createSuper(FilePolyfill);

  function FilePolyfill(init) {
    var _this;

    var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : panic(new TypeError('File constructor requires name argument'));
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, FilePolyfill);

    _this = _super.call(this, init, options);
    _this._name = String(name).replace(/\//g, ':');
    _this._lastModified = options.lastModified || Date.now();
    return _this;
  }

  _createClass(FilePolyfill, [{
    key: "name",
    get: function get() {
      return this._name;
    }
  }, {
    key: "webkitRelativePath",
    get: function get() {
      return '';
    }
  }, {
    key: "lastModified",
    get: function get() {
      return this._lastModified;
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return 'File';
    }
  }]);

  return FilePolyfill;
}(BlobPolyfill);

function panic(error) {
  throw error;
}
//# sourceMappingURL=file-polyfill.js.map