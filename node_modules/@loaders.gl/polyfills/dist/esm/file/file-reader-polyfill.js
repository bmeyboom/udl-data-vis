import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import { atob } from '../text-encoding/btoa.node';
export var FileReaderPolyfill = function () {
  function FileReaderPolyfill() {
    _classCallCheck(this, FileReaderPolyfill);

    this.onload = null;
  }

  _createClass(FileReaderPolyfill, [{
    key: "abort",
    value: function abort() {}
  }, {
    key: "readAsArrayBuffer",
    value: function () {
      var _readAsArrayBuffer = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(blob) {
        var arrayBuffer;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return blob.arrayBuffer();

              case 2:
                arrayBuffer = _context.sent;

                if (this.onload) {
                  this.onload({
                    target: {
                      result: arrayBuffer
                    }
                  });
                }

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function readAsArrayBuffer(_x) {
        return _readAsArrayBuffer.apply(this, arguments);
      }

      return readAsArrayBuffer;
    }()
  }, {
    key: "readAsBinaryString",
    value: function readAsBinaryString(blob) {
      throw Error('Not implemented');
    }
  }, {
    key: "readAsDataURL",
    value: function () {
      var _readAsDataURL = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2(blob) {
        var text, dataUrl;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return blob.text();

              case 2:
                text = _context2.sent;
                dataUrl = "data://;base64,".concat(atob(text));

                if (this.onload) {
                  this.onload({
                    target: {
                      result: dataUrl
                    }
                  });
                }

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function readAsDataURL(_x2) {
        return _readAsDataURL.apply(this, arguments);
      }

      return readAsDataURL;
    }()
  }, {
    key: "readAsText",
    value: function () {
      var _readAsText = _asyncToGenerator(_regeneratorRuntime.mark(function _callee3(blob) {
        var text;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return blob.text();

              case 2:
                text = _context3.sent;

                if (this.onload) {
                  this.onload({
                    target: {
                      result: text
                    }
                  });
                }

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function readAsText(_x3) {
        return _readAsText.apply(this, arguments);
      }

      return readAsText;
    }()
  }]);

  return FileReaderPolyfill;
}();
//# sourceMappingURL=file-reader-polyfill.js.map