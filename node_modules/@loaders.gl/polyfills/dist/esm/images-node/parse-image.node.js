import _regeneratorRuntime from "@babel/runtime/regenerator";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import getPixels from 'get-pixels';
import util from 'util';
import assert from 'assert';
export function parseImageNode(_x, _x2, _x3) {
  return _parseImageNode.apply(this, arguments);
}

function _parseImageNode() {
  _parseImageNode = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, mimeType, options) {
    var getPixelsAsync, buffer, ndarray, shape, layers;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            assert(mimeType, 'MIMEType is required to parse image under Node.js');
            getPixelsAsync = util.promisify(getPixels);
            buffer = arrayBuffer instanceof Buffer ? arrayBuffer : Buffer.from(arrayBuffer);
            _context.next = 5;
            return getPixelsAsync(buffer, mimeType);

          case 5:
            ndarray = _context.sent;
            shape = _toConsumableArray(ndarray.shape);
            layers = ndarray.shape.length === 4 ? ndarray.shape.shift() : 1;
            return _context.abrupt("return", {
              shape: shape,
              data: ndarray.data,
              width: ndarray.shape[0],
              height: ndarray.shape[1],
              components: ndarray.shape[2],
              layers: layers
            });

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseImageNode.apply(this, arguments);
}
//# sourceMappingURL=parse-image.node.js.map