import assert from '../../utils/assert';

const isArrayBuffer = x => x && x instanceof ArrayBuffer;

const isBuffer = x => x && x instanceof Buffer;

export function decodeDataUri(uri) {
  const dataIndex = uri.indexOf(',');
  let buffer;
  let mimeType;

  if (uri.slice(dataIndex - 7, dataIndex) === ';base64') {
    buffer = Buffer.from(uri.slice(dataIndex + 1), 'base64');
    mimeType = uri.slice(5, dataIndex - 7).trim();
  } else {
    buffer = Buffer.from(decodeURIComponent(uri.slice(dataIndex + 1)));
    mimeType = uri.slice(5, dataIndex).trim();
  }

  if (!mimeType) {
    mimeType = 'text/plain;charset=US-ASCII';
  } else if (mimeType.startsWith(';')) {
    mimeType = "text/plain".concat(mimeType);
  }

  return {
    arrayBuffer: toArrayBuffer(buffer),
    mimeType
  };
}
export function toArrayBuffer(data) {
  if (isArrayBuffer(data)) {
    return data;
  }

  if (isBuffer(data)) {
    const typedArray = new Uint8Array(data);
    return typedArray.buffer;
  }

  if (ArrayBuffer.isView(data)) {
    return data.buffer;
  }

  if (typeof data === 'string') {
    const text = data;
    const uint8Array = new TextEncoder().encode(text);
    return uint8Array.buffer;
  }

  if (data && typeof data === 'object' && data._toArrayBuffer) {
    return data._toArrayBuffer();
  }

  return assert(false, "toArrayBuffer(".concat(JSON.stringify(data, null, 2).slice(10), ")"));
}
//# sourceMappingURL=decode-data-uri.node.js.map