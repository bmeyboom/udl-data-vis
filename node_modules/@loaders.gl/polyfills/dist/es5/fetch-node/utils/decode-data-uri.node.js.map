{"version":3,"sources":["../../../../src/fetch-node/utils/decode-data-uri.node.js"],"names":["isArrayBuffer","x","ArrayBuffer","isBuffer","Buffer","decodeDataUri","uri","dataIndex","indexOf","buffer","mimeType","slice","from","trim","decodeURIComponent","startsWith","arrayBuffer","toArrayBuffer","data","typedArray","Uint8Array","isView","text","uint8Array","TextEncoder","encode","_toArrayBuffer","JSON","stringify"],"mappings":";;;;;;;;;;;;AAGA;;AAEA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,CAAAC,CAAC;AAAA,SAAIA,CAAC,IAAIA,CAAC,YAAYC,WAAtB;AAAA,CAAvB;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAF,CAAC;AAAA,SAAIA,CAAC,IAAIA,CAAC,YAAYG,MAAtB;AAAA,CAAlB;;AAQO,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AACjC,MAAMC,SAAS,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,CAAlB;AAEA,MAAIC,MAAJ;AACA,MAAIC,QAAJ;;AACA,MAAIJ,GAAG,CAACK,KAAJ,CAAUJ,SAAS,GAAG,CAAtB,EAAyBA,SAAzB,MAAwC,SAA5C,EAAuD;AACrDE,IAAAA,MAAM,GAAGL,MAAM,CAACQ,IAAP,CAAYN,GAAG,CAACK,KAAJ,CAAUJ,SAAS,GAAG,CAAtB,CAAZ,EAAsC,QAAtC,CAAT;AACAG,IAAAA,QAAQ,GAAGJ,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAaJ,SAAS,GAAG,CAAzB,EAA4BM,IAA5B,EAAX;AACD,GAHD,MAGO;AACLJ,IAAAA,MAAM,GAAGL,MAAM,CAACQ,IAAP,CAAYE,kBAAkB,CAACR,GAAG,CAACK,KAAJ,CAAUJ,SAAS,GAAG,CAAtB,CAAD,CAA9B,CAAT;AACAG,IAAAA,QAAQ,GAAGJ,GAAG,CAACK,KAAJ,CAAU,CAAV,EAAaJ,SAAb,EAAwBM,IAAxB,EAAX;AACD;;AAED,MAAI,CAACH,QAAL,EAAe;AACbA,IAAAA,QAAQ,GAAG,6BAAX;AACD,GAFD,MAEO,IAAIA,QAAQ,CAACK,UAAT,CAAoB,GAApB,CAAJ,EAA8B;AACnCL,IAAAA,QAAQ,uBAAgBA,QAAhB,CAAR;AACD;;AAED,SAAO;AAACM,IAAAA,WAAW,EAAEC,aAAa,CAACR,MAAD,CAA3B;AAAqCC,IAAAA,QAAQ,EAARA;AAArC,GAAP;AACD;;AAMM,SAASO,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAIlB,aAAa,CAACkB,IAAD,CAAjB,EAAyB;AACvB,WAAOA,IAAP;AACD;;AAGD,MAAIf,QAAQ,CAACe,IAAD,CAAZ,EAAoB;AAClB,QAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAeF,IAAf,CAAnB;AACA,WAAOC,UAAU,CAACV,MAAlB;AACD;;AAGD,MAAIP,WAAW,CAACmB,MAAZ,CAAmBH,IAAnB,CAAJ,EAA8B;AAC5B,WAAOA,IAAI,CAACT,MAAZ;AACD;;AAED,MAAI,OAAOS,IAAP,KAAgB,QAApB,EAA8B;AAC5B,QAAMI,IAAI,GAAGJ,IAAb;AACA,QAAMK,UAAU,GAAG,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBH,IAAzB,CAAnB;AACA,WAAOC,UAAU,CAACd,MAAlB;AACD;;AAGD,MAAIS,IAAI,IAAI,yBAAOA,IAAP,MAAgB,QAAxB,IAAoCA,IAAI,CAACQ,cAA7C,EAA6D;AAC3D,WAAOR,IAAI,CAACQ,cAAL,EAAP;AACD;;AAED,SAAO,wBAAO,KAAP,0BAA+BC,IAAI,CAACC,SAAL,CAAeV,IAAf,EAAqB,IAArB,EAA2B,CAA3B,EAA8BP,KAA9B,CAAoC,EAApC,CAA/B,OAAP;AACD","sourcesContent":["// Based on binary-gltf-utils under MIT license: Copyright (c) 2016-17 Karl Cheng\n\n/* global Buffer, TextEncoder */\nimport assert from '../../utils/assert';\n\nconst isArrayBuffer = x => x && x instanceof ArrayBuffer;\nconst isBuffer = x => x && x instanceof Buffer;\n\n/**\n * Parses a data URI into a buffer, as well as retrieving its declared MIME type.\n *\n * @param {string} uri - a data URI (assumed to be valid)\n * @returns {Object} { buffer, mimeType }\n */\nexport function decodeDataUri(uri) {\n  const dataIndex = uri.indexOf(',');\n\n  let buffer;\n  let mimeType;\n  if (uri.slice(dataIndex - 7, dataIndex) === ';base64') {\n    buffer = Buffer.from(uri.slice(dataIndex + 1), 'base64');\n    mimeType = uri.slice(5, dataIndex - 7).trim();\n  } else {\n    buffer = Buffer.from(decodeURIComponent(uri.slice(dataIndex + 1)));\n    mimeType = uri.slice(5, dataIndex).trim();\n  }\n\n  if (!mimeType) {\n    mimeType = 'text/plain;charset=US-ASCII';\n  } else if (mimeType.startsWith(';')) {\n    mimeType = `text/plain${mimeType}`;\n  }\n\n  return {arrayBuffer: toArrayBuffer(buffer), mimeType};\n}\n\n/**\n * @param data\n * @todo Duplicate of core\n */\nexport function toArrayBuffer(data) {\n  if (isArrayBuffer(data)) {\n    return data;\n  }\n\n  // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n  if (isBuffer(data)) {\n    const typedArray = new Uint8Array(data);\n    return typedArray.buffer;\n  }\n\n  // Careful - Node Buffers will look like ArrayBuffers (keep after isBuffer)\n  if (ArrayBuffer.isView(data)) {\n    return data.buffer;\n  }\n\n  if (typeof data === 'string') {\n    const text = data;\n    const uint8Array = new TextEncoder().encode(text);\n    return uint8Array.buffer;\n  }\n\n  // HACK to support Blob polyfill\n  if (data && typeof data === 'object' && data._toArrayBuffer) {\n    return data._toArrayBuffer();\n  }\n\n  return assert(false, `toArrayBuffer(${JSON.stringify(data, null, 2).slice(10)})`);\n}\n"],"file":"decode-data-uri.node.js"}