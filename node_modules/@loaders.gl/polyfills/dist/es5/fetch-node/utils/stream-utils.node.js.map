{"version":3,"sources":["../../../../src/fetch-node/utils/stream-utils.node.js"],"names":["isRequestURL","url","startsWith","createReadStream","options","noqueryUrl","split","Promise","resolve","reject","stream","fs","encoding","once","on","error","requestFunction","https","request","http","requestOptions","getRequestOptions","req","res","end","decompressReadStream","readStream","headers","get","pipe","zlib","createBrotliDecompress","createGunzip","createDeflate","concatenateReadStream","arrayBuffer","ArrayBuffer","read","chunk","Error","chunkAsArrayBuffer","concatenateArrayBuffers","originalHeaders","Object","keys","key","toLowerCase","urlObject","URL","hostname","path","pathname","method","fetch","source1","source2","sourceArray1","Uint8Array","sourceArray2","temp","byteLength","set","buffer"],"mappings":"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","sourcesContent":["/* global URL */\nimport fs from 'fs'; // `fs` will be empty object in browsers (see package.json \"browser\" field).\nimport http from 'http';\nimport https from 'https';\nimport zlib from 'zlib';\n\nimport {toArrayBuffer} from './decode-data-uri.node';\n\nconst isRequestURL = url => url.startsWith('http:') || url.startsWith('https:');\n\n// Returns a promise that resolves to a readable stream\nexport async function createReadStream(url, options) {\n  // Handle file streams in node\n  if (!isRequestURL(url)) {\n    const noqueryUrl = url.split('?')[0];\n    // Now open the stream\n    return await new Promise((resolve, reject) => {\n      // @ts-ignore\n      const stream = fs.createReadStream(noqueryUrl, {encoding: null});\n      stream.once('readable', () => resolve(stream));\n      stream.on('error', error => reject(error));\n    });\n  }\n\n  // HANDLE HTTP/HTTPS REQUESTS IN NODE\n  // TODO: THIS IS BAD SINCE WE RETURN A PROMISE INSTEAD OF A STREAM\n  return await new Promise((resolve, reject) => {\n    const requestFunction = url.startsWith('https:') ? https.request : http.request;\n    const requestOptions = getRequestOptions(url, options);\n    const req = requestFunction(requestOptions, res => resolve(res));\n    req.on('error', error => reject(error));\n    req.end();\n  });\n}\n\nexport function decompressReadStream(readStream, headers) {\n  switch (headers.get('content-encoding')) {\n    case 'br':\n      return readStream.pipe(zlib.createBrotliDecompress());\n    case 'gzip':\n      return readStream.pipe(zlib.createGunzip());\n    case 'deflate':\n      return readStream.pipe(zlib.createDeflate());\n    default:\n      // No compression or an unknown one, just return it as is\n      return readStream;\n  }\n}\n\nexport async function concatenateReadStream(readStream) {\n  let arrayBuffer = new ArrayBuffer(0);\n\n  return await new Promise((resolve, reject) => {\n    readStream.on('error', error => reject(error));\n\n    // Once the readable callback has been added, stream switches to \"flowing mode\"\n    // In Node 10 (but not 12 and 14) this causes `data` and `end` to never be called unless we read data here\n    readStream.on('readable', () => readStream.read());\n\n    readStream.on('data', chunk => {\n      if (typeof chunk === 'string') {\n        reject(new Error('Read stream not binary'));\n      }\n      const chunkAsArrayBuffer = toArrayBuffer(chunk);\n      arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunkAsArrayBuffer);\n    });\n\n    readStream.on('end', () => resolve(arrayBuffer));\n  });\n}\n\n// HELPERS\n\nfunction getRequestOptions(url, options = {}) {\n  // Ensure header keys are lower case so that we can merge without duplicates\n  const originalHeaders = options.headers || {};\n  const headers = {};\n  for (const key of Object.keys(originalHeaders)) {\n    headers[key.toLowerCase()] = originalHeaders[key];\n  }\n\n  // Add default accept-encoding to headers\n  headers['accept-encoding'] = headers['accept-encoding'] || 'gzip,br,deflate';\n\n  const urlObject = new URL(url);\n  return {\n    hostname: urlObject.hostname,\n    path: urlObject.pathname,\n    method: 'GET',\n    // Add options and user provided 'options.fetch' overrides if available\n    ...options,\n    ...(options.fetch || {}),\n    // Override with updated headers with accepted encodings:\n    headers\n  };\n}\n\nfunction concatenateArrayBuffers(source1, source2) {\n  const sourceArray1 = source1 instanceof ArrayBuffer ? new Uint8Array(source1) : source1;\n  const sourceArray2 = source2 instanceof ArrayBuffer ? new Uint8Array(source2) : source2;\n  const temp = new Uint8Array(sourceArray1.byteLength + sourceArray2.byteLength);\n  temp.set(sourceArray1, 0);\n  temp.set(sourceArray2, sourceArray1.byteLength);\n  return temp.buffer;\n}\n"],"file":"stream-utils.node.js"}