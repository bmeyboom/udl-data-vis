"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createReadStream = createReadStream;
exports.decompressReadStream = decompressReadStream;
exports.concatenateReadStream = concatenateReadStream;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _fs = _interopRequireDefault(require("fs"));

var _http = _interopRequireDefault(require("http"));

var _https = _interopRequireDefault(require("https"));

var _zlib = _interopRequireDefault(require("zlib"));

var _decodeDataUri = require("./decode-data-uri.node");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var isRequestURL = function isRequestURL(url) {
  return url.startsWith('http:') || url.startsWith('https:');
};

function createReadStream(_x, _x2) {
  return _createReadStream.apply(this, arguments);
}

function _createReadStream() {
  _createReadStream = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(url, options) {
    var noqueryUrl;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (isRequestURL(url)) {
              _context.next = 5;
              break;
            }

            noqueryUrl = url.split('?')[0];
            _context.next = 4;
            return new Promise(function (resolve, reject) {
              var stream = _fs["default"].createReadStream(noqueryUrl, {
                encoding: null
              });

              stream.once('readable', function () {
                return resolve(stream);
              });
              stream.on('error', function (error) {
                return reject(error);
              });
            });

          case 4:
            return _context.abrupt("return", _context.sent);

          case 5:
            _context.next = 7;
            return new Promise(function (resolve, reject) {
              var requestFunction = url.startsWith('https:') ? _https["default"].request : _http["default"].request;
              var requestOptions = getRequestOptions(url, options);
              var req = requestFunction(requestOptions, function (res) {
                return resolve(res);
              });
              req.on('error', function (error) {
                return reject(error);
              });
              req.end();
            });

          case 7:
            return _context.abrupt("return", _context.sent);

          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _createReadStream.apply(this, arguments);
}

function decompressReadStream(readStream, headers) {
  switch (headers.get('content-encoding')) {
    case 'br':
      return readStream.pipe(_zlib["default"].createBrotliDecompress());

    case 'gzip':
      return readStream.pipe(_zlib["default"].createGunzip());

    case 'deflate':
      return readStream.pipe(_zlib["default"].createDeflate());

    default:
      return readStream;
  }
}

function concatenateReadStream(_x3) {
  return _concatenateReadStream.apply(this, arguments);
}

function _concatenateReadStream() {
  _concatenateReadStream = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee2(readStream) {
    var arrayBuffer;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            arrayBuffer = new ArrayBuffer(0);
            _context2.next = 3;
            return new Promise(function (resolve, reject) {
              readStream.on('error', function (error) {
                return reject(error);
              });
              readStream.on('readable', function () {
                return readStream.read();
              });
              readStream.on('data', function (chunk) {
                if (typeof chunk === 'string') {
                  reject(new Error('Read stream not binary'));
                }

                var chunkAsArrayBuffer = (0, _decodeDataUri.toArrayBuffer)(chunk);
                arrayBuffer = concatenateArrayBuffers(arrayBuffer, chunkAsArrayBuffer);
              });
              readStream.on('end', function () {
                return resolve(arrayBuffer);
              });
            });

          case 3:
            return _context2.abrupt("return", _context2.sent);

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _concatenateReadStream.apply(this, arguments);
}

function getRequestOptions(url) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var originalHeaders = options.headers || {};
  var headers = {};

  for (var _i = 0, _Object$keys = Object.keys(originalHeaders); _i < _Object$keys.length; _i++) {
    var key = _Object$keys[_i];
    headers[key.toLowerCase()] = originalHeaders[key];
  }

  headers['accept-encoding'] = headers['accept-encoding'] || 'gzip,br,deflate';
  var urlObject = new URL(url);
  return _objectSpread(_objectSpread(_objectSpread({
    hostname: urlObject.hostname,
    path: urlObject.pathname,
    method: 'GET'
  }, options), options.fetch || {}), {}, {
    headers: headers
  });
}

function concatenateArrayBuffers(source1, source2) {
  var sourceArray1 = source1 instanceof ArrayBuffer ? new Uint8Array(source1) : source1;
  var sourceArray2 = source2 instanceof ArrayBuffer ? new Uint8Array(source2) : source2;
  var temp = new Uint8Array(sourceArray1.byteLength + sourceArray2.byteLength);
  temp.set(sourceArray1, 0);
  temp.set(sourceArray2, sourceArray1.byteLength);
  return temp.buffer;
}
//# sourceMappingURL=stream-utils.node.js.map