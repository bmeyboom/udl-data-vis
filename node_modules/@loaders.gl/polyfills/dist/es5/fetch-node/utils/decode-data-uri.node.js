"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decodeDataUri = decodeDataUri;
exports.toArrayBuffer = toArrayBuffer;

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _assert = _interopRequireDefault(require("../../utils/assert"));

var isArrayBuffer = function isArrayBuffer(x) {
  return x && x instanceof ArrayBuffer;
};

var isBuffer = function isBuffer(x) {
  return x && x instanceof Buffer;
};

function decodeDataUri(uri) {
  var dataIndex = uri.indexOf(',');
  var buffer;
  var mimeType;

  if (uri.slice(dataIndex - 7, dataIndex) === ';base64') {
    buffer = Buffer.from(uri.slice(dataIndex + 1), 'base64');
    mimeType = uri.slice(5, dataIndex - 7).trim();
  } else {
    buffer = Buffer.from(decodeURIComponent(uri.slice(dataIndex + 1)));
    mimeType = uri.slice(5, dataIndex).trim();
  }

  if (!mimeType) {
    mimeType = 'text/plain;charset=US-ASCII';
  } else if (mimeType.startsWith(';')) {
    mimeType = "text/plain".concat(mimeType);
  }

  return {
    arrayBuffer: toArrayBuffer(buffer),
    mimeType: mimeType
  };
}

function toArrayBuffer(data) {
  if (isArrayBuffer(data)) {
    return data;
  }

  if (isBuffer(data)) {
    var typedArray = new Uint8Array(data);
    return typedArray.buffer;
  }

  if (ArrayBuffer.isView(data)) {
    return data.buffer;
  }

  if (typeof data === 'string') {
    var text = data;
    var uint8Array = new TextEncoder().encode(text);
    return uint8Array.buffer;
  }

  if (data && (0, _typeof2["default"])(data) === 'object' && data._toArrayBuffer) {
    return data._toArrayBuffer();
  }

  return (0, _assert["default"])(false, "toArrayBuffer(".concat(JSON.stringify(data, null, 2).slice(10), ")"));
}
//# sourceMappingURL=decode-data-uri.node.js.map