"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTextOffsetByRadius = getTextOffsetByRadius;
exports.formatTextLabelData = exports.textLabelAccessor = exports.defaultPadding = void 0;

var _viewportMercatorProject = require("viewport-mercator-project");

var _dataUtils = require("../utils/data-utils");

var _lodash = _interopRequireDefault(require("lodash.uniq"));

// Copyright (c) 2021 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
var defaultPadding = 20;
exports.defaultPadding = defaultPadding;

function getTextOffsetByRadius(radiusScale, getRadius, mapState) {
  return function (textLabel) {
    var distanceScale = (0, _viewportMercatorProject.getDistanceScales)(mapState);
    var xMult = textLabel.anchor === 'middle' ? 0 : textLabel.anchor === 'start' ? 1 : -1;
    var yMult = textLabel.alignment === 'center' ? 0 : textLabel.alignment === 'bottom' ? 1 : -1;
    var sizeOffset = textLabel.alignment === 'center' ? 0 : textLabel.alignment === 'bottom' ? textLabel.size : textLabel.size;
    var pixelRadius = radiusScale * distanceScale.pixelsPerMeter[0];
    var padding = defaultPadding;
    return typeof getRadius === 'function' ? function (d) {
      return [xMult * (getRadius(d) * pixelRadius + padding), yMult * (getRadius(d) * pixelRadius + padding + sizeOffset)];
    } : [xMult * (getRadius * pixelRadius + padding), yMult * (getRadius * pixelRadius + padding + sizeOffset)];
  };
}

var textLabelAccessor = function textLabelAccessor(textLabel) {
  return function (d) {
    var val = textLabel.field.valueAccessor(d.data);
    return (0, _dataUtils.notNullorUndefined)(val) ? String(val) : '';
  };
};

exports.textLabelAccessor = textLabelAccessor;

var formatTextLabelData = function formatTextLabelData(_ref) {
  var textLabel = _ref.textLabel,
      triggerChanged = _ref.triggerChanged,
      oldLayerData = _ref.oldLayerData,
      data = _ref.data;
  return textLabel.map(function (tl, i) {
    if (!tl.field) {
      // if no field selected,
      return {
        getText: null,
        characterSet: []
      };
    }

    var getText = textLabelAccessor(tl);
    var characterSet;

    if (!triggerChanged["getLabelCharacterSet-".concat(i)] && oldLayerData && oldLayerData.textLabels && oldLayerData.textLabels[i]) {
      characterSet = oldLayerData.textLabels[i].characterSet;
    } else {
      var allLabels = tl.field ? data.map(getText) : [];
      characterSet = (0, _lodash["default"])(allLabels.join(''));
    }

    return {
      characterSet: characterSet,
      getText: getText
    };
  });
};

exports.formatTextLabelData = formatTextLabelData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,