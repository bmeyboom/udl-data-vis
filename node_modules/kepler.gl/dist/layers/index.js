"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Layer", {
  enumerable: true,
  get: function get() {
    return _baseLayer["default"];
  }
});
Object.defineProperty(exports, "OVERLAY_TYPE", {
  enumerable: true,
  get: function get() {
    return _baseLayer.OVERLAY_TYPE;
  }
});
Object.defineProperty(exports, "colorMaker", {
  enumerable: true,
  get: function get() {
    return _baseLayer.colorMaker;
  }
});
Object.defineProperty(exports, "LAYER_VIS_CONFIGS", {
  enumerable: true,
  get: function get() {
    return _layerFactory.LAYER_VIS_CONFIGS;
  }
});
exports.LayerClasses = exports.KeplerGlLayers = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _pointLayer = _interopRequireDefault(require("./point-layer/point-layer"));

var _arcLayer = _interopRequireDefault(require("./arc-layer/arc-layer"));

var _lineLayer = _interopRequireDefault(require("./line-layer/line-layer"));

var _gridLayer = _interopRequireDefault(require("./grid-layer/grid-layer"));

var _hexagonLayer = _interopRequireDefault(require("./hexagon-layer/hexagon-layer"));

var _geojsonLayer = _interopRequireDefault(require("./geojson-layer/geojson-layer"));

var _clusterLayer = _interopRequireDefault(require("./cluster-layer/cluster-layer"));

var _iconLayer = _interopRequireDefault(require("./icon-layer/icon-layer"));

var _heatmapLayer = _interopRequireDefault(require("./heatmap-layer/heatmap-layer"));

var _h3HexagonLayer = _interopRequireDefault(require("./h3-hexagon-layer/h3-hexagon-layer"));

var _scenegraphLayer = _interopRequireDefault(require("./scenegraph-layer/scenegraph-layer"));

var _tripLayer = _interopRequireDefault(require("./trip-layer/trip-layer"));

var _s2GeometryLayer = _interopRequireDefault(require("./s2-geometry-layer/s2-geometry-layer"));

var _types = require("./types");

var _baseLayer = _interopRequireWildcard(require("./base-layer"));

var _layerFactory = require("./layer-factory");

var _LayerClasses;

// individual layers
var KeplerGlLayers = {
  PointLayer: _pointLayer["default"],
  ArcLayer: _arcLayer["default"],
  LineLayer: _lineLayer["default"],
  GridLayer: _gridLayer["default"],
  HexagonLayer: _hexagonLayer["default"],
  GeojsonLayer: _geojsonLayer["default"],
  ClusterLayer: _clusterLayer["default"],
  IconLayer: _iconLayer["default"],
  HeatmapLayer: _heatmapLayer["default"],
  H3Layer: _h3HexagonLayer["default"],
  ScenegraphLayer: _scenegraphLayer["default"],
  TripLayer: _tripLayer["default"],
  S2GeometryLayer: _s2GeometryLayer["default"]
};
exports.KeplerGlLayers = KeplerGlLayers;
var LayerClasses = (_LayerClasses = {}, (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.point, _pointLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.arc, _arcLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.line, _lineLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.grid, _gridLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.hexagon, _hexagonLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.geojson, _geojsonLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.cluster, _clusterLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.icon, _iconLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.heatmap, _heatmapLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.hexagonId, _h3HexagonLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES['3D'], _scenegraphLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.trip, _tripLayer["default"]), (0, _defineProperty2["default"])(_LayerClasses, _types.LAYER_TYPES.s2, _s2GeometryLayer["default"]), _LayerClasses);
exports.LayerClasses = LayerClasses;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sYXllcnMvaW5kZXguanMiXSwibmFtZXMiOlsiS2VwbGVyR2xMYXllcnMiLCJQb2ludExheWVyIiwiQXJjTGF5ZXIiLCJMaW5lTGF5ZXIiLCJHcmlkTGF5ZXIiLCJIZXhhZ29uTGF5ZXIiLCJHZW9qc29uTGF5ZXIiLCJDbHVzdGVyTGF5ZXIiLCJJY29uTGF5ZXIiLCJIZWF0bWFwTGF5ZXIiLCJIM0xheWVyIiwiU2NlbmVncmFwaExheWVyIiwiVHJpcExheWVyIiwiUzJHZW9tZXRyeUxheWVyIiwiTGF5ZXJDbGFzc2VzIiwiTEFZRVJfVFlQRVMiLCJwb2ludCIsImFyYyIsImxpbmUiLCJncmlkIiwiaGV4YWdvbiIsImdlb2pzb24iLCJjbHVzdGVyIiwiaWNvbiIsImhlYXRtYXAiLCJoZXhhZ29uSWQiLCJ0cmlwIiwiczIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0E7O0FBbUNBOzs7O0FBakNBO0FBQ08sSUFBTUEsY0FBYyxHQUFHO0FBQzVCQyxFQUFBQSxVQUFVLEVBQVZBLHNCQUQ0QjtBQUU1QkMsRUFBQUEsUUFBUSxFQUFSQSxvQkFGNEI7QUFHNUJDLEVBQUFBLFNBQVMsRUFBVEEscUJBSDRCO0FBSTVCQyxFQUFBQSxTQUFTLEVBQVRBLHFCQUo0QjtBQUs1QkMsRUFBQUEsWUFBWSxFQUFaQSx3QkFMNEI7QUFNNUJDLEVBQUFBLFlBQVksRUFBWkEsd0JBTjRCO0FBTzVCQyxFQUFBQSxZQUFZLEVBQVpBLHdCQVA0QjtBQVE1QkMsRUFBQUEsU0FBUyxFQUFUQSxxQkFSNEI7QUFTNUJDLEVBQUFBLFlBQVksRUFBWkEsd0JBVDRCO0FBVTVCQyxFQUFBQSxPQUFPLEVBQVBBLDBCQVY0QjtBQVc1QkMsRUFBQUEsZUFBZSxFQUFmQSwyQkFYNEI7QUFZNUJDLEVBQUFBLFNBQVMsRUFBVEEscUJBWjRCO0FBYTVCQyxFQUFBQSxlQUFlLEVBQWZBO0FBYjRCLENBQXZCOztBQWdCQSxJQUFNQyxZQUFZLHdFQUN0QkMsbUJBQVlDLEtBRFUsRUFDRmYsc0JBREUsbURBRXRCYyxtQkFBWUUsR0FGVSxFQUVKZixvQkFGSSxtREFHdEJhLG1CQUFZRyxJQUhVLEVBR0hmLHFCQUhHLG1EQUl0QlksbUJBQVlJLElBSlUsRUFJSGYscUJBSkcsbURBS3RCVyxtQkFBWUssT0FMVSxFQUtBZix3QkFMQSxtREFNdEJVLG1CQUFZTSxPQU5VLEVBTUFmLHdCQU5BLG1EQU90QlMsbUJBQVlPLE9BUFUsRUFPQWYsd0JBUEEsbURBUXRCUSxtQkFBWVEsSUFSVSxFQVFIZixxQkFSRyxtREFTdEJPLG1CQUFZUyxPQVRVLEVBU0FmLHdCQVRBLG1EQVV0Qk0sbUJBQVlVLFNBVlUsRUFVRWYsMEJBVkYsbURBV3RCSyxtQkFBWSxJQUFaLENBWHNCLEVBV0ZKLDJCQVhFLG1EQVl0QkksbUJBQVlXLElBWlUsRUFZSGQscUJBWkcsbURBYXRCRyxtQkFBWVksRUFiVSxFQWFMZCwyQkFiSyxpQkFBbEIiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjEgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge2RlZmF1bHQgYXMgUG9pbnRMYXllcn0gZnJvbSAnLi9wb2ludC1sYXllci9wb2ludC1sYXllcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgQXJjTGF5ZXJ9IGZyb20gJy4vYXJjLWxheWVyL2FyYy1sYXllcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgTGluZUxheWVyfSBmcm9tICcuL2xpbmUtbGF5ZXIvbGluZS1sYXllcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgR3JpZExheWVyfSBmcm9tICcuL2dyaWQtbGF5ZXIvZ3JpZC1sYXllcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgSGV4YWdvbkxheWVyfSBmcm9tICcuL2hleGFnb24tbGF5ZXIvaGV4YWdvbi1sYXllcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgR2VvanNvbkxheWVyfSBmcm9tICcuL2dlb2pzb24tbGF5ZXIvZ2VvanNvbi1sYXllcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgQ2x1c3RlckxheWVyfSBmcm9tICcuL2NsdXN0ZXItbGF5ZXIvY2x1c3Rlci1sYXllcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgSWNvbkxheWVyfSBmcm9tICcuL2ljb24tbGF5ZXIvaWNvbi1sYXllcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgSGVhdG1hcExheWVyfSBmcm9tICcuL2hlYXRtYXAtbGF5ZXIvaGVhdG1hcC1sYXllcic7XG5pbXBvcnQge2RlZmF1bHQgYXMgSDNMYXllcn0gZnJvbSAnLi9oMy1oZXhhZ29uLWxheWVyL2gzLWhleGFnb24tbGF5ZXInO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFNjZW5lZ3JhcGhMYXllcn0gZnJvbSAnLi9zY2VuZWdyYXBoLWxheWVyL3NjZW5lZ3JhcGgtbGF5ZXInO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFRyaXBMYXllcn0gZnJvbSAnLi90cmlwLWxheWVyL3RyaXAtbGF5ZXInO1xuaW1wb3J0IHtkZWZhdWx0IGFzIFMyR2VvbWV0cnlMYXllcn0gZnJvbSAnLi9zMi1nZW9tZXRyeS1sYXllci9zMi1nZW9tZXRyeS1sYXllcic7XG5pbXBvcnQge0xBWUVSX1RZUEVTfSBmcm9tICcuL3R5cGVzJztcblxuLy8gYmFzZSBsYXllclxuZXhwb3J0IHtkZWZhdWx0IGFzIExheWVyLCBPVkVSTEFZX1RZUEUsIGNvbG9yTWFrZXJ9IGZyb20gJy4vYmFzZS1sYXllcic7XG5cbi8vIGluZGl2aWR1YWwgbGF5ZXJzXG5leHBvcnQgY29uc3QgS2VwbGVyR2xMYXllcnMgPSB7XG4gIFBvaW50TGF5ZXIsXG4gIEFyY0xheWVyLFxuICBMaW5lTGF5ZXIsXG4gIEdyaWRMYXllcixcbiAgSGV4YWdvbkxheWVyLFxuICBHZW9qc29uTGF5ZXIsXG4gIENsdXN0ZXJMYXllcixcbiAgSWNvbkxheWVyLFxuICBIZWF0bWFwTGF5ZXIsXG4gIEgzTGF5ZXIsXG4gIFNjZW5lZ3JhcGhMYXllcixcbiAgVHJpcExheWVyLFxuICBTMkdlb21ldHJ5TGF5ZXJcbn07XG5cbmV4cG9ydCBjb25zdCBMYXllckNsYXNzZXMgPSB7XG4gIFtMQVlFUl9UWVBFUy5wb2ludF06IFBvaW50TGF5ZXIsXG4gIFtMQVlFUl9UWVBFUy5hcmNdOiBBcmNMYXllcixcbiAgW0xBWUVSX1RZUEVTLmxpbmVdOiBMaW5lTGF5ZXIsXG4gIFtMQVlFUl9UWVBFUy5ncmlkXTogR3JpZExheWVyLFxuICBbTEFZRVJfVFlQRVMuaGV4YWdvbl06IEhleGFnb25MYXllcixcbiAgW0xBWUVSX1RZUEVTLmdlb2pzb25dOiBHZW9qc29uTGF5ZXIsXG4gIFtMQVlFUl9UWVBFUy5jbHVzdGVyXTogQ2x1c3RlckxheWVyLFxuICBbTEFZRVJfVFlQRVMuaWNvbl06IEljb25MYXllcixcbiAgW0xBWUVSX1RZUEVTLmhlYXRtYXBdOiBIZWF0bWFwTGF5ZXIsXG4gIFtMQVlFUl9UWVBFUy5oZXhhZ29uSWRdOiBIM0xheWVyLFxuICBbTEFZRVJfVFlQRVNbJzNEJ11dOiBTY2VuZWdyYXBoTGF5ZXIsXG4gIFtMQVlFUl9UWVBFUy50cmlwXTogVHJpcExheWVyLFxuICBbTEFZRVJfVFlQRVMuczJdOiBTMkdlb21ldHJ5TGF5ZXJcbn07XG5cbmV4cG9ydCB7TEFZRVJfVklTX0NPTkZJR1N9IGZyb20gJy4vbGF5ZXItZmFjdG9yeSc7XG4iXX0=