"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.mapStyleReducerFactory = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reduxActions = require("redux-actions");

var _actionTypes = _interopRequireDefault(require("../constants/action-types"));

var mapStyleUpdaters = _interopRequireWildcard(require("./map-style-updaters"));

var _actionHandler;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Important: Do not rename `actionHandler` or the assignment pattern of property value.
 * It is used to generate documentation
 */
var actionHandler = (_actionHandler = {}, (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].INIT, mapStyleUpdaters.initMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].INPUT_MAP_STYLE, mapStyleUpdaters.inputMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].MAP_CONFIG_CHANGE, mapStyleUpdaters.mapConfigChangeUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].MAP_STYLE_CHANGE, mapStyleUpdaters.mapStyleChangeUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].REQUEST_MAP_STYLES, mapStyleUpdaters.requestMapStylesUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].LOAD_MAP_STYLES, mapStyleUpdaters.loadMapStylesUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].LOAD_MAP_STYLE_ERR, mapStyleUpdaters.loadMapStyleErrUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].RECEIVE_MAP_CONFIG, mapStyleUpdaters.receiveMapConfigUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].LOAD_CUSTOM_MAP_STYLE, mapStyleUpdaters.loadCustomMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].ADD_CUSTOM_MAP_STYLE, mapStyleUpdaters.addCustomMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].RESET_MAP_CONFIG, mapStyleUpdaters.resetMapConfigMapStyleUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].SET_3D_BUILDING_COLOR, mapStyleUpdaters.set3dBuildingColorUpdater), (0, _defineProperty2["default"])(_actionHandler, _actionTypes["default"].RESET_MAP_CONFIG, mapStyleUpdaters.resetMapConfigMapStyleUpdater), _actionHandler);

var mapStyleReducerFactory = function mapStyleReducerFactory() {
  var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return (// @ts-ignore
    (0, _reduxActions.handleActions)(actionHandler, _objectSpread(_objectSpread(_objectSpread({}, mapStyleUpdaters.INITIAL_MAP_STYLE), initialState), {}, {
      initialState: initialState
    }))
  );
};

exports.mapStyleReducerFactory = mapStyleReducerFactory;

var _default = mapStyleReducerFactory();

exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yZWR1Y2Vycy9tYXAtc3R5bGUuanMiXSwibmFtZXMiOlsiYWN0aW9uSGFuZGxlciIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIm1hcFN0eWxlVXBkYXRlcnMiLCJpbml0TWFwU3R5bGVVcGRhdGVyIiwiSU5QVVRfTUFQX1NUWUxFIiwiaW5wdXRNYXBTdHlsZVVwZGF0ZXIiLCJNQVBfQ09ORklHX0NIQU5HRSIsIm1hcENvbmZpZ0NoYW5nZVVwZGF0ZXIiLCJNQVBfU1RZTEVfQ0hBTkdFIiwibWFwU3R5bGVDaGFuZ2VVcGRhdGVyIiwiUkVRVUVTVF9NQVBfU1RZTEVTIiwicmVxdWVzdE1hcFN0eWxlc1VwZGF0ZXIiLCJMT0FEX01BUF9TVFlMRVMiLCJsb2FkTWFwU3R5bGVzVXBkYXRlciIsIkxPQURfTUFQX1NUWUxFX0VSUiIsImxvYWRNYXBTdHlsZUVyclVwZGF0ZXIiLCJSRUNFSVZFX01BUF9DT05GSUciLCJyZWNlaXZlTWFwQ29uZmlnVXBkYXRlciIsIkxPQURfQ1VTVE9NX01BUF9TVFlMRSIsImxvYWRDdXN0b21NYXBTdHlsZVVwZGF0ZXIiLCJBRERfQ1VTVE9NX01BUF9TVFlMRSIsImFkZEN1c3RvbU1hcFN0eWxlVXBkYXRlciIsIlJFU0VUX01BUF9DT05GSUciLCJyZXNldE1hcENvbmZpZ01hcFN0eWxlVXBkYXRlciIsIlNFVF8zRF9CVUlMRElOR19DT0xPUiIsInNldDNkQnVpbGRpbmdDb2xvclVwZGF0ZXIiLCJtYXBTdHlsZVJlZHVjZXJGYWN0b3J5IiwiaW5pdGlhbFN0YXRlIiwiSU5JVElBTF9NQVBfU1RZTEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFvQkE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFNQSxhQUFhLDBFQUNoQkMsd0JBQVlDLElBREksRUFDR0MsZ0JBQWdCLENBQUNDLG1CQURwQixvREFFaEJILHdCQUFZSSxlQUZJLEVBRWNGLGdCQUFnQixDQUFDRyxvQkFGL0Isb0RBR2hCTCx3QkFBWU0saUJBSEksRUFHZ0JKLGdCQUFnQixDQUFDSyxzQkFIakMsb0RBSWhCUCx3QkFBWVEsZ0JBSkksRUFJZU4sZ0JBQWdCLENBQUNPLHFCQUpoQyxvREFLaEJULHdCQUFZVSxrQkFMSSxFQUtpQlIsZ0JBQWdCLENBQUNTLHVCQUxsQyxvREFNaEJYLHdCQUFZWSxlQU5JLEVBTWNWLGdCQUFnQixDQUFDVyxvQkFOL0Isb0RBT2hCYix3QkFBWWMsa0JBUEksRUFPaUJaLGdCQUFnQixDQUFDYSxzQkFQbEMsb0RBUWhCZix3QkFBWWdCLGtCQVJJLEVBUWlCZCxnQkFBZ0IsQ0FBQ2UsdUJBUmxDLG9EQVNoQmpCLHdCQUFZa0IscUJBVEksRUFTb0JoQixnQkFBZ0IsQ0FBQ2lCLHlCQVRyQyxvREFVaEJuQix3QkFBWW9CLG9CQVZJLEVBVW1CbEIsZ0JBQWdCLENBQUNtQix3QkFWcEMsb0RBV2hCckIsd0JBQVlzQixnQkFYSSxFQVdlcEIsZ0JBQWdCLENBQUNxQiw2QkFYaEMsb0RBWWhCdkIsd0JBQVl3QixxQkFaSSxFQVlvQnRCLGdCQUFnQixDQUFDdUIseUJBWnJDLG9EQWFoQnpCLHdCQUFZc0IsZ0JBYkksRUFhZXBCLGdCQUFnQixDQUFDcUIsNkJBYmhDLGtCQUFuQjs7QUFnQk8sSUFBTUcsc0JBQXNCLEdBQUcsU0FBekJBLHNCQUF5QjtBQUFBLE1BQUNDLFlBQUQsdUVBQWdCLEVBQWhCO0FBQUEsU0FDcEM7QUFDQSxxQ0FBYzVCLGFBQWQsZ0RBQ0tHLGdCQUFnQixDQUFDMEIsaUJBRHRCLEdBRUtELFlBRkw7QUFHRUEsTUFBQUEsWUFBWSxFQUFaQTtBQUhGO0FBRm9DO0FBQUEsQ0FBL0I7Ozs7ZUFRUUQsc0JBQXNCLEUiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMjEgVWJlciBUZWNobm9sb2dpZXMsIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge2hhbmRsZUFjdGlvbnN9IGZyb20gJ3JlZHV4LWFjdGlvbnMnO1xuaW1wb3J0IEFjdGlvblR5cGVzIGZyb20gJ2NvbnN0YW50cy9hY3Rpb24tdHlwZXMnO1xuaW1wb3J0ICogYXMgbWFwU3R5bGVVcGRhdGVycyBmcm9tICcuL21hcC1zdHlsZS11cGRhdGVycyc7XG5cbi8qKlxuICogSW1wb3J0YW50OiBEbyBub3QgcmVuYW1lIGBhY3Rpb25IYW5kbGVyYCBvciB0aGUgYXNzaWdubWVudCBwYXR0ZXJuIG9mIHByb3BlcnR5IHZhbHVlLlxuICogSXQgaXMgdXNlZCB0byBnZW5lcmF0ZSBkb2N1bWVudGF0aW9uXG4gKi9cbmNvbnN0IGFjdGlvbkhhbmRsZXIgPSB7XG4gIFtBY3Rpb25UeXBlcy5JTklUXTogbWFwU3R5bGVVcGRhdGVycy5pbml0TWFwU3R5bGVVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuSU5QVVRfTUFQX1NUWUxFXTogbWFwU3R5bGVVcGRhdGVycy5pbnB1dE1hcFN0eWxlVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLk1BUF9DT05GSUdfQ0hBTkdFXTogbWFwU3R5bGVVcGRhdGVycy5tYXBDb25maWdDaGFuZ2VVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuTUFQX1NUWUxFX0NIQU5HRV06IG1hcFN0eWxlVXBkYXRlcnMubWFwU3R5bGVDaGFuZ2VVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuUkVRVUVTVF9NQVBfU1RZTEVTXTogbWFwU3R5bGVVcGRhdGVycy5yZXF1ZXN0TWFwU3R5bGVzVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLkxPQURfTUFQX1NUWUxFU106IG1hcFN0eWxlVXBkYXRlcnMubG9hZE1hcFN0eWxlc1VwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5MT0FEX01BUF9TVFlMRV9FUlJdOiBtYXBTdHlsZVVwZGF0ZXJzLmxvYWRNYXBTdHlsZUVyclVwZGF0ZXIsXG4gIFtBY3Rpb25UeXBlcy5SRUNFSVZFX01BUF9DT05GSUddOiBtYXBTdHlsZVVwZGF0ZXJzLnJlY2VpdmVNYXBDb25maWdVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuTE9BRF9DVVNUT01fTUFQX1NUWUxFXTogbWFwU3R5bGVVcGRhdGVycy5sb2FkQ3VzdG9tTWFwU3R5bGVVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuQUREX0NVU1RPTV9NQVBfU1RZTEVdOiBtYXBTdHlsZVVwZGF0ZXJzLmFkZEN1c3RvbU1hcFN0eWxlVXBkYXRlcixcbiAgW0FjdGlvblR5cGVzLlJFU0VUX01BUF9DT05GSUddOiBtYXBTdHlsZVVwZGF0ZXJzLnJlc2V0TWFwQ29uZmlnTWFwU3R5bGVVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuU0VUXzNEX0JVSUxESU5HX0NPTE9SXTogbWFwU3R5bGVVcGRhdGVycy5zZXQzZEJ1aWxkaW5nQ29sb3JVcGRhdGVyLFxuICBbQWN0aW9uVHlwZXMuUkVTRVRfTUFQX0NPTkZJR106IG1hcFN0eWxlVXBkYXRlcnMucmVzZXRNYXBDb25maWdNYXBTdHlsZVVwZGF0ZXJcbn07XG5cbmV4cG9ydCBjb25zdCBtYXBTdHlsZVJlZHVjZXJGYWN0b3J5ID0gKGluaXRpYWxTdGF0ZSA9IHt9KSA9PlxuICAvLyBAdHMtaWdub3JlXG4gIGhhbmRsZUFjdGlvbnMoYWN0aW9uSGFuZGxlciwge1xuICAgIC4uLm1hcFN0eWxlVXBkYXRlcnMuSU5JVElBTF9NQVBfU1RZTEUsXG4gICAgLi4uaW5pdGlhbFN0YXRlLFxuICAgIGluaXRpYWxTdGF0ZVxuICB9KTtcblxuZXhwb3J0IGRlZmF1bHQgbWFwU3R5bGVSZWR1Y2VyRmFjdG9yeSgpO1xuIl19